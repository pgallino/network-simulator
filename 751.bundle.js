"use strict";(self.webpackChunknetsim=self.webpackChunknetsim||[]).push([[751],{4751:(e,t,r)=>{r.d(t,{WebGPURenderer:()=>Se});var s=r(8507),i=r(9313),n=r(6563),o=r(341),a=r(5611),u=r(4459),c=r(4e3),d=r(2067),h=r(6665),l=r(8475),p=r(5811);class f{init(){const e=new p.k({uTransformMatrix:{value:new i.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),t=(0,a.v)({name:"graphics",bits:[u.F,(0,c._)((0,n.a)()),d._Q,h.b]});this.shader=new l.M({gpuProgram:t,resources:{localUniforms:e}})}execute(e,t){const r=t.context,s=r.customShader||this.shader,i=e.renderer,n=i.graphicsContext,{batcher:a,instructions:u}=n.getContextRenderData(r),c=i.encoder;c.setPipelineFromGeometryProgramAndState(a.geometry,s.gpuProgram,e.state),c.setGeometry(a.geometry,s.gpuProgram);const d=i.globalUniforms.bindGroup;c.setBindGroup(0,d,s.gpuProgram);const h=i.renderPipes.uniformBatch.getUniformBindGroup(s.resources.localUniforms,!0);c.setBindGroup(2,h,s.gpuProgram);const l=u.instructions;for(let e=0;e<u.instructionSize;e++){const t=l[e];if(s.groups[1]=t.bindGroup,!t.gpuBindGroup){const e=t.textures;t.bindGroup=(0,o.w)(e.textures,e.count),t.gpuBindGroup=i.bindGroup.getBindGroup(t.bindGroup,s.gpuProgram,1)}c.setBindGroup(1,t.bindGroup,s.gpuProgram),c.renderPassEncoder.drawIndexed(t.size,1,t.start)}}destroy(){this.shader.destroy(!0),this.shader=null}}f.extension={type:[s.Ag.WebGPUPipesAdaptor],name:"graphics"};var g=r(3391),m=r(4492),_=r(268);class b{init(){const e=(0,a.v)({name:"mesh",bits:[d.Ls,g.R,h.b]});this._shader=new l.M({gpuProgram:e,resources:{uTexture:m.g.EMPTY._source,uSampler:m.g.EMPTY._source.style,textureUniforms:{uTextureMatrix:{type:"mat3x3<f32>",value:new i.u}}}})}execute(e,t){const r=e.renderer;let s=t._shader;if(s){if(!s.gpuProgram)return void(0,_.R)("Mesh shader has no gpuProgram",t.shader)}else s=this._shader,s.groups[2]=r.texture.getTextureBindGroup(t.texture);const i=s.gpuProgram;if(i.autoAssignGlobalUniforms&&(s.groups[0]=r.globalUniforms.bindGroup),i.autoAssignLocalUniforms){const t=e.localUniforms;s.groups[1]=r.renderPipes.uniformBatch.getUniformBindGroup(t,!0)}r.encoder.draw({geometry:t._geometry,shader:s,state:t.state})}destroy(){this._shader.destroy(!0),this._shader=null}}b.extension={type:[s.Ag.WebGPUPipesAdaptor],name:"mesh"};var x=r(7547);const y=x.U.for2d();class G{start(e,t,r){const s=e.renderer,i=s.encoder,n=r.gpuProgram;this._shader=r,this._geometry=t,i.setGeometry(t,n),y.blendMode="normal",s.pipeline.getPipeline(t,n,y);const o=s.globalUniforms.bindGroup;i.resetBindGroup(1),i.setBindGroup(0,o,n)}execute(e,t){const r=this._shader.gpuProgram,s=e.renderer,i=s.encoder;if(!t.bindGroup){const e=t.textures;t.bindGroup=(0,o.w)(e.textures,e.count)}y.blendMode=t.blendMode;const n=s.bindGroup.getBindGroup(t.bindGroup,r,1),a=s.pipeline.getPipeline(this._geometry,r,y);t.bindGroup._touch(s.textureGC.count),i.setPipeline(a),i.renderPassEncoder.setBindGroup(1,n),i.renderPassEncoder.drawIndexed(t.size,1,t.start)}}G.extension={type:[s.Ag.WebGPUPipesAdaptor],name:"batch"};var P=r(800),B=r(6680),v=r(5099);class S{constructor(e){this._hash=Object.create(null),this._renderer=e}contextChange(e){this._gpu=e}getBindGroup(e,t,r){return e._updateKey(),this._hash[e._key]||this._createBindGroup(e,t,r)}_createBindGroup(e,t,r){const s=this._gpu.device,i=t.layout[r],n=[],o=this._renderer;for(const t in i){const r=e.resources[t]??e.resources[i[t]];let s;if("uniformGroup"===r._resourceType){const e=r;o.ubo.updateUniformGroup(e);const t=e.buffer;s={buffer:o.buffer.getGPUBuffer(t),offset:0,size:t.descriptor.size}}else if("buffer"===r._resourceType){const e=r;s={buffer:o.buffer.getGPUBuffer(e),offset:0,size:e.descriptor.size}}else if("bufferResource"===r._resourceType){const e=r;s={buffer:o.buffer.getGPUBuffer(e.buffer),offset:e.offset,size:e.size}}else if("textureSampler"===r._resourceType){const e=r;s=o.texture.getGpuSampler(e)}else if("textureSource"===r._resourceType){const e=r;s=o.texture.getGpuSource(e).createView({})}n.push({binding:i[t],resource:s})}const a=o.shader.getProgramData(t).bindGroups[r],u=s.createBindGroup({layout:a,entries:n});return this._hash[e._key]=u,u}destroy(){for(const e of Object.keys(this._hash))this._hash[e]=null;this._hash=null,this._renderer=null}}S.extension={type:[s.Ag.WebGPUSystem],name:"bindGroup"};var T=r(6736);class C{constructor(){this._gpuBuffers=Object.create(null),this._managedBuffers=[]}contextChange(e){this._gpu=e}getGPUBuffer(e){return this._gpuBuffers[e.uid]||this.createGPUBuffer(e)}updateBuffer(e){const t=this._gpuBuffers[e.uid]||this.createGPUBuffer(e),r=e.data;return e._updateID&&r&&(e._updateID=0,this._gpu.device.queue.writeBuffer(t,0,r.buffer,0,(e._updateSize||r.byteLength)+3&-4)),t}destroyAll(){for(const e in this._gpuBuffers)this._gpuBuffers[e].destroy();this._gpuBuffers={}}createGPUBuffer(e){this._gpuBuffers[e.uid]||(e.on("update",this.updateBuffer,this),e.on("change",this.onBufferChange,this),e.on("destroy",this.onBufferDestroy,this),this._managedBuffers.push(e));const t=this._gpu.device.createBuffer(e.descriptor);return e._updateID=0,e.data&&((0,T.W)(e.data.buffer,t.getMappedRange()),t.unmap()),this._gpuBuffers[e.uid]=t,t}onBufferChange(e){this._gpuBuffers[e.uid].destroy(),e._updateID=0,this._gpuBuffers[e.uid]=this.createGPUBuffer(e)}onBufferDestroy(e){this._managedBuffers.splice(this._managedBuffers.indexOf(e),1),this._destroyBuffer(e)}destroy(){this._managedBuffers.forEach((e=>this._destroyBuffer(e))),this._managedBuffers=null,this._gpuBuffers=null}_destroyBuffer(e){this._gpuBuffers[e.uid].destroy(),e.off("update",this.updateBuffer,this),e.off("change",this.onBufferChange,this),e.off("destroy",this.onBufferDestroy,this),this._gpuBuffers[e.uid]=null}}C.extension={type:[s.Ag.WebGPUSystem],name:"buffer"};class U{constructor(e){this._colorMaskCache=15,this._renderer=e}setMask(e){this._colorMaskCache!==e&&(this._colorMaskCache=e,this._renderer.pipeline.setColorMask(e))}destroy(){this._renderer=null,this._colorMaskCache=null}}U.extension={type:[s.Ag.WebGPUSystem],name:"colorMask"};var M=r(1761);class w{constructor(e){this._renderer=e}async init(e){return this._initPromise||(this._initPromise=this._createDeviceAndAdaptor(e).then((e=>{this.gpu=e,this._renderer.runners.contextChange.emit(this.gpu)}))),this._initPromise}contextChange(e){this._renderer.gpu=e}async _createDeviceAndAdaptor(e){const t=await M.e.get().getNavigator().gpu.requestAdapter({powerPreference:e.powerPreference,forceFallbackAdapter:e.forceFallbackAdapter}),r=["texture-compression-bc","texture-compression-astc","texture-compression-etc2"].filter((e=>t.features.has(e))),s=await t.requestDevice({requiredFeatures:r});return{adapter:t,device:s}}destroy(){this.gpu=null,this._renderer=null}}w.extension={type:[s.Ag.WebGPUSystem],name:"device"},w.defaultOptions={powerPreference:void 0,forceFallbackAdapter:!1};class A{constructor(e){this._boundBindGroup=Object.create(null),this._boundVertexBuffer=Object.create(null),this._renderer=e}renderStart(){this.commandFinished=new Promise((e=>{this._resolveCommandFinished=e})),this.commandEncoder=this._renderer.gpu.device.createCommandEncoder()}beginRenderPass(e){this.endRenderPass(),this._clearCache(),this.renderPassEncoder=this.commandEncoder.beginRenderPass(e.descriptor)}endRenderPass(){this.renderPassEncoder&&this.renderPassEncoder.end(),this.renderPassEncoder=null}setViewport(e){this.renderPassEncoder.setViewport(e.x,e.y,e.width,e.height,0,1)}setPipelineFromGeometryProgramAndState(e,t,r,s){const i=this._renderer.pipeline.getPipeline(e,t,r,s);this.setPipeline(i)}setPipeline(e){this._boundPipeline!==e&&(this._boundPipeline=e,this.renderPassEncoder.setPipeline(e))}_setVertexBuffer(e,t){this._boundVertexBuffer[e]!==t&&(this._boundVertexBuffer[e]=t,this.renderPassEncoder.setVertexBuffer(e,this._renderer.buffer.updateBuffer(t)))}_setIndexBuffer(e){if(this._boundIndexBuffer===e)return;this._boundIndexBuffer=e;const t=2===e.data.BYTES_PER_ELEMENT?"uint16":"uint32";this.renderPassEncoder.setIndexBuffer(this._renderer.buffer.updateBuffer(e),t)}resetBindGroup(e){this._boundBindGroup[e]=null}setBindGroup(e,t,r){if(this._boundBindGroup[e]===t)return;this._boundBindGroup[e]=t,t._touch(this._renderer.textureGC.count);const s=this._renderer.bindGroup.getBindGroup(t,r,e);this.renderPassEncoder.setBindGroup(e,s)}setGeometry(e,t){const r=this._renderer.pipeline.getBufferNamesToBind(e,t);for(const t in r)this._setVertexBuffer(t,e.attributes[r[t]].buffer);e.indexBuffer&&this._setIndexBuffer(e.indexBuffer)}_setShaderBindGroups(e,t){for(const r in e.groups){const s=e.groups[r];t||this._syncBindGroup(s),this.setBindGroup(r,s,e.gpuProgram)}}_syncBindGroup(e){for(const t in e.resources){const r=e.resources[t];r.isUniformGroup&&this._renderer.ubo.updateUniformGroup(r)}}draw(e){const{geometry:t,shader:r,state:s,topology:i,size:n,start:o,instanceCount:a,skipSync:u}=e;this.setPipelineFromGeometryProgramAndState(t,r.gpuProgram,s,i),this.setGeometry(t,r.gpuProgram),this._setShaderBindGroups(r,u),t.indexBuffer?this.renderPassEncoder.drawIndexed(n||t.indexBuffer.data.length,a||t.instanceCount,o||0):this.renderPassEncoder.draw(n||t.getSize(),a||t.instanceCount,o||0)}finishRenderPass(){this.renderPassEncoder&&(this.renderPassEncoder.end(),this.renderPassEncoder=null)}postrender(){this.finishRenderPass(),this._gpu.device.queue.submit([this.commandEncoder.finish()]),this._resolveCommandFinished(),this.commandEncoder=null}restoreRenderPass(){const e=this._renderer.renderTarget.adaptor.getDescriptor(this._renderer.renderTarget.renderTarget,!1,[0,0,0,1]);this.renderPassEncoder=this.commandEncoder.beginRenderPass(e);const t=this._boundPipeline,r={...this._boundVertexBuffer},s=this._boundIndexBuffer,i={...this._boundBindGroup};this._clearCache();const n=this._renderer.renderTarget.viewport;this.renderPassEncoder.setViewport(n.x,n.y,n.width,n.height,0,1),this.setPipeline(t);for(const e in r)this._setVertexBuffer(e,r[e]);for(const e in i)this.setBindGroup(e,i[e],null);this._setIndexBuffer(s)}_clearCache(){for(let e=0;e<16;e++)this._boundBindGroup[e]=null,this._boundVertexBuffer[e]=null;this._boundIndexBuffer=null,this._boundPipeline=null}destroy(){this._renderer=null,this._gpu=null,this._boundBindGroup=null,this._boundVertexBuffer=null,this._boundIndexBuffer=null,this._boundPipeline=null}contextChange(e){this._gpu=e}}A.extension={type:[s.Ag.WebGPUSystem],name:"encoder",priority:1};var E=r(1957);class R{constructor(e){this._renderTargetStencilState=Object.create(null),this._renderer=e,e.renderTarget.onRenderTargetChange.add(this)}onRenderTargetChange(e){let t=this._renderTargetStencilState[e.uid];t||(t=this._renderTargetStencilState[e.uid]={stencilMode:E.K.DISABLED,stencilReference:0}),this._activeRenderTarget=e,this.setStencilMode(t.stencilMode,t.stencilReference)}setStencilMode(e,t){const r=this._renderTargetStencilState[this._activeRenderTarget.uid];r.stencilMode=e,r.stencilReference=t;const s=this._renderer;s.pipeline.setStencilMode(e),s.encoder.renderPassEncoder.setStencilReference(t)}destroy(){this._renderer.renderTarget.onRenderTargetChange.remove(this),this._renderer=null,this._activeRenderTarget=null,this._renderTargetStencilState=null}}R.extension={type:[s.Ag.WebGPUSystem],name:"stencil"};var O=r(7047);const k={i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},f16:{align:2,size:2},"vec2<i32>":{align:8,size:8},"vec2<u32>":{align:8,size:8},"vec2<f32>":{align:8,size:8},"vec2<f16>":{align:4,size:4},"vec3<i32>":{align:16,size:12},"vec3<u32>":{align:16,size:12},"vec3<f32>":{align:16,size:12},"vec3<f16>":{align:8,size:6},"vec4<i32>":{align:16,size:16},"vec4<u32>":{align:16,size:16},"vec4<f32>":{align:16,size:16},"vec4<f16>":{align:8,size:8},"mat2x2<f32>":{align:8,size:16},"mat2x2<f16>":{align:4,size:8},"mat3x2<f32>":{align:8,size:24},"mat3x2<f16>":{align:4,size:12},"mat4x2<f32>":{align:8,size:32},"mat4x2<f16>":{align:4,size:16},"mat2x3<f32>":{align:16,size:32},"mat2x3<f16>":{align:8,size:16},"mat3x3<f32>":{align:16,size:48},"mat3x3<f16>":{align:8,size:24},"mat4x3<f32>":{align:16,size:64},"mat4x3<f16>":{align:8,size:32},"mat2x4<f32>":{align:16,size:32},"mat2x4<f16>":{align:8,size:16},"mat3x4<f32>":{align:16,size:48},"mat3x4<f16>":{align:8,size:24},"mat4x4<f32>":{align:16,size:64},"mat4x4<f16>":{align:8,size:32}};function z(e){const t=e.map((e=>({data:e,offset:0,size:0})));let r=0;for(let e=0;e<t.length;e++){const s=t[e];let i=k[s.data.type].size;const n=k[s.data.type].align;if(!k[s.data.type])throw new Error(`[Pixi.js] WebGPU UniformBuffer: Unknown type ${s.data.type}`);s.data.size>1&&(i=Math.max(i,n)*s.data.size),r=Math.ceil(r/n)*n,s.size=i,s.offset=r,r+=i}return r=16*Math.ceil(r/16),{uboElements:t,size:r}}var F=r(6423),L=r(1266);function H(e,t){const{size:r,align:s}=k[e.data.type],i=(s-r)/4;return`\n         v = uv.${e.data.name};\n         ${0!==t?`offset += ${t};`:""}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${e.data.size*(r/4)}; i++)\n         {\n             for(var j = 0; j < ${r/4}; j++)\n             {\n                 data[arrayOffset++] = v[t++];\n             }\n             ${0!==i?`arrayOffset += ${i};`:""}\n         }\n     `}function D(e){return(0,F.E)(e,"uboWgsl",H,L._)}class W extends O.W{constructor(){super({createUboElements:z,generateUboSync:D})}}W.extension={type:[s.Ag.WebGPUSystem],name:"ubo"};var I=r(949),V=r(581),N=r(1132);class j{constructor({minUniformOffsetAlignment:e}){this._minUniformOffsetAlignment=256,this.byteIndex=0,this._minUniformOffsetAlignment=e,this.data=new Float32Array(65535)}clear(){this.byteIndex=0}addEmptyGroup(e){if(e>this._minUniformOffsetAlignment/4)throw new Error("UniformBufferBatch: array is too large: "+4*e);const t=this.byteIndex;let r=t+4*e;if(r=Math.ceil(r/this._minUniformOffsetAlignment)*this._minUniformOffsetAlignment,r>4*this.data.length)throw new Error("UniformBufferBatch: ubo batch got too big");return this.byteIndex=r,t}addGroup(e){const t=this.addEmptyGroup(e.length);for(let r=0;r<e.length;r++)this.data[t/4+r]=e[r];return t}destroy(){this._buffer.destroy(),this._buffer=null,this.data=null}}var K=r(3513);const q=128;class Y{constructor(e){this._bindGroupHash=Object.create(null),this._buffers=[],this._bindGroups=[],this._bufferResources=[],this._renderer=e,this._batchBuffer=new j({minUniformOffsetAlignment:q});for(let e=0;e<2;e++){let t=N.S.UNIFORM|N.S.COPY_DST;0===e&&(t|=N.S.COPY_SRC),this._buffers.push(new I.h({data:this._batchBuffer.data,usage:t}))}}renderEnd(){this._uploadBindGroups(),this._resetBindGroups()}_resetBindGroups(){for(const e in this._bindGroupHash)this._bindGroupHash[e]=null;this._batchBuffer.clear()}getUniformBindGroup(e,t){if(!t&&this._bindGroupHash[e.uid])return this._bindGroupHash[e.uid];this._renderer.ubo.ensureUniformGroup(e);const r=e.buffer.data,s=this._batchBuffer.addEmptyGroup(r.length);return this._renderer.ubo.syncUniformGroup(e,this._batchBuffer.data,s/4),this._bindGroupHash[e.uid]=this._getBindGroup(s/q),this._bindGroupHash[e.uid]}getUboResource(e){this._renderer.ubo.updateUniformGroup(e);const t=e.buffer.data,r=this._batchBuffer.addGroup(t);return this._getBufferResource(r/q)}getArrayBindGroup(e){const t=this._batchBuffer.addGroup(e);return this._getBindGroup(t/q)}getArrayBufferResource(e){const t=this._batchBuffer.addGroup(e)/q;return this._getBufferResource(t)}_getBufferResource(e){if(!this._bufferResources[e]){const t=this._buffers[e%2];this._bufferResources[e]=new V.d({buffer:t,offset:256*(e/2|0),size:q})}return this._bufferResources[e]}_getBindGroup(e){if(!this._bindGroups[e]){const t=new K.T({0:this._getBufferResource(e)});this._bindGroups[e]=t}return this._bindGroups[e]}_uploadBindGroups(){const e=this._renderer.buffer,t=this._buffers[0];t.update(this._batchBuffer.byteIndex),e.updateBuffer(t);const r=this._renderer.gpu.device.createCommandEncoder();for(let s=1;s<this._buffers.length;s++){const i=this._buffers[s];r.copyBufferToBuffer(e.getGPUBuffer(t),q,e.getGPUBuffer(i),0,this._batchBuffer.byteIndex)}this._renderer.gpu.device.queue.submit([r.finish()])}destroy(){for(let e=0;e<this._bindGroups.length;e++)this._bindGroups[e].destroy();this._bindGroups=null,this._bindGroupHash=null;for(let e=0;e<this._buffers.length;e++)this._buffers[e].destroy();this._buffers=null;for(let e=0;e<this._bufferResources.length;e++)this._bufferResources[e].destroy();this._bufferResources=null,this._batchBuffer.destroy(),this._bindGroupHash=null,this._renderer=null}}Y.extension={type:[s.Ag.WebGPUPipes],name:"uniformBatch"};var X=r(7084),$=r(7952),Q=r(1172);const J={"point-list":0,"line-list":1,"line-strip":2,"triangle-list":3,"triangle-strip":4};class Z{constructor(e){this._moduleCache=Object.create(null),this._bufferLayoutsCache=Object.create(null),this._bindingNamesCache=Object.create(null),this._pipeCache=Object.create(null),this._pipeStateCaches=Object.create(null),this._colorMask=15,this._multisampleCount=1,this._renderer=e}contextChange(e){this._gpu=e,this.setStencilMode(E.K.DISABLED),this._updatePipeHash()}setMultisampleCount(e){this._multisampleCount!==e&&(this._multisampleCount=e,this._updatePipeHash())}setRenderTarget(e){this._multisampleCount=e.msaaSamples,this._depthStencilAttachment=e.descriptor.depthStencilAttachment?1:0,this._updatePipeHash()}setColorMask(e){this._colorMask!==e&&(this._colorMask=e,this._updatePipeHash())}setStencilMode(e){this._stencilMode!==e&&(this._stencilMode=e,this._stencilState=Q.g[e],this._updatePipeHash())}setPipeline(e,t,r,s){const i=this.getPipeline(e,t,r);s.setPipeline(i)}getPipeline(e,t,r,s){e._layoutKey||((0,X.q)(e,t.attributeData),this._generateBufferKey(e)),s=s||e.topology;const i=function(e,t,r,s,i){return e<<24|t<<16|r<<10|s<<5|i}(e._layoutKey,t._layoutKey,r.data,r._blendModeId,J[s]);return this._pipeCache[i]||(this._pipeCache[i]=this._createPipeline(e,t,r,s)),this._pipeCache[i]}_createPipeline(e,t,r,s){const i=this._gpu.device,n=this._createVertexBufferLayouts(e,t),o=this._renderer.state.getColorTargets(r);o[0].writeMask=this._stencilMode===E.K.RENDERING_MASK_ADD?0:this._colorMask;const a=this._renderer.shader.getProgramData(t).pipeline,u={vertex:{module:this._getModule(t.vertex.source),entryPoint:t.vertex.entryPoint,buffers:n},fragment:{module:this._getModule(t.fragment.source),entryPoint:t.fragment.entryPoint,targets:o},primitive:{topology:s,cullMode:r.cullMode},layout:a,multisample:{count:this._multisampleCount},label:"PIXI Pipeline"};return this._depthStencilAttachment&&(u.depthStencil={...this._stencilState,format:"depth24plus-stencil8",depthWriteEnabled:r.depthTest,depthCompare:r.depthTest?"less":"always"}),i.createRenderPipeline(u)}_getModule(e){return this._moduleCache[e]||this._createModule(e)}_createModule(e){const t=this._gpu.device;return this._moduleCache[e]=t.createShaderModule({code:e}),this._moduleCache[e]}_generateBufferKey(e){const t=[];let r=0;const s=Object.keys(e.attributes).sort();for(let i=0;i<s.length;i++){const n=e.attributes[s[i]];t[r++]=n.offset,t[r++]=n.format,t[r++]=n.stride,t[r++]=n.instance}const i=t.join("|");return e._layoutKey=(0,$.X)(i,"geometry"),e._layoutKey}_generateAttributeLocationsKey(e){const t=[];let r=0;const s=Object.keys(e.attributeData).sort();for(let i=0;i<s.length;i++){const n=e.attributeData[s[i]];t[r++]=n.location}const i=t.join("|");return e._attributeLocationsKey=(0,$.X)(i,"programAttributes"),e._attributeLocationsKey}getBufferNamesToBind(e,t){const r=e._layoutKey<<16|t._attributeLocationsKey;if(this._bindingNamesCache[r])return this._bindingNamesCache[r];const s=this._createVertexBufferLayouts(e,t),i=Object.create(null),n=t.attributeData;for(let e=0;e<s.length;e++)for(const t in n)if(n[t].location===e){i[e]=t;break}return this._bindingNamesCache[r]=i,i}_createVertexBufferLayouts(e,t){t._attributeLocationsKey||this._generateAttributeLocationsKey(t);const r=e._layoutKey<<16|t._attributeLocationsKey;if(this._bufferLayoutsCache[r])return this._bufferLayoutsCache[r];const s=[];return e.buffers.forEach((r=>{const i={arrayStride:0,stepMode:"vertex",attributes:[]},n=i.attributes;for(const s in t.attributeData){const o=e.attributes[s];1!==(o.divisor??1)&&(0,_.R)(`Attribute ${s} has an invalid divisor value of '${o.divisor}'. WebGPU only supports a divisor value of 1`),o.buffer===r&&(i.arrayStride=o.stride,i.stepMode=o.instance?"instance":"vertex",n.push({shaderLocation:t.attributeData[s].location,offset:o.offset,format:o.format}))}n.length&&s.push(i)})),this._bufferLayoutsCache[r]=s,s}_updatePipeHash(){const e=(t=this._stencilMode,r=this._multisampleCount,this._colorMask<<6|t<<3|this._depthStencilAttachment<<1|r);var t,r;this._pipeStateCaches[e]||(this._pipeStateCaches[e]=Object.create(null)),this._pipeCache=this._pipeStateCaches[e]}destroy(){this._renderer=null,this._bufferLayoutsCache=null}}Z.extension={type:[s.Ag.WebGPUSystem],name:"pipeline"};var ee=r(7238),te=r(1257),re=r(4884),se=r(6932);class ie{constructor(){this.contexts=[],this.msaaTextures=[],this.msaaSamples=1}}class ne{init(e,t){this._renderer=e,this._renderTargetSystem=t}copyToTexture(e,t,r,s,i){const n=this._renderer,o=this._getGpuColorTexture(e),a=n.texture.getGpuSource(t.source);return n.encoder.commandEncoder.copyTextureToTexture({texture:o,origin:r},{texture:a,origin:i},s),t}startRenderPass(e,t=!0,r,s){const i=this._renderTargetSystem.getGpuRenderTarget(e),n=this.getDescriptor(e,t,r);i.descriptor=n,this._renderer.pipeline.setRenderTarget(i),this._renderer.encoder.beginRenderPass(i),this._renderer.encoder.setViewport(s)}finishRenderPass(){this._renderer.encoder.endRenderPass()}_getGpuColorTexture(e){const t=this._renderTargetSystem.getGpuRenderTarget(e);return t.contexts[0]?t.contexts[0].getCurrentTexture():this._renderer.texture.getGpuSource(e.colorTextures[0].source)}getDescriptor(e,t,r){"boolean"==typeof t&&(t=t?te.u.ALL:te.u.NONE);const s=this._renderTargetSystem,i=s.getGpuRenderTarget(e),n=e.colorTextures.map(((e,n)=>{const o=i.contexts[n];let a,u;a=o?o.getCurrentTexture().createView():this._renderer.texture.getGpuSource(e).createView({mipLevelCount:1}),i.msaaTextures[n]&&(u=a,a=this._renderer.texture.getTextureView(i.msaaTextures[n]));const c=t&te.u.COLOR?"clear":"load";return r??(r=s.defaultClearColor),{view:a,resolveTarget:u,clearValue:r,storeOp:"store",loadOp:c}}));let o;if(!e.stencil&&!e.depth||e.depthStencilTexture||(e.ensureDepthStencilTexture(),e.depthStencilTexture.source.sampleCount=i.msaa?4:1),e.depthStencilTexture){const r=t&te.u.STENCIL?"clear":"load",s=t&te.u.DEPTH?"clear":"load";o={view:this._renderer.texture.getGpuSource(e.depthStencilTexture.source).createView(),stencilStoreOp:"store",stencilLoadOp:r,depthClearValue:1,depthLoadOp:s,depthStoreOp:"store"}}return{colorAttachments:n,depthStencilAttachment:o}}clear(e,t=!0,r,s){if(!t)return;const{gpu:i,encoder:n}=this._renderer,o=i.device;if(null===n.commandEncoder){const i=o.createCommandEncoder(),n=this.getDescriptor(e,t,r),a=i.beginRenderPass(n);a.setViewport(s.x,s.y,s.width,s.height,0,1),a.end();const u=i.finish();o.queue.submit([u])}else this.startRenderPass(e,t,r,s)}initGpuRenderTarget(e){e.isRoot=!0;const t=new ie;return e.colorTextures.forEach(((e,r)=>{if(re.q.test(e.resource)){const s=e.resource.getContext("webgpu"),i=e.transparent?"premultiplied":"opaque";try{s.configure({device:this._renderer.gpu.device,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,format:"bgra8unorm",alphaMode:i})}catch(e){console.error(e)}t.contexts[r]=s}if(t.msaa=e.source.antialias,e.source.antialias){const e=new se.v({width:0,height:0,sampleCount:4});t.msaaTextures[r]=e}})),t.msaa&&(t.msaaSamples=4,e.depthStencilTexture&&(e.depthStencilTexture.source.sampleCount=4)),t}destroyGpuRenderTarget(e){e.contexts.forEach((e=>{e.unconfigure()})),e.msaaTextures.forEach((e=>{e.destroy()})),e.msaaTextures.length=0,e.contexts.length=0}ensureDepthStencilTexture(e){const t=this._renderTargetSystem.getGpuRenderTarget(e);e.depthStencilTexture&&t.msaa&&(e.depthStencilTexture.source.sampleCount=4)}resizeGpuRenderTarget(e){const t=this._renderTargetSystem.getGpuRenderTarget(e);t.width=e.width,t.height=e.height,t.msaa&&e.colorTextures.forEach(((e,r)=>{const s=t.msaaTextures[r];s?.resize(e.source.width,e.source.height,e.source._resolution)}))}}class oe extends ee.l{constructor(e){super(e),this.adaptor=new ne,this.adaptor.init(e,this)}}oe.extension={type:[s.Ag.WebGPUSystem],name:"renderTarget"};class ae{constructor(){this._gpuProgramData=Object.create(null)}contextChange(e){this._gpu=e,this.maxTextures=e.device.limits.maxSampledTexturesPerShaderStage}getProgramData(e){return this._gpuProgramData[e._layoutKey]||this._createGPUProgramData(e)}_createGPUProgramData(e){const t=this._gpu.device,r=e.gpuLayout.map((e=>t.createBindGroupLayout({entries:e}))),s={bindGroupLayouts:r};return this._gpuProgramData[e._layoutKey]={bindGroups:r,pipeline:t.createPipelineLayout(s)},this._gpuProgramData[e._layoutKey]}destroy(){this._gpu=null,this._gpuProgramData=null}}ae.extension={type:[s.Ag.WebGPUSystem],name:"shader"};const ue={normal:{alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"}},add:{alpha:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"one",dstFactor:"one",operation:"add"}},multiply:{alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"dst",dstFactor:"one-minus-src-alpha",operation:"add"}},screen:{alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"one",dstFactor:"one-minus-src",operation:"add"}},overlay:{alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"one",dstFactor:"one-minus-src",operation:"add"}},none:{alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"zero",dstFactor:"zero",operation:"add"}},"normal-npm":{alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"}},"add-npm":{alpha:{srcFactor:"one",dstFactor:"one",operation:"add"},color:{srcFactor:"src-alpha",dstFactor:"one",operation:"add"}},"screen-npm":{alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"src-alpha",dstFactor:"one-minus-src",operation:"add"}},erase:{alpha:{srcFactor:"zero",dstFactor:"one-minus-src-alpha",operation:"add"},color:{srcFactor:"zero",dstFactor:"one-minus-src",operation:"add"}},min:{alpha:{srcFactor:"one",dstFactor:"one",operation:"min"},color:{srcFactor:"one",dstFactor:"one",operation:"min"}},max:{alpha:{srcFactor:"one",dstFactor:"one",operation:"max"},color:{srcFactor:"one",dstFactor:"one",operation:"max"}}};class ce{constructor(){this.defaultState=new x.U,this.defaultState.blend=!0}contextChange(e){this.gpu=e}getColorTargets(e){return[{format:"bgra8unorm",writeMask:0,blend:ue[e.blendMode]||ue.normal}]}destroy(){this.gpu=null}}ce.extension={type:[s.Ag.WebGPUSystem],name:"state"};var de=r(7608);const he={type:"image",upload(e,t,r){const s=e.resource,i=(0|e.pixelWidth)*(0|e.pixelHeight),n=s.byteLength/i;r.device.queue.writeTexture({texture:t},s,{offset:0,rowsPerImage:e.pixelHeight,bytesPerRow:e.pixelHeight*n},{width:e.pixelWidth,height:e.pixelHeight,depthOrArrayLayers:1})}},le={"bc1-rgba-unorm":{blockBytes:8,blockWidth:4,blockHeight:4},"bc2-rgba-unorm":{blockBytes:16,blockWidth:4,blockHeight:4},"bc3-rgba-unorm":{blockBytes:16,blockWidth:4,blockHeight:4},"bc7-rgba-unorm":{blockBytes:16,blockWidth:4,blockHeight:4},"etc1-rgb-unorm":{blockBytes:8,blockWidth:4,blockHeight:4},"etc2-rgba8unorm":{blockBytes:16,blockWidth:4,blockHeight:4},"astc-4x4-unorm":{blockBytes:16,blockWidth:4,blockHeight:4}},pe={blockBytes:4,blockWidth:1,blockHeight:1},fe={type:"compressed",upload(e,t,r){let s=e.pixelWidth,i=e.pixelHeight;const n=le[e.format]||pe;for(let o=0;o<e.resource.length;o++){const a=e.resource[o],u=Math.ceil(s/n.blockWidth)*n.blockBytes;r.device.queue.writeTexture({texture:t,mipLevel:o},a,{offset:0,bytesPerRow:u},{width:Math.ceil(s/n.blockWidth)*n.blockWidth,height:Math.ceil(i/n.blockHeight)*n.blockHeight,depthOrArrayLayers:1}),s=Math.max(s>>1,1),i=Math.max(i>>1,1)}}},ge={type:"image",upload(e,t,r){const s=e.resource;if(!s)return;const i=Math.min(t.width,e.resourceWidth||e.pixelWidth),n=Math.min(t.height,e.resourceHeight||e.pixelHeight),o="premultiply-alpha-on-upload"===e.alphaMode;r.device.queue.copyExternalImageToTexture({source:s},{texture:t,premultipliedAlpha:o},{width:i,height:n})}},me={type:"video",upload(e,t,r){ge.upload(e,t,r)}};class _e{constructor(e){this.device=e,this.sampler=e.createSampler({minFilter:"linear"}),this.pipelines={}}_getMipmapPipeline(e){let t=this.pipelines[e];return t||(this.mipmapShaderModule||(this.mipmapShaderModule=this.device.createShaderModule({code:"\n                        var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                        vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));\n\n                        struct VertexOutput {\n                        @builtin(position) position : vec4<f32>,\n                        @location(0) texCoord : vec2<f32>,\n                        };\n\n                        @vertex\n                        fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n                        var output : VertexOutput;\n                        output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);\n                        output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);\n                        return output;\n                        }\n\n                        @group(0) @binding(0) var imgSampler : sampler;\n                        @group(0) @binding(1) var img : texture_2d<f32>;\n\n                        @fragment\n                        fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {\n                        return textureSample(img, imgSampler, texCoord);\n                        }\n                    "})),t=this.device.createRenderPipeline({layout:"auto",vertex:{module:this.mipmapShaderModule,entryPoint:"vertexMain"},fragment:{module:this.mipmapShaderModule,entryPoint:"fragmentMain",targets:[{format:e}]}}),this.pipelines[e]=t),t}generateMipmap(e){const t=this._getMipmapPipeline(e.format);if("3d"===e.dimension||"1d"===e.dimension)throw new Error("Generating mipmaps for non-2d textures is currently unsupported!");let r=e;const s=e.depthOrArrayLayers||1,i=e.usage&GPUTextureUsage.RENDER_ATTACHMENT;if(!i){const t={size:{width:Math.ceil(e.width/2),height:Math.ceil(e.height/2),depthOrArrayLayers:s},format:e.format,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.RENDER_ATTACHMENT,mipLevelCount:e.mipLevelCount-1};r=this.device.createTexture(t)}const n=this.device.createCommandEncoder({}),o=t.getBindGroupLayout(0);for(let a=0;a<s;++a){let s=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:"2d",baseArrayLayer:a,arrayLayerCount:1}),u=i?1:0;for(let i=1;i<e.mipLevelCount;++i){const e=r.createView({baseMipLevel:u++,mipLevelCount:1,dimension:"2d",baseArrayLayer:a,arrayLayerCount:1}),i=n.beginRenderPass({colorAttachments:[{view:e,storeOp:"store",loadOp:"clear",clearValue:{r:0,g:0,b:0,a:0}}]}),c=this.device.createBindGroup({layout:o,entries:[{binding:0,resource:this.sampler},{binding:1,resource:s}]});i.setPipeline(t),i.setBindGroup(0,c),i.draw(3,1,0,0),i.end(),s=e}}if(!i){const t={width:Math.ceil(e.width/2),height:Math.ceil(e.height/2),depthOrArrayLayers:s};for(let s=1;s<e.mipLevelCount;++s)n.copyTextureToTexture({texture:r,mipLevel:s-1},{texture:e,mipLevel:s},t),t.width=Math.ceil(t.width/2),t.height=Math.ceil(t.height/2)}return this.device.queue.submit([n.finish()]),i||r.destroy(),e}}class be{constructor(e){this.managedTextures=[],this._gpuSources=Object.create(null),this._gpuSamplers=Object.create(null),this._bindGroupHash=Object.create(null),this._textureViewHash=Object.create(null),this._uploads={image:ge,buffer:he,video:me,compressed:fe},this._renderer=e}contextChange(e){this._gpu=e}initSource(e){if(e.autoGenerateMipmaps){const t=Math.max(e.pixelWidth,e.pixelHeight);e.mipLevelCount=Math.floor(Math.log2(t))+1}let t=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST;"compressed"!==e.uploadMethodId&&(t|=GPUTextureUsage.RENDER_ATTACHMENT,t|=GPUTextureUsage.COPY_SRC);const r=le[e.format]||{blockBytes:4,blockWidth:1,blockHeight:1},s=Math.ceil(e.pixelWidth/r.blockWidth)*r.blockWidth,i=Math.ceil(e.pixelHeight/r.blockHeight)*r.blockHeight,n={label:e.label,size:{width:s,height:i},format:e.format,sampleCount:e.sampleCount,mipLevelCount:e.mipLevelCount,dimension:e.dimension,usage:t},o=this._gpu.device.createTexture(n);return this._gpuSources[e.uid]=o,this.managedTextures.includes(e)||(e.on("update",this.onSourceUpdate,this),e.on("resize",this.onSourceResize,this),e.on("destroy",this.onSourceDestroy,this),e.on("unload",this.onSourceUnload,this),e.on("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.push(e)),this.onSourceUpdate(e),o}onSourceUpdate(e){const t=this.getGpuSource(e);t&&(this._uploads[e.uploadMethodId]&&this._uploads[e.uploadMethodId].upload(e,t,this._gpu),e.autoGenerateMipmaps&&e.mipLevelCount>1&&this.onUpdateMipmaps(e))}onSourceUnload(e){const t=this._gpuSources[e.uid];t&&(this._gpuSources[e.uid]=null,t.destroy())}onUpdateMipmaps(e){this._mipmapGenerator||(this._mipmapGenerator=new _e(this._gpu.device));const t=this.getGpuSource(e);this._mipmapGenerator.generateMipmap(t)}onSourceDestroy(e){e.off("update",this.onSourceUpdate,this),e.off("unload",this.onSourceUnload,this),e.off("destroy",this.onSourceDestroy,this),e.off("resize",this.onSourceResize,this),e.off("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.splice(this.managedTextures.indexOf(e),1),this.onSourceUnload(e)}onSourceResize(e){const t=this._gpuSources[e.uid];t?t.width===e.pixelWidth&&t.height===e.pixelHeight||(this._textureViewHash[e.uid]=null,this._bindGroupHash[e.uid]=null,this.onSourceUnload(e),this.initSource(e)):this.initSource(e)}_initSampler(e){return this._gpuSamplers[e._resourceId]=this._gpu.device.createSampler(e),this._gpuSamplers[e._resourceId]}getGpuSampler(e){return this._gpuSamplers[e._resourceId]||this._initSampler(e)}getGpuSource(e){return this._gpuSources[e.uid]||this.initSource(e)}getTextureBindGroup(e){return this._bindGroupHash[e.uid]??this._createTextureBindGroup(e)}_createTextureBindGroup(e){const t=e.source;return this._bindGroupHash[e.uid]=new K.T({0:t,1:t.style,2:new p.k({uTextureMatrix:{type:"mat3x3<f32>",value:e.textureMatrix.mapCoord}})}),this._bindGroupHash[e.uid]}getTextureView(e){const t=e.source;return this._textureViewHash[t.uid]??this._createTextureView(t)}_createTextureView(e){return this._textureViewHash[e.uid]=this.getGpuSource(e).createView(),this._textureViewHash[e.uid]}generateCanvas(e){const t=this._renderer,r=t.gpu.device.createCommandEncoder(),s=M.e.get().createCanvas();s.width=e.source.pixelWidth,s.height=e.source.pixelHeight;const i=s.getContext("webgpu");return i.configure({device:t.gpu.device,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC,format:M.e.get().getNavigator().gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"}),r.copyTextureToTexture({texture:t.texture.getGpuSource(e.source),origin:{x:0,y:0}},{texture:i.getCurrentTexture()},{width:s.width,height:s.height}),t.gpu.device.queue.submit([r.finish()]),s}getPixels(e){const t=this.generateCanvas(e),r=de.N.getOptimalCanvasAndContext(t.width,t.height),s=r.context;s.drawImage(t,0,0);const{width:i,height:n}=t,o=s.getImageData(0,0,i,n),a=new Uint8ClampedArray(o.data.buffer);return de.N.returnCanvasAndContext(r),{pixels:a,width:i,height:n}}destroy(){this.managedTextures.slice().forEach((e=>this.onSourceDestroy(e))),this.managedTextures=null;for(const e of Object.keys(this._bindGroupHash)){const t=Number(e),r=this._bindGroupHash[t];r?.destroy(),this._bindGroupHash[t]=null}this._gpu=null,this._mipmapGenerator=null,this._gpuSources=null,this._bindGroupHash=null,this._textureViewHash=null,this._gpuSamplers=null}}be.extension={type:[s.Ag.WebGPUSystem],name:"texture"};const xe=[...B.i,W,A,w,C,be,oe,ae,ce,Z,U,R,S],ye=[...B.f,Y],Ge=[G,b,f],Pe=[],Be=[],ve=[];s.XO.handleByNamedList(s.Ag.WebGPUSystem,Pe),s.XO.handleByNamedList(s.Ag.WebGPUPipes,Be),s.XO.handleByNamedList(s.Ag.WebGPUPipesAdaptor,ve),s.XO.add(...xe,...ye,...Ge);class Se extends P.k{constructor(){super({name:"webgpu",type:v.W.WEBGPU,systems:Pe,renderPipes:Be,renderPipeAdaptors:ve})}}},7608:(e,t,r)=>{r.d(t,{N:()=>n});var s=r(1761),i=r(9939);const n=new class{constructor(e){this._canvasPool=Object.create(null),this.canvasOptions=e||{},this.enableFullScreen=!1}_createCanvasAndContext(e,t){const r=s.e.get().createCanvas();r.width=e,r.height=t;const i=r.getContext("2d");return{canvas:r,context:i}}getOptimalCanvasAndContext(e,t,r=1){e=Math.ceil(e*r-1e-6),t=Math.ceil(t*r-1e-6);const s=((e=(0,i.U5)(e))<<17)+((t=(0,i.U5)(t))<<1);this._canvasPool[s]||(this._canvasPool[s]=[]);let n=this._canvasPool[s].pop();return n||(n=this._createCanvasAndContext(e,t)),n}returnCanvasAndContext(e){const t=e.canvas,{width:r,height:s}=t,i=(r<<17)+(s<<1);this._canvasPool[i].push(e)}clear(){this._canvasPool={}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WUFBWXZkLEdBQU8sSUFFMUIsSUFBSWdjLEVBQW1CdGpCLEtBQUs2a0IsWUFBWXZkLEdBQUs2ZCxNQUk3QyxPQUhLN0IsSUFDSEEsRUFBbUJ0akIsS0FBSytrQix3QkFBd0JDLEVBQVVDLElBRXJEM0IsQ0FDVCxDQUtBLHNCQUFBUSxDQUF1QlIsR0FDckIsTUFBTUwsRUFBU0ssRUFBaUJMLFFBQzFCLE1BQUVqWCxFQUFLLE9BQUVDLEdBQVdnWCxFQUNwQjNiLEdBQU8wRSxHQUFTLEtBQU9DLEdBQVUsR0FDdkNqTSxLQUFLNmtCLFlBQVl2ZCxHQUFLTCxLQUFLcWMsRUFDN0IsQ0FDQSxLQUFBeFMsR0FDRTlRLEtBQUs2a0IsWUFBYyxDQUFDLENBQ3RCLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvZ3JhcGhpY3MvZ3B1L0dwdUdyYXBoaWNzQWRhcHRvci5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL21lc2gvZ3B1L0dwdU1lc2hBZGFwdGVyLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL2JhdGNoZXIvZ3B1L0dwdUJhdGNoQWRhcHRvci5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L0JpbmRHcm91cFN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L2J1ZmZlci9HcHVCdWZmZXJTeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9HcHVDb2xvck1hc2tTeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9HcHVEZXZpY2VTeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9HcHVFbmNvZGVyU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvR3B1U3RlbmNpbFN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L3NoYWRlci91dGlscy9jcmVhdGVVYm9FbGVtZW50c1dHU0wubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9zaGFkZXIvdXRpbHMvZ2VuZXJhdGVBcnJheVN5bmNXR1NMLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvc2hhZGVyL3V0aWxzL2NyZWF0ZVVib1N5bmNGdW5jdGlvbldHU0wubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9HcHVVYm9TeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9idWZmZXIvVWJvQmF0Y2gubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9HcHVVbmlmb3JtQmF0Y2hQaXBlLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvcGlwZWxpbmUvUGlwZWxpbmVTeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9yZW5kZXJUYXJnZXQvR3B1UmVuZGVyVGFyZ2V0Lm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvcmVuZGVyVGFyZ2V0L0dwdVJlbmRlclRhcmdldEFkYXB0b3IubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9yZW5kZXJUYXJnZXQvR3B1UmVuZGVyVGFyZ2V0U3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvc2hhZGVyL0dwdVNoYWRlclN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L3N0YXRlL0dwdUJsZW5kTW9kZXNUb1BpeGkubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9zdGF0ZS9HcHVTdGF0ZVN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L3RleHR1cmUvdXBsb2FkZXJzL2dwdVVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS90ZXh0dXJlL3VwbG9hZGVycy9ncHVVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvdGV4dHVyZS91cGxvYWRlcnMvZ3B1VXBsb2FkSW1hZ2VTb3VyY2UubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS90ZXh0dXJlL3VwbG9hZGVycy9ncHVVcGxvYWRWaWRlb1NvdXJjZS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L3RleHR1cmUvdXRpbHMvR3B1TWlwbWFwR2VuZXJhdG9yLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvdGV4dHVyZS9HcHVUZXh0dXJlU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvV2ViR1BVUmVuZGVyZXIubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL0NhbnZhc1Bvb2wubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IGdldE1heFRleHR1cmVzUGVyQmF0Y2ggfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvYmF0Y2hlci9nbC91dGlscy9tYXhSZWNvbW1lbmRlZFRleHR1cmVzLm1qcyc7XG5pbXBvcnQgeyBnZXRUZXh0dXJlQmF0Y2hCaW5kR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvYmF0Y2hlci9ncHUvZ2V0VGV4dHVyZUJhdGNoQmluZEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBjb21waWxlSGlnaFNoYWRlckdwdVByb2dyYW0gfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvY29tcGlsZUhpZ2hTaGFkZXJUb1Byb2dyYW0ubWpzJztcbmltcG9ydCB7IGNvbG9yQml0IH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2NvbG9yQml0Lm1qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9nZW5lcmF0ZVRleHR1cmVCYXRjaEJpdC5tanMnO1xuaW1wb3J0IHsgbG9jYWxVbmlmb3JtQml0R3JvdXAyIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybUJpdC5tanMnO1xuaW1wb3J0IHsgcm91bmRQaXhlbHNCaXQgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvcm91bmRQaXhlbHNCaXQubWpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9TaGFkZXIubWpzJztcbmltcG9ydCB7IFVuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHcHVHcmFwaGljc0FkYXB0b3Ige1xuICBpbml0KCkge1xuICAgIGNvbnN0IGxvY2FsVW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgIHVUcmFuc2Zvcm1NYXRyaXg6IHsgdmFsdWU6IG5ldyBNYXRyaXgoKSwgdHlwZTogXCJtYXQzeDM8ZjMyPlwiIH0sXG4gICAgICB1Q29sb3I6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoWzEsIDEsIDEsIDFdKSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgdVJvdW5kOiB7IHZhbHVlOiAwLCB0eXBlOiBcImYzMlwiIH1cbiAgICB9KTtcbiAgICBjb25zdCBncHVQcm9ncmFtID0gY29tcGlsZUhpZ2hTaGFkZXJHcHVQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwiZ3JhcGhpY3NcIixcbiAgICAgIGJpdHM6IFtcbiAgICAgICAgY29sb3JCaXQsXG4gICAgICAgIGdlbmVyYXRlVGV4dHVyZUJhdGNoQml0KGdldE1heFRleHR1cmVzUGVyQmF0Y2goKSksXG4gICAgICAgIGxvY2FsVW5pZm9ybUJpdEdyb3VwMixcbiAgICAgICAgcm91bmRQaXhlbHNCaXRcbiAgICAgIF1cbiAgICB9KTtcbiAgICB0aGlzLnNoYWRlciA9IG5ldyBTaGFkZXIoe1xuICAgICAgZ3B1UHJvZ3JhbSxcbiAgICAgIHJlc291cmNlczoge1xuICAgICAgICAvLyBhZGRlZCBvbiB0aGUgZmx5IVxuICAgICAgICBsb2NhbFVuaWZvcm1zXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZXhlY3V0ZShncmFwaGljc1BpcGUsIHJlbmRlcmFibGUpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcmVuZGVyYWJsZS5jb250ZXh0O1xuICAgIGNvbnN0IHNoYWRlciA9IGNvbnRleHQuY3VzdG9tU2hhZGVyIHx8IHRoaXMuc2hhZGVyO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gZ3JhcGhpY3NQaXBlLnJlbmRlcmVyO1xuICAgIGNvbnN0IGNvbnRleHRTeXN0ZW0gPSByZW5kZXJlci5ncmFwaGljc0NvbnRleHQ7XG4gICAgY29uc3Qge1xuICAgICAgYmF0Y2hlcixcbiAgICAgIGluc3RydWN0aW9uc1xuICAgIH0gPSBjb250ZXh0U3lzdGVtLmdldENvbnRleHRSZW5kZXJEYXRhKGNvbnRleHQpO1xuICAgIGNvbnN0IGVuY29kZXIgPSByZW5kZXJlci5lbmNvZGVyO1xuICAgIGVuY29kZXIuc2V0UGlwZWxpbmVGcm9tR2VvbWV0cnlQcm9ncmFtQW5kU3RhdGUoXG4gICAgICBiYXRjaGVyLmdlb21ldHJ5LFxuICAgICAgc2hhZGVyLmdwdVByb2dyYW0sXG4gICAgICBncmFwaGljc1BpcGUuc3RhdGVcbiAgICApO1xuICAgIGVuY29kZXIuc2V0R2VvbWV0cnkoYmF0Y2hlci5nZW9tZXRyeSwgc2hhZGVyLmdwdVByb2dyYW0pO1xuICAgIGNvbnN0IGdsb2JhbFVuaWZvcm1zQmluZEdyb3VwID0gcmVuZGVyZXIuZ2xvYmFsVW5pZm9ybXMuYmluZEdyb3VwO1xuICAgIGVuY29kZXIuc2V0QmluZEdyb3VwKDAsIGdsb2JhbFVuaWZvcm1zQmluZEdyb3VwLCBzaGFkZXIuZ3B1UHJvZ3JhbSk7XG4gICAgY29uc3QgbG9jYWxCaW5kR3JvdXAgPSByZW5kZXJlci5yZW5kZXJQaXBlcy51bmlmb3JtQmF0Y2guZ2V0VW5pZm9ybUJpbmRHcm91cChzaGFkZXIucmVzb3VyY2VzLmxvY2FsVW5pZm9ybXMsIHRydWUpO1xuICAgIGVuY29kZXIuc2V0QmluZEdyb3VwKDIsIGxvY2FsQmluZEdyb3VwLCBzaGFkZXIuZ3B1UHJvZ3JhbSk7XG4gICAgY29uc3QgYmF0Y2hlcyA9IGluc3RydWN0aW9ucy5pbnN0cnVjdGlvbnM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0cnVjdGlvbnMuaW5zdHJ1Y3Rpb25TaXplOyBpKyspIHtcbiAgICAgIGNvbnN0IGJhdGNoID0gYmF0Y2hlc1tpXTtcbiAgICAgIHNoYWRlci5ncm91cHNbMV0gPSBiYXRjaC5iaW5kR3JvdXA7XG4gICAgICBpZiAoIWJhdGNoLmdwdUJpbmRHcm91cCkge1xuICAgICAgICBjb25zdCB0ZXh0dXJlQmF0Y2ggPSBiYXRjaC50ZXh0dXJlcztcbiAgICAgICAgYmF0Y2guYmluZEdyb3VwID0gZ2V0VGV4dHVyZUJhdGNoQmluZEdyb3VwKHRleHR1cmVCYXRjaC50ZXh0dXJlcywgdGV4dHVyZUJhdGNoLmNvdW50KTtcbiAgICAgICAgYmF0Y2guZ3B1QmluZEdyb3VwID0gcmVuZGVyZXIuYmluZEdyb3VwLmdldEJpbmRHcm91cChcbiAgICAgICAgICBiYXRjaC5iaW5kR3JvdXAsXG4gICAgICAgICAgc2hhZGVyLmdwdVByb2dyYW0sXG4gICAgICAgICAgMVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZW5jb2Rlci5zZXRCaW5kR3JvdXAoMSwgYmF0Y2guYmluZEdyb3VwLCBzaGFkZXIuZ3B1UHJvZ3JhbSk7XG4gICAgICBlbmNvZGVyLnJlbmRlclBhc3NFbmNvZGVyLmRyYXdJbmRleGVkKGJhdGNoLnNpemUsIDEsIGJhdGNoLnN0YXJ0KTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnNoYWRlci5kZXN0cm95KHRydWUpO1xuICAgIHRoaXMuc2hhZGVyID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdwdUdyYXBoaWNzQWRhcHRvci5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVBpcGVzQWRhcHRvclxuICBdLFxuICBuYW1lOiBcImdyYXBoaWNzXCJcbn07XG5cbmV4cG9ydCB7IEdwdUdyYXBoaWNzQWRhcHRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1R3JhcGhpY3NBZGFwdG9yLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IGNvbXBpbGVIaWdoU2hhZGVyR3B1UHJvZ3JhbSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9jb21waWxlSGlnaFNoYWRlclRvUHJvZ3JhbS5tanMnO1xuaW1wb3J0IHsgbG9jYWxVbmlmb3JtQml0IH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybUJpdC5tanMnO1xuaW1wb3J0IHsgcm91bmRQaXhlbHNCaXQgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvcm91bmRQaXhlbHNCaXQubWpzJztcbmltcG9ydCB7IHRleHR1cmVCaXQgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvdGV4dHVyZUJpdC5tanMnO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1NoYWRlci5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdwdU1lc2hBZGFwdGVyIHtcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBncHVQcm9ncmFtID0gY29tcGlsZUhpZ2hTaGFkZXJHcHVQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwibWVzaFwiLFxuICAgICAgYml0czogW1xuICAgICAgICBsb2NhbFVuaWZvcm1CaXQsXG4gICAgICAgIHRleHR1cmVCaXQsXG4gICAgICAgIHJvdW5kUGl4ZWxzQml0XG4gICAgICBdXG4gICAgfSk7XG4gICAgdGhpcy5fc2hhZGVyID0gbmV3IFNoYWRlcih7XG4gICAgICBncHVQcm9ncmFtLFxuICAgICAgcmVzb3VyY2VzOiB7XG4gICAgICAgIHVUZXh0dXJlOiBUZXh0dXJlLkVNUFRZLl9zb3VyY2UsXG4gICAgICAgIHVTYW1wbGVyOiBUZXh0dXJlLkVNUFRZLl9zb3VyY2Uuc3R5bGUsXG4gICAgICAgIHRleHR1cmVVbmlmb3Jtczoge1xuICAgICAgICAgIHVUZXh0dXJlTWF0cml4OiB7IHR5cGU6IFwibWF0M3gzPGYzMj5cIiwgdmFsdWU6IG5ldyBNYXRyaXgoKSB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBleGVjdXRlKG1lc2hQaXBlLCBtZXNoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBtZXNoUGlwZS5yZW5kZXJlcjtcbiAgICBsZXQgc2hhZGVyID0gbWVzaC5fc2hhZGVyO1xuICAgIGlmICghc2hhZGVyKSB7XG4gICAgICBzaGFkZXIgPSB0aGlzLl9zaGFkZXI7XG4gICAgICBzaGFkZXIuZ3JvdXBzWzJdID0gcmVuZGVyZXIudGV4dHVyZS5nZXRUZXh0dXJlQmluZEdyb3VwKG1lc2gudGV4dHVyZSk7XG4gICAgfSBlbHNlIGlmICghc2hhZGVyLmdwdVByb2dyYW0pIHtcbiAgICAgIHdhcm4oXCJNZXNoIHNoYWRlciBoYXMgbm8gZ3B1UHJvZ3JhbVwiLCBtZXNoLnNoYWRlcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGdwdVByb2dyYW0gPSBzaGFkZXIuZ3B1UHJvZ3JhbTtcbiAgICBpZiAoZ3B1UHJvZ3JhbS5hdXRvQXNzaWduR2xvYmFsVW5pZm9ybXMpIHtcbiAgICAgIHNoYWRlci5ncm91cHNbMF0gPSByZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy5iaW5kR3JvdXA7XG4gICAgfVxuICAgIGlmIChncHVQcm9ncmFtLmF1dG9Bc3NpZ25Mb2NhbFVuaWZvcm1zKSB7XG4gICAgICBjb25zdCBsb2NhbFVuaWZvcm1zID0gbWVzaFBpcGUubG9jYWxVbmlmb3JtcztcbiAgICAgIHNoYWRlci5ncm91cHNbMV0gPSByZW5kZXJlci5yZW5kZXJQaXBlcy51bmlmb3JtQmF0Y2guZ2V0VW5pZm9ybUJpbmRHcm91cChsb2NhbFVuaWZvcm1zLCB0cnVlKTtcbiAgICB9XG4gICAgcmVuZGVyZXIuZW5jb2Rlci5kcmF3KHtcbiAgICAgIGdlb21ldHJ5OiBtZXNoLl9nZW9tZXRyeSxcbiAgICAgIHNoYWRlcixcbiAgICAgIHN0YXRlOiBtZXNoLnN0YXRlXG4gICAgfSk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9zaGFkZXIuZGVzdHJveSh0cnVlKTtcbiAgICB0aGlzLl9zaGFkZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR3B1TWVzaEFkYXB0ZXIuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlc0FkYXB0b3JcbiAgXSxcbiAgbmFtZTogXCJtZXNoXCJcbn07XG5cbmV4cG9ydCB7IEdwdU1lc2hBZGFwdGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcHVNZXNoQWRhcHRlci5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy9zaGFyZWQvc3RhdGUvU3RhdGUubWpzJztcbmltcG9ydCB7IGdldFRleHR1cmVCYXRjaEJpbmRHcm91cCB9IGZyb20gJy4vZ2V0VGV4dHVyZUJhdGNoQmluZEdyb3VwLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgdGVtcFN0YXRlID0gU3RhdGUuZm9yMmQoKTtcbmNsYXNzIEdwdUJhdGNoQWRhcHRvciB7XG4gIHN0YXJ0KGJhdGNoUGlwZSwgZ2VvbWV0cnksIHNoYWRlcikge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gYmF0Y2hQaXBlLnJlbmRlcmVyO1xuICAgIGNvbnN0IGVuY29kZXIgPSByZW5kZXJlci5lbmNvZGVyO1xuICAgIGNvbnN0IHByb2dyYW0gPSBzaGFkZXIuZ3B1UHJvZ3JhbTtcbiAgICB0aGlzLl9zaGFkZXIgPSBzaGFkZXI7XG4gICAgdGhpcy5fZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICBlbmNvZGVyLnNldEdlb21ldHJ5KGdlb21ldHJ5LCBwcm9ncmFtKTtcbiAgICB0ZW1wU3RhdGUuYmxlbmRNb2RlID0gXCJub3JtYWxcIjtcbiAgICByZW5kZXJlci5waXBlbGluZS5nZXRQaXBlbGluZShcbiAgICAgIGdlb21ldHJ5LFxuICAgICAgcHJvZ3JhbSxcbiAgICAgIHRlbXBTdGF0ZVxuICAgICk7XG4gICAgY29uc3QgZ2xvYmFsVW5pZm9ybXNCaW5kR3JvdXAgPSByZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy5iaW5kR3JvdXA7XG4gICAgZW5jb2Rlci5yZXNldEJpbmRHcm91cCgxKTtcbiAgICBlbmNvZGVyLnNldEJpbmRHcm91cCgwLCBnbG9iYWxVbmlmb3Jtc0JpbmRHcm91cCwgcHJvZ3JhbSk7XG4gIH1cbiAgZXhlY3V0ZShiYXRjaFBpcGUsIGJhdGNoKSB7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuX3NoYWRlci5ncHVQcm9ncmFtO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gYmF0Y2hQaXBlLnJlbmRlcmVyO1xuICAgIGNvbnN0IGVuY29kZXIgPSByZW5kZXJlci5lbmNvZGVyO1xuICAgIGlmICghYmF0Y2guYmluZEdyb3VwKSB7XG4gICAgICBjb25zdCB0ZXh0dXJlQmF0Y2ggPSBiYXRjaC50ZXh0dXJlcztcbiAgICAgIGJhdGNoLmJpbmRHcm91cCA9IGdldFRleHR1cmVCYXRjaEJpbmRHcm91cCh0ZXh0dXJlQmF0Y2gudGV4dHVyZXMsIHRleHR1cmVCYXRjaC5jb3VudCk7XG4gICAgfVxuICAgIHRlbXBTdGF0ZS5ibGVuZE1vZGUgPSBiYXRjaC5ibGVuZE1vZGU7XG4gICAgY29uc3QgZ3B1QmluZEdyb3VwID0gcmVuZGVyZXIuYmluZEdyb3VwLmdldEJpbmRHcm91cChcbiAgICAgIGJhdGNoLmJpbmRHcm91cCxcbiAgICAgIHByb2dyYW0sXG4gICAgICAxXG4gICAgKTtcbiAgICBjb25zdCBwaXBlbGluZSA9IHJlbmRlcmVyLnBpcGVsaW5lLmdldFBpcGVsaW5lKFxuICAgICAgdGhpcy5fZ2VvbWV0cnksXG4gICAgICBwcm9ncmFtLFxuICAgICAgdGVtcFN0YXRlXG4gICAgKTtcbiAgICBiYXRjaC5iaW5kR3JvdXAuX3RvdWNoKHJlbmRlcmVyLnRleHR1cmVHQy5jb3VudCk7XG4gICAgZW5jb2Rlci5zZXRQaXBlbGluZShwaXBlbGluZSk7XG4gICAgZW5jb2Rlci5yZW5kZXJQYXNzRW5jb2Rlci5zZXRCaW5kR3JvdXAoMSwgZ3B1QmluZEdyb3VwKTtcbiAgICBlbmNvZGVyLnJlbmRlclBhc3NFbmNvZGVyLmRyYXdJbmRleGVkKGJhdGNoLnNpemUsIDEsIGJhdGNoLnN0YXJ0KTtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdwdUJhdGNoQWRhcHRvci5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVBpcGVzQWRhcHRvclxuICBdLFxuICBuYW1lOiBcImJhdGNoXCJcbn07XG5cbmV4cG9ydCB7IEdwdUJhdGNoQWRhcHRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1QmF0Y2hBZGFwdG9yLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBCaW5kR3JvdXBTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX2hhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ3B1KSB7XG4gICAgdGhpcy5fZ3B1ID0gZ3B1O1xuICB9XG4gIGdldEJpbmRHcm91cChiaW5kR3JvdXAsIHByb2dyYW0sIGdyb3VwSW5kZXgpIHtcbiAgICBiaW5kR3JvdXAuX3VwZGF0ZUtleSgpO1xuICAgIGNvbnN0IGdwdUJpbmRHcm91cCA9IHRoaXMuX2hhc2hbYmluZEdyb3VwLl9rZXldIHx8IHRoaXMuX2NyZWF0ZUJpbmRHcm91cChiaW5kR3JvdXAsIHByb2dyYW0sIGdyb3VwSW5kZXgpO1xuICAgIHJldHVybiBncHVCaW5kR3JvdXA7XG4gIH1cbiAgX2NyZWF0ZUJpbmRHcm91cChncm91cCwgcHJvZ3JhbSwgZ3JvdXBJbmRleCkge1xuICAgIGNvbnN0IGRldmljZSA9IHRoaXMuX2dwdS5kZXZpY2U7XG4gICAgY29uc3QgZ3JvdXBMYXlvdXQgPSBwcm9ncmFtLmxheW91dFtncm91cEluZGV4XTtcbiAgICBjb25zdCBlbnRyaWVzID0gW107XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBmb3IgKGNvbnN0IGogaW4gZ3JvdXBMYXlvdXQpIHtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gZ3JvdXAucmVzb3VyY2VzW2pdID8/IGdyb3VwLnJlc291cmNlc1tncm91cExheW91dFtqXV07XG4gICAgICBsZXQgZ3B1UmVzb3VyY2U7XG4gICAgICBpZiAocmVzb3VyY2UuX3Jlc291cmNlVHlwZSA9PT0gXCJ1bmlmb3JtR3JvdXBcIikge1xuICAgICAgICBjb25zdCB1bmlmb3JtR3JvdXAgPSByZXNvdXJjZTtcbiAgICAgICAgcmVuZGVyZXIudWJvLnVwZGF0ZVVuaWZvcm1Hcm91cCh1bmlmb3JtR3JvdXApO1xuICAgICAgICBjb25zdCBidWZmZXIgPSB1bmlmb3JtR3JvdXAuYnVmZmVyO1xuICAgICAgICBncHVSZXNvdXJjZSA9IHtcbiAgICAgICAgICBidWZmZXI6IHJlbmRlcmVyLmJ1ZmZlci5nZXRHUFVCdWZmZXIoYnVmZmVyKSxcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgc2l6ZTogYnVmZmVyLmRlc2NyaXB0b3Iuc2l6ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChyZXNvdXJjZS5fcmVzb3VyY2VUeXBlID09PSBcImJ1ZmZlclwiKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHJlc291cmNlO1xuICAgICAgICBncHVSZXNvdXJjZSA9IHtcbiAgICAgICAgICBidWZmZXI6IHJlbmRlcmVyLmJ1ZmZlci5nZXRHUFVCdWZmZXIoYnVmZmVyKSxcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgc2l6ZTogYnVmZmVyLmRlc2NyaXB0b3Iuc2l6ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChyZXNvdXJjZS5fcmVzb3VyY2VUeXBlID09PSBcImJ1ZmZlclJlc291cmNlXCIpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyUmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICAgICAgZ3B1UmVzb3VyY2UgPSB7XG4gICAgICAgICAgYnVmZmVyOiByZW5kZXJlci5idWZmZXIuZ2V0R1BVQnVmZmVyKGJ1ZmZlclJlc291cmNlLmJ1ZmZlciksXG4gICAgICAgICAgb2Zmc2V0OiBidWZmZXJSZXNvdXJjZS5vZmZzZXQsXG4gICAgICAgICAgc2l6ZTogYnVmZmVyUmVzb3VyY2Uuc2l6ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChyZXNvdXJjZS5fcmVzb3VyY2VUeXBlID09PSBcInRleHR1cmVTYW1wbGVyXCIpIHtcbiAgICAgICAgY29uc3Qgc2FtcGxlciA9IHJlc291cmNlO1xuICAgICAgICBncHVSZXNvdXJjZSA9IHJlbmRlcmVyLnRleHR1cmUuZ2V0R3B1U2FtcGxlcihzYW1wbGVyKTtcbiAgICAgIH0gZWxzZSBpZiAocmVzb3VyY2UuX3Jlc291cmNlVHlwZSA9PT0gXCJ0ZXh0dXJlU291cmNlXCIpIHtcbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IHJlc291cmNlO1xuICAgICAgICBncHVSZXNvdXJjZSA9IHJlbmRlcmVyLnRleHR1cmUuZ2V0R3B1U291cmNlKHRleHR1cmUpLmNyZWF0ZVZpZXcoe30pO1xuICAgICAgfVxuICAgICAgZW50cmllcy5wdXNoKHtcbiAgICAgICAgYmluZGluZzogZ3JvdXBMYXlvdXRbal0sXG4gICAgICAgIHJlc291cmNlOiBncHVSZXNvdXJjZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGxheW91dCA9IHJlbmRlcmVyLnNoYWRlci5nZXRQcm9ncmFtRGF0YShwcm9ncmFtKS5iaW5kR3JvdXBzW2dyb3VwSW5kZXhdO1xuICAgIGNvbnN0IGdwdUJpbmRHcm91cCA9IGRldmljZS5jcmVhdGVCaW5kR3JvdXAoe1xuICAgICAgbGF5b3V0LFxuICAgICAgZW50cmllc1xuICAgIH0pO1xuICAgIHRoaXMuX2hhc2hbZ3JvdXAuX2tleV0gPSBncHVCaW5kR3JvdXA7XG4gICAgcmV0dXJuIGdwdUJpbmRHcm91cDtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuX2hhc2gpKSB7XG4gICAgICB0aGlzLl9oYXNoW2tleV0gPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLl9oYXNoID0gbnVsbDtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5CaW5kR3JvdXBTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJiaW5kR3JvdXBcIlxufTtcblxuZXhwb3J0IHsgQmluZEdyb3VwU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CaW5kR3JvdXBTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgZmFzdENvcHkgfSBmcm9tICcuLi8uLi9zaGFyZWQvYnVmZmVyL3V0aWxzL2Zhc3RDb3B5Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3B1QnVmZmVyU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZ3B1QnVmZmVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX21hbmFnZWRCdWZmZXJzID0gW107XG4gIH1cbiAgY29udGV4dENoYW5nZShncHUpIHtcbiAgICB0aGlzLl9ncHUgPSBncHU7XG4gIH1cbiAgZ2V0R1BVQnVmZmVyKGJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLl9ncHVCdWZmZXJzW2J1ZmZlci51aWRdIHx8IHRoaXMuY3JlYXRlR1BVQnVmZmVyKGJ1ZmZlcik7XG4gIH1cbiAgdXBkYXRlQnVmZmVyKGJ1ZmZlcikge1xuICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHRoaXMuX2dwdUJ1ZmZlcnNbYnVmZmVyLnVpZF0gfHwgdGhpcy5jcmVhdGVHUFVCdWZmZXIoYnVmZmVyKTtcbiAgICBjb25zdCBkYXRhID0gYnVmZmVyLmRhdGE7XG4gICAgaWYgKGJ1ZmZlci5fdXBkYXRlSUQgJiYgZGF0YSkge1xuICAgICAgYnVmZmVyLl91cGRhdGVJRCA9IDA7XG4gICAgICB0aGlzLl9ncHUuZGV2aWNlLnF1ZXVlLndyaXRlQnVmZmVyKFxuICAgICAgICBncHVCdWZmZXIsXG4gICAgICAgIDAsXG4gICAgICAgIGRhdGEuYnVmZmVyLFxuICAgICAgICAwLFxuICAgICAgICAvLyByb3VuZCB0byB0aGUgbmVhcmVzdCA0IGJ5dGVzXG4gICAgICAgIChidWZmZXIuX3VwZGF0ZVNpemUgfHwgZGF0YS5ieXRlTGVuZ3RoKSArIDMgJiB+M1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGdwdUJ1ZmZlcjtcbiAgfVxuICAvKiogZGlzcG9zZSBhbGwgV2ViR0wgcmVzb3VyY2VzIG9mIGFsbCBtYW5hZ2VkIGJ1ZmZlcnMgKi9cbiAgZGVzdHJveUFsbCgpIHtcbiAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuX2dwdUJ1ZmZlcnMpIHtcbiAgICAgIHRoaXMuX2dwdUJ1ZmZlcnNbaWRdLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5fZ3B1QnVmZmVycyA9IHt9O1xuICB9XG4gIGNyZWF0ZUdQVUJ1ZmZlcihidWZmZXIpIHtcbiAgICBpZiAoIXRoaXMuX2dwdUJ1ZmZlcnNbYnVmZmVyLnVpZF0pIHtcbiAgICAgIGJ1ZmZlci5vbihcInVwZGF0ZVwiLCB0aGlzLnVwZGF0ZUJ1ZmZlciwgdGhpcyk7XG4gICAgICBidWZmZXIub24oXCJjaGFuZ2VcIiwgdGhpcy5vbkJ1ZmZlckNoYW5nZSwgdGhpcyk7XG4gICAgICBidWZmZXIub24oXCJkZXN0cm95XCIsIHRoaXMub25CdWZmZXJEZXN0cm95LCB0aGlzKTtcbiAgICAgIHRoaXMuX21hbmFnZWRCdWZmZXJzLnB1c2goYnVmZmVyKTtcbiAgICB9XG4gICAgY29uc3QgZ3B1QnVmZmVyID0gdGhpcy5fZ3B1LmRldmljZS5jcmVhdGVCdWZmZXIoYnVmZmVyLmRlc2NyaXB0b3IpO1xuICAgIGJ1ZmZlci5fdXBkYXRlSUQgPSAwO1xuICAgIGlmIChidWZmZXIuZGF0YSkge1xuICAgICAgZmFzdENvcHkoYnVmZmVyLmRhdGEuYnVmZmVyLCBncHVCdWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKSk7XG4gICAgICBncHVCdWZmZXIudW5tYXAoKTtcbiAgICB9XG4gICAgdGhpcy5fZ3B1QnVmZmVyc1tidWZmZXIudWlkXSA9IGdwdUJ1ZmZlcjtcbiAgICByZXR1cm4gZ3B1QnVmZmVyO1xuICB9XG4gIG9uQnVmZmVyQ2hhbmdlKGJ1ZmZlcikge1xuICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHRoaXMuX2dwdUJ1ZmZlcnNbYnVmZmVyLnVpZF07XG4gICAgZ3B1QnVmZmVyLmRlc3Ryb3koKTtcbiAgICBidWZmZXIuX3VwZGF0ZUlEID0gMDtcbiAgICB0aGlzLl9ncHVCdWZmZXJzW2J1ZmZlci51aWRdID0gdGhpcy5jcmVhdGVHUFVCdWZmZXIoYnVmZmVyKTtcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZXMgYnVmZmVyXG4gICAqIEBwYXJhbSBidWZmZXIgLSBidWZmZXIgd2l0aCBkYXRhXG4gICAqL1xuICBvbkJ1ZmZlckRlc3Ryb3koYnVmZmVyKSB7XG4gICAgdGhpcy5fbWFuYWdlZEJ1ZmZlcnMuc3BsaWNlKHRoaXMuX21hbmFnZWRCdWZmZXJzLmluZGV4T2YoYnVmZmVyKSwgMSk7XG4gICAgdGhpcy5fZGVzdHJveUJ1ZmZlcihidWZmZXIpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbWFuYWdlZEJ1ZmZlcnMuZm9yRWFjaCgoYnVmZmVyKSA9PiB0aGlzLl9kZXN0cm95QnVmZmVyKGJ1ZmZlcikpO1xuICAgIHRoaXMuX21hbmFnZWRCdWZmZXJzID0gbnVsbDtcbiAgICB0aGlzLl9ncHVCdWZmZXJzID0gbnVsbDtcbiAgfVxuICBfZGVzdHJveUJ1ZmZlcihidWZmZXIpIHtcbiAgICBjb25zdCBncHVCdWZmZXIgPSB0aGlzLl9ncHVCdWZmZXJzW2J1ZmZlci51aWRdO1xuICAgIGdwdUJ1ZmZlci5kZXN0cm95KCk7XG4gICAgYnVmZmVyLm9mZihcInVwZGF0ZVwiLCB0aGlzLnVwZGF0ZUJ1ZmZlciwgdGhpcyk7XG4gICAgYnVmZmVyLm9mZihcImNoYW5nZVwiLCB0aGlzLm9uQnVmZmVyQ2hhbmdlLCB0aGlzKTtcbiAgICBidWZmZXIub2ZmKFwiZGVzdHJveVwiLCB0aGlzLm9uQnVmZmVyRGVzdHJveSwgdGhpcyk7XG4gICAgdGhpcy5fZ3B1QnVmZmVyc1tidWZmZXIudWlkXSA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HcHVCdWZmZXJTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJidWZmZXJcIlxufTtcblxuZXhwb3J0IHsgR3B1QnVmZmVyU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcHVCdWZmZXJTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdwdUNvbG9yTWFza1N5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fY29sb3JNYXNrQ2FjaGUgPSAxNTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIHNldE1hc2soY29sb3JNYXNrKSB7XG4gICAgaWYgKHRoaXMuX2NvbG9yTWFza0NhY2hlID09PSBjb2xvck1hc2spXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5fY29sb3JNYXNrQ2FjaGUgPSBjb2xvck1hc2s7XG4gICAgdGhpcy5fcmVuZGVyZXIucGlwZWxpbmUuc2V0Q29sb3JNYXNrKGNvbG9yTWFzayk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gICAgdGhpcy5fY29sb3JNYXNrQ2FjaGUgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR3B1Q29sb3JNYXNrU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwiY29sb3JNYXNrXCJcbn07XG5cbmV4cG9ydCB7IEdwdUNvbG9yTWFza1N5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1Q29sb3JNYXNrU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5pbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3B1RGV2aWNlU3lzdGVtIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7V2ViR1BVUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyIHRoaXMgU3lzdGVtIHdvcmtzIGZvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBhc3luYyBpbml0KG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5faW5pdFByb21pc2UpXG4gICAgICByZXR1cm4gdGhpcy5faW5pdFByb21pc2U7XG4gICAgdGhpcy5faW5pdFByb21pc2UgPSB0aGlzLl9jcmVhdGVEZXZpY2VBbmRBZGFwdG9yKG9wdGlvbnMpLnRoZW4oKGdwdSkgPT4ge1xuICAgICAgdGhpcy5ncHUgPSBncHU7XG4gICAgICB0aGlzLl9yZW5kZXJlci5ydW5uZXJzLmNvbnRleHRDaGFuZ2UuZW1pdCh0aGlzLmdwdSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRQcm9taXNlO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgdGhlIGNvbnRleHQgY2hhbmdlIGV2ZW50XG4gICAqIEBwYXJhbSBncHVcbiAgICovXG4gIGNvbnRleHRDaGFuZ2UoZ3B1KSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuZ3B1ID0gZ3B1O1xuICB9XG4gIC8qKlxuICAgKiBIZWxwZXIgY2xhc3MgdG8gY3JlYXRlIGEgV2ViR0wgQ29udGV4dFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIEFuIG9wdGlvbnMgb2JqZWN0IHRoYXQgZ2V0cyBwYXNzZWQgaW4gdG8gdGhlIGNhbnZhcyBlbGVtZW50IGNvbnRhaW5pbmcgdGhlXG4gICAqICAgIGNvbnRleHQgYXR0cmlidXRlc1xuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9IVE1MQ2FudmFzRWxlbWVudC9nZXRDb250ZXh0XG4gICAqIEByZXR1cm5zIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IHRoZSBXZWJHTCBjb250ZXh0XG4gICAqL1xuICBhc3luYyBfY3JlYXRlRGV2aWNlQW5kQWRhcHRvcihvcHRpb25zKSB7XG4gICAgY29uc3QgYWRhcHRlciA9IGF3YWl0IERPTUFkYXB0ZXIuZ2V0KCkuZ2V0TmF2aWdhdG9yKCkuZ3B1LnJlcXVlc3RBZGFwdGVyKHtcbiAgICAgIHBvd2VyUHJlZmVyZW5jZTogb3B0aW9ucy5wb3dlclByZWZlcmVuY2UsXG4gICAgICBmb3JjZUZhbGxiYWNrQWRhcHRlcjogb3B0aW9ucy5mb3JjZUZhbGxiYWNrQWRhcHRlclxuICAgIH0pO1xuICAgIGNvbnN0IHJlcXVpcmVkRmVhdHVyZXMgPSBbXG4gICAgICBcInRleHR1cmUtY29tcHJlc3Npb24tYmNcIixcbiAgICAgIFwidGV4dHVyZS1jb21wcmVzc2lvbi1hc3RjXCIsXG4gICAgICBcInRleHR1cmUtY29tcHJlc3Npb24tZXRjMlwiXG4gICAgXS5maWx0ZXIoKGZlYXR1cmUpID0+IGFkYXB0ZXIuZmVhdHVyZXMuaGFzKGZlYXR1cmUpKTtcbiAgICBjb25zdCBkZXZpY2UgPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3REZXZpY2Uoe1xuICAgICAgcmVxdWlyZWRGZWF0dXJlc1xuICAgIH0pO1xuICAgIHJldHVybiB7IGFkYXB0ZXIsIGRldmljZSB9O1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ncHUgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdwdURldmljZVN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVN5c3RlbVxuICBdLFxuICBuYW1lOiBcImRldmljZVwiXG59O1xuLyoqIFRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBHcHVEZXZpY2VTeXN0ZW0uICovXG5HcHVEZXZpY2VTeXN0ZW0uZGVmYXVsdE9wdGlvbnMgPSB7XG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR1BVT3B0aW9ucy5wb3dlclByZWZlcmVuY2V9XG4gICAqIEBkZWZhdWx0IGRlZmF1bHRcbiAgICovXG4gIHBvd2VyUHJlZmVyZW5jZTogdm9pZCAwLFxuICAvKipcbiAgICogRm9yY2UgdGhlIHVzZSBvZiB0aGUgZmFsbGJhY2sgYWRhcHRlclxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZm9yY2VGYWxsYmFja0FkYXB0ZXI6IGZhbHNlXG59O1xuXG5leHBvcnQgeyBHcHVEZXZpY2VTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdwdURldmljZVN5c3RlbS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3B1RW5jb2RlclN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fYm91bmRCaW5kR3JvdXAgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ib3VuZFZlcnRleEJ1ZmZlciA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgcmVuZGVyU3RhcnQoKSB7XG4gICAgdGhpcy5jb21tYW5kRmluaXNoZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5fcmVzb2x2ZUNvbW1hbmRGaW5pc2hlZCA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgdGhpcy5jb21tYW5kRW5jb2RlciA9IHRoaXMuX3JlbmRlcmVyLmdwdS5kZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcbiAgfVxuICBiZWdpblJlbmRlclBhc3MoZ3B1UmVuZGVyVGFyZ2V0KSB7XG4gICAgdGhpcy5lbmRSZW5kZXJQYXNzKCk7XG4gICAgdGhpcy5fY2xlYXJDYWNoZSgpO1xuICAgIHRoaXMucmVuZGVyUGFzc0VuY29kZXIgPSB0aGlzLmNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyhncHVSZW5kZXJUYXJnZXQuZGVzY3JpcHRvcik7XG4gIH1cbiAgZW5kUmVuZGVyUGFzcygpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJQYXNzRW5jb2Rlcikge1xuICAgICAgdGhpcy5yZW5kZXJQYXNzRW5jb2Rlci5lbmQoKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXJQYXNzRW5jb2RlciA9IG51bGw7XG4gIH1cbiAgc2V0Vmlld3BvcnQodmlld3BvcnQpIHtcbiAgICB0aGlzLnJlbmRlclBhc3NFbmNvZGVyLnNldFZpZXdwb3J0KHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQsIDAsIDEpO1xuICB9XG4gIHNldFBpcGVsaW5lRnJvbUdlb21ldHJ5UHJvZ3JhbUFuZFN0YXRlKGdlb21ldHJ5LCBwcm9ncmFtLCBzdGF0ZSwgdG9wb2xvZ3kpIHtcbiAgICBjb25zdCBwaXBlbGluZSA9IHRoaXMuX3JlbmRlcmVyLnBpcGVsaW5lLmdldFBpcGVsaW5lKGdlb21ldHJ5LCBwcm9ncmFtLCBzdGF0ZSwgdG9wb2xvZ3kpO1xuICAgIHRoaXMuc2V0UGlwZWxpbmUocGlwZWxpbmUpO1xuICB9XG4gIHNldFBpcGVsaW5lKHBpcGVsaW5lKSB7XG4gICAgaWYgKHRoaXMuX2JvdW5kUGlwZWxpbmUgPT09IHBpcGVsaW5lKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2JvdW5kUGlwZWxpbmUgPSBwaXBlbGluZTtcbiAgICB0aGlzLnJlbmRlclBhc3NFbmNvZGVyLnNldFBpcGVsaW5lKHBpcGVsaW5lKTtcbiAgfVxuICBfc2V0VmVydGV4QnVmZmVyKGluZGV4LCBidWZmZXIpIHtcbiAgICBpZiAodGhpcy5fYm91bmRWZXJ0ZXhCdWZmZXJbaW5kZXhdID09PSBidWZmZXIpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5fYm91bmRWZXJ0ZXhCdWZmZXJbaW5kZXhdID0gYnVmZmVyO1xuICAgIHRoaXMucmVuZGVyUGFzc0VuY29kZXIuc2V0VmVydGV4QnVmZmVyKGluZGV4LCB0aGlzLl9yZW5kZXJlci5idWZmZXIudXBkYXRlQnVmZmVyKGJ1ZmZlcikpO1xuICB9XG4gIF9zZXRJbmRleEJ1ZmZlcihidWZmZXIpIHtcbiAgICBpZiAodGhpcy5fYm91bmRJbmRleEJ1ZmZlciA9PT0gYnVmZmVyKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2JvdW5kSW5kZXhCdWZmZXIgPSBidWZmZXI7XG4gICAgY29uc3QgaW5kZXhGb3JtYXQgPSBidWZmZXIuZGF0YS5CWVRFU19QRVJfRUxFTUVOVCA9PT0gMiA/IFwidWludDE2XCIgOiBcInVpbnQzMlwiO1xuICAgIHRoaXMucmVuZGVyUGFzc0VuY29kZXIuc2V0SW5kZXhCdWZmZXIodGhpcy5fcmVuZGVyZXIuYnVmZmVyLnVwZGF0ZUJ1ZmZlcihidWZmZXIpLCBpbmRleEZvcm1hdCk7XG4gIH1cbiAgcmVzZXRCaW5kR3JvdXAoaW5kZXgpIHtcbiAgICB0aGlzLl9ib3VuZEJpbmRHcm91cFtpbmRleF0gPSBudWxsO1xuICB9XG4gIHNldEJpbmRHcm91cChpbmRleCwgYmluZEdyb3VwLCBwcm9ncmFtKSB7XG4gICAgaWYgKHRoaXMuX2JvdW5kQmluZEdyb3VwW2luZGV4XSA9PT0gYmluZEdyb3VwKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2JvdW5kQmluZEdyb3VwW2luZGV4XSA9IGJpbmRHcm91cDtcbiAgICBiaW5kR3JvdXAuX3RvdWNoKHRoaXMuX3JlbmRlcmVyLnRleHR1cmVHQy5jb3VudCk7XG4gICAgY29uc3QgZ3B1QmluZEdyb3VwID0gdGhpcy5fcmVuZGVyZXIuYmluZEdyb3VwLmdldEJpbmRHcm91cChiaW5kR3JvdXAsIHByb2dyYW0sIGluZGV4KTtcbiAgICB0aGlzLnJlbmRlclBhc3NFbmNvZGVyLnNldEJpbmRHcm91cChpbmRleCwgZ3B1QmluZEdyb3VwKTtcbiAgfVxuICBzZXRHZW9tZXRyeShnZW9tZXRyeSwgcHJvZ3JhbSkge1xuICAgIGNvbnN0IGJ1ZmZlcnNUb0JpbmQgPSB0aGlzLl9yZW5kZXJlci5waXBlbGluZS5nZXRCdWZmZXJOYW1lc1RvQmluZChnZW9tZXRyeSwgcHJvZ3JhbSk7XG4gICAgZm9yIChjb25zdCBpIGluIGJ1ZmZlcnNUb0JpbmQpIHtcbiAgICAgIHRoaXMuX3NldFZlcnRleEJ1ZmZlcihpLCBnZW9tZXRyeS5hdHRyaWJ1dGVzW2J1ZmZlcnNUb0JpbmRbaV1dLmJ1ZmZlcik7XG4gICAgfVxuICAgIGlmIChnZW9tZXRyeS5pbmRleEJ1ZmZlcikge1xuICAgICAgdGhpcy5fc2V0SW5kZXhCdWZmZXIoZ2VvbWV0cnkuaW5kZXhCdWZmZXIpO1xuICAgIH1cbiAgfVxuICBfc2V0U2hhZGVyQmluZEdyb3VwcyhzaGFkZXIsIHNraXBTeW5jKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHNoYWRlci5ncm91cHMpIHtcbiAgICAgIGNvbnN0IGJpbmRHcm91cCA9IHNoYWRlci5ncm91cHNbaV07XG4gICAgICBpZiAoIXNraXBTeW5jKSB7XG4gICAgICAgIHRoaXMuX3N5bmNCaW5kR3JvdXAoYmluZEdyb3VwKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0QmluZEdyb3VwKGksIGJpbmRHcm91cCwgc2hhZGVyLmdwdVByb2dyYW0pO1xuICAgIH1cbiAgfVxuICBfc3luY0JpbmRHcm91cChiaW5kR3JvdXApIHtcbiAgICBmb3IgKGNvbnN0IGogaW4gYmluZEdyb3VwLnJlc291cmNlcykge1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSBiaW5kR3JvdXAucmVzb3VyY2VzW2pdO1xuICAgICAgaWYgKHJlc291cmNlLmlzVW5pZm9ybUdyb3VwKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnViby51cGRhdGVVbmlmb3JtR3JvdXAocmVzb3VyY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkcmF3KG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGdlb21ldHJ5LCBzaGFkZXIsIHN0YXRlLCB0b3BvbG9neSwgc2l6ZSwgc3RhcnQsIGluc3RhbmNlQ291bnQsIHNraXBTeW5jIH0gPSBvcHRpb25zO1xuICAgIHRoaXMuc2V0UGlwZWxpbmVGcm9tR2VvbWV0cnlQcm9ncmFtQW5kU3RhdGUoZ2VvbWV0cnksIHNoYWRlci5ncHVQcm9ncmFtLCBzdGF0ZSwgdG9wb2xvZ3kpO1xuICAgIHRoaXMuc2V0R2VvbWV0cnkoZ2VvbWV0cnksIHNoYWRlci5ncHVQcm9ncmFtKTtcbiAgICB0aGlzLl9zZXRTaGFkZXJCaW5kR3JvdXBzKHNoYWRlciwgc2tpcFN5bmMpO1xuICAgIGlmIChnZW9tZXRyeS5pbmRleEJ1ZmZlcikge1xuICAgICAgdGhpcy5yZW5kZXJQYXNzRW5jb2Rlci5kcmF3SW5kZXhlZChcbiAgICAgICAgc2l6ZSB8fCBnZW9tZXRyeS5pbmRleEJ1ZmZlci5kYXRhLmxlbmd0aCxcbiAgICAgICAgaW5zdGFuY2VDb3VudCB8fCBnZW9tZXRyeS5pbnN0YW5jZUNvdW50LFxuICAgICAgICBzdGFydCB8fCAwXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlclBhc3NFbmNvZGVyLmRyYXcoc2l6ZSB8fCBnZW9tZXRyeS5nZXRTaXplKCksIGluc3RhbmNlQ291bnQgfHwgZ2VvbWV0cnkuaW5zdGFuY2VDb3VudCwgc3RhcnQgfHwgMCk7XG4gICAgfVxuICB9XG4gIGZpbmlzaFJlbmRlclBhc3MoKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyUGFzc0VuY29kZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyUGFzc0VuY29kZXIuZW5kKCk7XG4gICAgICB0aGlzLnJlbmRlclBhc3NFbmNvZGVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgcG9zdHJlbmRlcigpIHtcbiAgICB0aGlzLmZpbmlzaFJlbmRlclBhc3MoKTtcbiAgICB0aGlzLl9ncHUuZGV2aWNlLnF1ZXVlLnN1Ym1pdChbdGhpcy5jb21tYW5kRW5jb2Rlci5maW5pc2goKV0pO1xuICAgIHRoaXMuX3Jlc29sdmVDb21tYW5kRmluaXNoZWQoKTtcbiAgICB0aGlzLmNvbW1hbmRFbmNvZGVyID0gbnVsbDtcbiAgfVxuICAvLyByZXN0b3JlcyBhIHJlbmRlciBwYXNzIGlmIGZpbmlzaFJlbmRlclBhc3Mgd2FzIGNhbGxlZFxuICAvLyBub3Qgb3B0aW1pc2VkIGFzIHJlYWxseSB1c2VkIGZvciBkZWJ1Z2dpbmchXG4gIC8vIHVzZWQgd2hlbiB3ZSB3YW50IHRvIHN0b3AgZHJhd2luZyBhbmQgbG9nIGEgdGV4dHVyZS4uXG4gIHJlc3RvcmVSZW5kZXJQYXNzKCkge1xuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLl9yZW5kZXJlci5yZW5kZXJUYXJnZXQuYWRhcHRvci5nZXREZXNjcmlwdG9yKFxuICAgICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnJlbmRlclRhcmdldCxcbiAgICAgIGZhbHNlLFxuICAgICAgWzAsIDAsIDAsIDFdXG4gICAgKTtcbiAgICB0aGlzLnJlbmRlclBhc3NFbmNvZGVyID0gdGhpcy5jb21tYW5kRW5jb2Rlci5iZWdpblJlbmRlclBhc3MoZGVzY3JpcHRvcik7XG4gICAgY29uc3QgYm91bmRQaXBlbGluZSA9IHRoaXMuX2JvdW5kUGlwZWxpbmU7XG4gICAgY29uc3QgYm91bmRWZXJ0ZXhCdWZmZXIgPSB7IC4uLnRoaXMuX2JvdW5kVmVydGV4QnVmZmVyIH07XG4gICAgY29uc3QgYm91bmRJbmRleEJ1ZmZlciA9IHRoaXMuX2JvdW5kSW5kZXhCdWZmZXI7XG4gICAgY29uc3QgYm91bmRCaW5kR3JvdXAgPSB7IC4uLnRoaXMuX2JvdW5kQmluZEdyb3VwIH07XG4gICAgdGhpcy5fY2xlYXJDYWNoZSgpO1xuICAgIGNvbnN0IHZpZXdwb3J0ID0gdGhpcy5fcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnZpZXdwb3J0O1xuICAgIHRoaXMucmVuZGVyUGFzc0VuY29kZXIuc2V0Vmlld3BvcnQodmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCwgMCwgMSk7XG4gICAgdGhpcy5zZXRQaXBlbGluZShib3VuZFBpcGVsaW5lKTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gYm91bmRWZXJ0ZXhCdWZmZXIpIHtcbiAgICAgIHRoaXMuX3NldFZlcnRleEJ1ZmZlcihpLCBib3VuZFZlcnRleEJ1ZmZlcltpXSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaSBpbiBib3VuZEJpbmRHcm91cCkge1xuICAgICAgdGhpcy5zZXRCaW5kR3JvdXAoaSwgYm91bmRCaW5kR3JvdXBbaV0sIG51bGwpO1xuICAgIH1cbiAgICB0aGlzLl9zZXRJbmRleEJ1ZmZlcihib3VuZEluZGV4QnVmZmVyKTtcbiAgfVxuICBfY2xlYXJDYWNoZSgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHRoaXMuX2JvdW5kQmluZEdyb3VwW2ldID0gbnVsbDtcbiAgICAgIHRoaXMuX2JvdW5kVmVydGV4QnVmZmVyW2ldID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fYm91bmRJbmRleEJ1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5fYm91bmRQaXBlbGluZSA9IG51bGw7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gICAgdGhpcy5fZ3B1ID0gbnVsbDtcbiAgICB0aGlzLl9ib3VuZEJpbmRHcm91cCA9IG51bGw7XG4gICAgdGhpcy5fYm91bmRWZXJ0ZXhCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMuX2JvdW5kSW5kZXhCdWZmZXIgPSBudWxsO1xuICAgIHRoaXMuX2JvdW5kUGlwZWxpbmUgPSBudWxsO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ3B1KSB7XG4gICAgdGhpcy5fZ3B1ID0gZ3B1O1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR3B1RW5jb2RlclN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtFeHRlbnNpb25UeXBlLldlYkdQVVN5c3RlbV0sXG4gIG5hbWU6IFwiZW5jb2RlclwiLFxuICBwcmlvcml0eTogMVxufTtcblxuZXhwb3J0IHsgR3B1RW5jb2RlclN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1RW5jb2RlclN5c3RlbS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBTVEVOQ0lMX01PREVTIH0gZnJvbSAnLi4vc2hhcmVkL3N0YXRlL2NvbnN0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3B1U3RlbmNpbFN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyVGFyZ2V0U3RlbmNpbFN0YXRlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICByZW5kZXJlci5yZW5kZXJUYXJnZXQub25SZW5kZXJUYXJnZXRDaGFuZ2UuYWRkKHRoaXMpO1xuICB9XG4gIG9uUmVuZGVyVGFyZ2V0Q2hhbmdlKHJlbmRlclRhcmdldCkge1xuICAgIGxldCBzdGVuY2lsU3RhdGUgPSB0aGlzLl9yZW5kZXJUYXJnZXRTdGVuY2lsU3RhdGVbcmVuZGVyVGFyZ2V0LnVpZF07XG4gICAgaWYgKCFzdGVuY2lsU3RhdGUpIHtcbiAgICAgIHN0ZW5jaWxTdGF0ZSA9IHRoaXMuX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZVtyZW5kZXJUYXJnZXQudWlkXSA9IHtcbiAgICAgICAgc3RlbmNpbE1vZGU6IFNURU5DSUxfTU9ERVMuRElTQUJMRUQsXG4gICAgICAgIHN0ZW5jaWxSZWZlcmVuY2U6IDBcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuX2FjdGl2ZVJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcbiAgICB0aGlzLnNldFN0ZW5jaWxNb2RlKHN0ZW5jaWxTdGF0ZS5zdGVuY2lsTW9kZSwgc3RlbmNpbFN0YXRlLnN0ZW5jaWxSZWZlcmVuY2UpO1xuICB9XG4gIHNldFN0ZW5jaWxNb2RlKHN0ZW5jaWxNb2RlLCBzdGVuY2lsUmVmZXJlbmNlKSB7XG4gICAgY29uc3Qgc3RlbmNpbFN0YXRlID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3RlbmNpbFN0YXRlW3RoaXMuX2FjdGl2ZVJlbmRlclRhcmdldC51aWRdO1xuICAgIHN0ZW5jaWxTdGF0ZS5zdGVuY2lsTW9kZSA9IHN0ZW5jaWxNb2RlO1xuICAgIHN0ZW5jaWxTdGF0ZS5zdGVuY2lsUmVmZXJlbmNlID0gc3RlbmNpbFJlZmVyZW5jZTtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIHJlbmRlcmVyLnBpcGVsaW5lLnNldFN0ZW5jaWxNb2RlKHN0ZW5jaWxNb2RlKTtcbiAgICByZW5kZXJlci5lbmNvZGVyLnJlbmRlclBhc3NFbmNvZGVyLnNldFN0ZW5jaWxSZWZlcmVuY2Uoc3RlbmNpbFJlZmVyZW5jZSk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJUYXJnZXQub25SZW5kZXJUYXJnZXRDaGFuZ2UucmVtb3ZlKHRoaXMpO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgICB0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZSA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HcHVTdGVuY2lsU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwic3RlbmNpbFwiXG59O1xuXG5leHBvcnQgeyBHcHVTdGVuY2lsU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcHVTdGVuY2lsU3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgV0dTTF9BTElHTl9TSVpFX0RBVEEgPSB7XG4gIGkzMjogeyBhbGlnbjogNCwgc2l6ZTogNCB9LFxuICB1MzI6IHsgYWxpZ246IDQsIHNpemU6IDQgfSxcbiAgZjMyOiB7IGFsaWduOiA0LCBzaXplOiA0IH0sXG4gIGYxNjogeyBhbGlnbjogMiwgc2l6ZTogMiB9LFxuICBcInZlYzI8aTMyPlwiOiB7IGFsaWduOiA4LCBzaXplOiA4IH0sXG4gIFwidmVjMjx1MzI+XCI6IHsgYWxpZ246IDgsIHNpemU6IDggfSxcbiAgXCJ2ZWMyPGYzMj5cIjogeyBhbGlnbjogOCwgc2l6ZTogOCB9LFxuICBcInZlYzI8ZjE2PlwiOiB7IGFsaWduOiA0LCBzaXplOiA0IH0sXG4gIFwidmVjMzxpMzI+XCI6IHsgYWxpZ246IDE2LCBzaXplOiAxMiB9LFxuICBcInZlYzM8dTMyPlwiOiB7IGFsaWduOiAxNiwgc2l6ZTogMTIgfSxcbiAgXCJ2ZWMzPGYzMj5cIjogeyBhbGlnbjogMTYsIHNpemU6IDEyIH0sXG4gIFwidmVjMzxmMTY+XCI6IHsgYWxpZ246IDgsIHNpemU6IDYgfSxcbiAgXCJ2ZWM0PGkzMj5cIjogeyBhbGlnbjogMTYsIHNpemU6IDE2IH0sXG4gIFwidmVjNDx1MzI+XCI6IHsgYWxpZ246IDE2LCBzaXplOiAxNiB9LFxuICBcInZlYzQ8ZjMyPlwiOiB7IGFsaWduOiAxNiwgc2l6ZTogMTYgfSxcbiAgXCJ2ZWM0PGYxNj5cIjogeyBhbGlnbjogOCwgc2l6ZTogOCB9LFxuICBcIm1hdDJ4MjxmMzI+XCI6IHsgYWxpZ246IDgsIHNpemU6IDE2IH0sXG4gIFwibWF0MngyPGYxNj5cIjogeyBhbGlnbjogNCwgc2l6ZTogOCB9LFxuICBcIm1hdDN4MjxmMzI+XCI6IHsgYWxpZ246IDgsIHNpemU6IDI0IH0sXG4gIFwibWF0M3gyPGYxNj5cIjogeyBhbGlnbjogNCwgc2l6ZTogMTIgfSxcbiAgXCJtYXQ0eDI8ZjMyPlwiOiB7IGFsaWduOiA4LCBzaXplOiAzMiB9LFxuICBcIm1hdDR4MjxmMTY+XCI6IHsgYWxpZ246IDQsIHNpemU6IDE2IH0sXG4gIFwibWF0MngzPGYzMj5cIjogeyBhbGlnbjogMTYsIHNpemU6IDMyIH0sXG4gIFwibWF0MngzPGYxNj5cIjogeyBhbGlnbjogOCwgc2l6ZTogMTYgfSxcbiAgXCJtYXQzeDM8ZjMyPlwiOiB7IGFsaWduOiAxNiwgc2l6ZTogNDggfSxcbiAgXCJtYXQzeDM8ZjE2PlwiOiB7IGFsaWduOiA4LCBzaXplOiAyNCB9LFxuICBcIm1hdDR4MzxmMzI+XCI6IHsgYWxpZ246IDE2LCBzaXplOiA2NCB9LFxuICBcIm1hdDR4MzxmMTY+XCI6IHsgYWxpZ246IDgsIHNpemU6IDMyIH0sXG4gIFwibWF0Mng0PGYzMj5cIjogeyBhbGlnbjogMTYsIHNpemU6IDMyIH0sXG4gIFwibWF0Mng0PGYxNj5cIjogeyBhbGlnbjogOCwgc2l6ZTogMTYgfSxcbiAgXCJtYXQzeDQ8ZjMyPlwiOiB7IGFsaWduOiAxNiwgc2l6ZTogNDggfSxcbiAgXCJtYXQzeDQ8ZjE2PlwiOiB7IGFsaWduOiA4LCBzaXplOiAyNCB9LFxuICBcIm1hdDR4NDxmMzI+XCI6IHsgYWxpZ246IDE2LCBzaXplOiA2NCB9LFxuICBcIm1hdDR4NDxmMTY+XCI6IHsgYWxpZ246IDgsIHNpemU6IDMyIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVVYm9FbGVtZW50c1dHU0wodW5pZm9ybURhdGEpIHtcbiAgY29uc3QgdWJvRWxlbWVudHMgPSB1bmlmb3JtRGF0YS5tYXAoKGRhdGEpID0+ICh7XG4gICAgZGF0YSxcbiAgICBvZmZzZXQ6IDAsXG4gICAgc2l6ZTogMFxuICB9KSk7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHVib0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdWJvRWxlbWVudCA9IHVib0VsZW1lbnRzW2ldO1xuICAgIGxldCBzaXplID0gV0dTTF9BTElHTl9TSVpFX0RBVEFbdWJvRWxlbWVudC5kYXRhLnR5cGVdLnNpemU7XG4gICAgY29uc3QgYWxpZ24gPSBXR1NMX0FMSUdOX1NJWkVfREFUQVt1Ym9FbGVtZW50LmRhdGEudHlwZV0uYWxpZ247XG4gICAgaWYgKCFXR1NMX0FMSUdOX1NJWkVfREFUQVt1Ym9FbGVtZW50LmRhdGEudHlwZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgW1BpeGkuanNdIFdlYkdQVSBVbmlmb3JtQnVmZmVyOiBVbmtub3duIHR5cGUgJHt1Ym9FbGVtZW50LmRhdGEudHlwZX1gKTtcbiAgICB9XG4gICAgaWYgKHVib0VsZW1lbnQuZGF0YS5zaXplID4gMSkge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KHNpemUsIGFsaWduKSAqIHVib0VsZW1lbnQuZGF0YS5zaXplO1xuICAgIH1cbiAgICBvZmZzZXQgPSBNYXRoLmNlaWwob2Zmc2V0IC8gYWxpZ24pICogYWxpZ247XG4gICAgdWJvRWxlbWVudC5zaXplID0gc2l6ZTtcbiAgICB1Ym9FbGVtZW50Lm9mZnNldCA9IG9mZnNldDtcbiAgICBvZmZzZXQgKz0gc2l6ZTtcbiAgfVxuICBvZmZzZXQgPSBNYXRoLmNlaWwob2Zmc2V0IC8gMTYpICogMTY7XG4gIHJldHVybiB7IHVib0VsZW1lbnRzLCBzaXplOiBvZmZzZXQgfTtcbn1cblxuZXhwb3J0IHsgV0dTTF9BTElHTl9TSVpFX0RBVEEsIGNyZWF0ZVVib0VsZW1lbnRzV0dTTCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlVWJvRWxlbWVudHNXR1NMLm1qcy5tYXBcbiIsImltcG9ydCB7IFdHU0xfQUxJR05fU0laRV9EQVRBIH0gZnJvbSAnLi9jcmVhdGVVYm9FbGVtZW50c1dHU0wubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZW5lcmF0ZUFycmF5U3luY1dHU0wodWJvRWxlbWVudCwgb2Zmc2V0VG9BZGQpIHtcbiAgY29uc3QgeyBzaXplLCBhbGlnbiB9ID0gV0dTTF9BTElHTl9TSVpFX0RBVEFbdWJvRWxlbWVudC5kYXRhLnR5cGVdO1xuICBjb25zdCByZW1haW5kZXIgPSAoYWxpZ24gLSBzaXplKSAvIDQ7XG4gIHJldHVybiBgXG4gICAgICAgICB2ID0gdXYuJHt1Ym9FbGVtZW50LmRhdGEubmFtZX07XG4gICAgICAgICAke29mZnNldFRvQWRkICE9PSAwID8gYG9mZnNldCArPSAke29mZnNldFRvQWRkfTtgIDogXCJcIn1cblxuICAgICAgICAgYXJyYXlPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAgICAgIHQgPSAwO1xuXG4gICAgICAgICBmb3IodmFyIGk9MDsgaSA8ICR7dWJvRWxlbWVudC5kYXRhLnNpemUgKiAoc2l6ZSAvIDQpfTsgaSsrKVxuICAgICAgICAge1xuICAgICAgICAgICAgIGZvcih2YXIgaiA9IDA7IGogPCAke3NpemUgLyA0fTsgaisrKVxuICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgZGF0YVthcnJheU9mZnNldCsrXSA9IHZbdCsrXTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgJHtyZW1haW5kZXIgIT09IDAgPyBgYXJyYXlPZmZzZXQgKz0gJHtyZW1haW5kZXJ9O2AgOiBcIlwifVxuICAgICAgICAgfVxuICAgICBgO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZUFycmF5U3luY1dHU0wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlQXJyYXlTeW5jV0dTTC5tanMubWFwXG4iLCJpbXBvcnQgeyBjcmVhdGVVYm9TeW5jRnVuY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvc2hhZGVyL3V0aWxzL2NyZWF0ZVVib1N5bmNGdW5jdGlvbi5tanMnO1xuaW1wb3J0IHsgdWJvU3luY0Z1bmN0aW9uc1dHU0wgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvc2hhZGVyL3V0aWxzL3Vib1N5bmNGdW5jdGlvbnMubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlQXJyYXlTeW5jV0dTTCB9IGZyb20gJy4vZ2VuZXJhdGVBcnJheVN5bmNXR1NMLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gY3JlYXRlVWJvU3luY0Z1bmN0aW9uV0dTTCh1Ym9FbGVtZW50cykge1xuICByZXR1cm4gY3JlYXRlVWJvU3luY0Z1bmN0aW9uKFxuICAgIHVib0VsZW1lbnRzLFxuICAgIFwidWJvV2dzbFwiLFxuICAgIGdlbmVyYXRlQXJyYXlTeW5jV0dTTCxcbiAgICB1Ym9TeW5jRnVuY3Rpb25zV0dTTFxuICApO1xufVxuXG5leHBvcnQgeyBjcmVhdGVVYm9TeW5jRnVuY3Rpb25XR1NMIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVVYm9TeW5jRnVuY3Rpb25XR1NMLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IFVib1N5c3RlbSB9IGZyb20gJy4uL3NoYXJlZC9zaGFkZXIvVWJvU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVVYm9FbGVtZW50c1dHU0wgfSBmcm9tICcuL3NoYWRlci91dGlscy9jcmVhdGVVYm9FbGVtZW50c1dHU0wubWpzJztcbmltcG9ydCB7IGNyZWF0ZVVib1N5bmNGdW5jdGlvbldHU0wgfSBmcm9tICcuL3NoYWRlci91dGlscy9jcmVhdGVVYm9TeW5jRnVuY3Rpb25XR1NMLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3B1VWJvU3lzdGVtIGV4dGVuZHMgVWJvU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgY3JlYXRlVWJvRWxlbWVudHM6IGNyZWF0ZVVib0VsZW1lbnRzV0dTTCxcbiAgICAgIGdlbmVyYXRlVWJvU3luYzogY3JlYXRlVWJvU3luY0Z1bmN0aW9uV0dTTFxuICAgIH0pO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR3B1VWJvU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW0V4dGVuc2lvblR5cGUuV2ViR1BVU3lzdGVtXSxcbiAgbmFtZTogXCJ1Ym9cIlxufTtcblxuZXhwb3J0IHsgR3B1VWJvU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcHVVYm9TeXN0ZW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBVYm9CYXRjaCB7XG4gIGNvbnN0cnVjdG9yKHsgbWluVW5pZm9ybU9mZnNldEFsaWdubWVudCB9KSB7XG4gICAgdGhpcy5fbWluVW5pZm9ybU9mZnNldEFsaWdubWVudCA9IDI1NjtcbiAgICB0aGlzLmJ5dGVJbmRleCA9IDA7XG4gICAgdGhpcy5fbWluVW5pZm9ybU9mZnNldEFsaWdubWVudCA9IG1pblVuaWZvcm1PZmZzZXRBbGlnbm1lbnQ7XG4gICAgdGhpcy5kYXRhID0gbmV3IEZsb2F0MzJBcnJheSg2NTUzNSk7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5ieXRlSW5kZXggPSAwO1xuICB9XG4gIGFkZEVtcHR5R3JvdXAoc2l6ZSkge1xuICAgIGlmIChzaXplID4gdGhpcy5fbWluVW5pZm9ybU9mZnNldEFsaWdubWVudCAvIDQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5pZm9ybUJ1ZmZlckJhdGNoOiBhcnJheSBpcyB0b28gbGFyZ2U6ICR7c2l6ZSAqIDR9YCk7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5ieXRlSW5kZXg7XG4gICAgbGV0IG5ld1NpemUgPSBzdGFydCArIHNpemUgKiA0O1xuICAgIG5ld1NpemUgPSBNYXRoLmNlaWwobmV3U2l6ZSAvIHRoaXMuX21pblVuaWZvcm1PZmZzZXRBbGlnbm1lbnQpICogdGhpcy5fbWluVW5pZm9ybU9mZnNldEFsaWdubWVudDtcbiAgICBpZiAobmV3U2l6ZSA+IHRoaXMuZGF0YS5sZW5ndGggKiA0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmlmb3JtQnVmZmVyQmF0Y2g6IHVibyBiYXRjaCBnb3QgdG9vIGJpZ1wiKTtcbiAgICB9XG4gICAgdGhpcy5ieXRlSW5kZXggPSBuZXdTaXplO1xuICAgIHJldHVybiBzdGFydDtcbiAgfVxuICBhZGRHcm91cChhcnJheSkge1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuYWRkRW1wdHlHcm91cChhcnJheS5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuZGF0YVtvZmZzZXQgLyA0ICsgaV0gPSBhcnJheVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX2J1ZmZlci5kZXN0cm95KCk7XG4gICAgdGhpcy5fYnVmZmVyID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgPSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCB7IFVib0JhdGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VYm9CYXRjaC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICcuLi9zaGFyZWQvYnVmZmVyL0J1ZmZlci5tanMnO1xuaW1wb3J0IHsgQnVmZmVyUmVzb3VyY2UgfSBmcm9tICcuLi9zaGFyZWQvYnVmZmVyL0J1ZmZlclJlc291cmNlLm1qcyc7XG5pbXBvcnQgeyBCdWZmZXJVc2FnZSB9IGZyb20gJy4uL3NoYXJlZC9idWZmZXIvY29uc3QubWpzJztcbmltcG9ydCB7IFVib0JhdGNoIH0gZnJvbSAnLi9idWZmZXIvVWJvQmF0Y2gubWpzJztcbmltcG9ydCB7IEJpbmRHcm91cCB9IGZyb20gJy4vc2hhZGVyL0JpbmRHcm91cC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IG1pblVuaWZvcm1PZmZzZXRBbGlnbm1lbnQgPSAxMjg7XG5jbGFzcyBHcHVVbmlmb3JtQmF0Y2hQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9iaW5kR3JvdXBIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgLy8gbnVtYmVyIG9mIGJ1ZmZlcnMuLlxuICAgIHRoaXMuX2J1ZmZlcnMgPSBbXTtcbiAgICB0aGlzLl9iaW5kR3JvdXBzID0gW107XG4gICAgdGhpcy5fYnVmZmVyUmVzb3VyY2VzID0gW107XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9iYXRjaEJ1ZmZlciA9IG5ldyBVYm9CYXRjaCh7IG1pblVuaWZvcm1PZmZzZXRBbGlnbm1lbnQgfSk7XG4gICAgY29uc3QgdG90YWxCdWZmZXJzID0gMjU2IC8gbWluVW5pZm9ybU9mZnNldEFsaWdubWVudDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsQnVmZmVyczsgaSsrKSB7XG4gICAgICBsZXQgdXNhZ2UgPSBCdWZmZXJVc2FnZS5VTklGT1JNIHwgQnVmZmVyVXNhZ2UuQ09QWV9EU1Q7XG4gICAgICBpZiAoaSA9PT0gMClcbiAgICAgICAgdXNhZ2UgfD0gQnVmZmVyVXNhZ2UuQ09QWV9TUkM7XG4gICAgICB0aGlzLl9idWZmZXJzLnB1c2gobmV3IEJ1ZmZlcih7XG4gICAgICAgIGRhdGE6IHRoaXMuX2JhdGNoQnVmZmVyLmRhdGEsXG4gICAgICAgIHVzYWdlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG4gIHJlbmRlckVuZCgpIHtcbiAgICB0aGlzLl91cGxvYWRCaW5kR3JvdXBzKCk7XG4gICAgdGhpcy5fcmVzZXRCaW5kR3JvdXBzKCk7XG4gIH1cbiAgX3Jlc2V0QmluZEdyb3VwcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fYmluZEdyb3VwSGFzaCkge1xuICAgICAgdGhpcy5fYmluZEdyb3VwSGFzaFtpXSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuX2JhdGNoQnVmZmVyLmNsZWFyKCk7XG4gIH1cbiAgLy8ganVzdCB3b3JrcyBmb3Igc2luZ2xlIGJpbmQgZ3JvdXBzIGZvciBub3dcbiAgZ2V0VW5pZm9ybUJpbmRHcm91cChncm91cCwgZHVwbGljYXRlKSB7XG4gICAgaWYgKCFkdXBsaWNhdGUgJiYgdGhpcy5fYmluZEdyb3VwSGFzaFtncm91cC51aWRdKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYmluZEdyb3VwSGFzaFtncm91cC51aWRdO1xuICAgIH1cbiAgICB0aGlzLl9yZW5kZXJlci51Ym8uZW5zdXJlVW5pZm9ybUdyb3VwKGdyb3VwKTtcbiAgICBjb25zdCBkYXRhID0gZ3JvdXAuYnVmZmVyLmRhdGE7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5fYmF0Y2hCdWZmZXIuYWRkRW1wdHlHcm91cChkYXRhLmxlbmd0aCk7XG4gICAgdGhpcy5fcmVuZGVyZXIudWJvLnN5bmNVbmlmb3JtR3JvdXAoZ3JvdXAsIHRoaXMuX2JhdGNoQnVmZmVyLmRhdGEsIG9mZnNldCAvIDQpO1xuICAgIHRoaXMuX2JpbmRHcm91cEhhc2hbZ3JvdXAudWlkXSA9IHRoaXMuX2dldEJpbmRHcm91cChvZmZzZXQgLyBtaW5Vbmlmb3JtT2Zmc2V0QWxpZ25tZW50KTtcbiAgICByZXR1cm4gdGhpcy5fYmluZEdyb3VwSGFzaFtncm91cC51aWRdO1xuICB9XG4gIGdldFVib1Jlc291cmNlKGdyb3VwKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIudWJvLnVwZGF0ZVVuaWZvcm1Hcm91cChncm91cCk7XG4gICAgY29uc3QgZGF0YSA9IGdyb3VwLmJ1ZmZlci5kYXRhO1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuX2JhdGNoQnVmZmVyLmFkZEdyb3VwKGRhdGEpO1xuICAgIHJldHVybiB0aGlzLl9nZXRCdWZmZXJSZXNvdXJjZShvZmZzZXQgLyBtaW5Vbmlmb3JtT2Zmc2V0QWxpZ25tZW50KTtcbiAgfVxuICBnZXRBcnJheUJpbmRHcm91cChkYXRhKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5fYmF0Y2hCdWZmZXIuYWRkR3JvdXAoZGF0YSk7XG4gICAgcmV0dXJuIHRoaXMuX2dldEJpbmRHcm91cChvZmZzZXQgLyBtaW5Vbmlmb3JtT2Zmc2V0QWxpZ25tZW50KTtcbiAgfVxuICBnZXRBcnJheUJ1ZmZlclJlc291cmNlKGRhdGEpIHtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLl9iYXRjaEJ1ZmZlci5hZGRHcm91cChkYXRhKTtcbiAgICBjb25zdCBpbmRleCA9IG9mZnNldCAvIG1pblVuaWZvcm1PZmZzZXRBbGlnbm1lbnQ7XG4gICAgcmV0dXJuIHRoaXMuX2dldEJ1ZmZlclJlc291cmNlKGluZGV4KTtcbiAgfVxuICBfZ2V0QnVmZmVyUmVzb3VyY2UoaW5kZXgpIHtcbiAgICBpZiAoIXRoaXMuX2J1ZmZlclJlc291cmNlc1tpbmRleF0pIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuX2J1ZmZlcnNbaW5kZXggJSAyXTtcbiAgICAgIHRoaXMuX2J1ZmZlclJlc291cmNlc1tpbmRleF0gPSBuZXcgQnVmZmVyUmVzb3VyY2Uoe1xuICAgICAgICBidWZmZXIsXG4gICAgICAgIG9mZnNldDogKGluZGV4IC8gMiB8IDApICogMjU2LFxuICAgICAgICBzaXplOiBtaW5Vbmlmb3JtT2Zmc2V0QWxpZ25tZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlclJlc291cmNlc1tpbmRleF07XG4gIH1cbiAgX2dldEJpbmRHcm91cChpbmRleCkge1xuICAgIGlmICghdGhpcy5fYmluZEdyb3Vwc1tpbmRleF0pIHtcbiAgICAgIGNvbnN0IGJpbmRHcm91cCA9IG5ldyBCaW5kR3JvdXAoe1xuICAgICAgICAwOiB0aGlzLl9nZXRCdWZmZXJSZXNvdXJjZShpbmRleClcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fYmluZEdyb3Vwc1tpbmRleF0gPSBiaW5kR3JvdXA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9iaW5kR3JvdXBzW2luZGV4XTtcbiAgfVxuICBfdXBsb2FkQmluZEdyb3VwcygpIHtcbiAgICBjb25zdCBidWZmZXJTeXN0ZW0gPSB0aGlzLl9yZW5kZXJlci5idWZmZXI7XG4gICAgY29uc3QgZmlyc3RCdWZmZXIgPSB0aGlzLl9idWZmZXJzWzBdO1xuICAgIGZpcnN0QnVmZmVyLnVwZGF0ZSh0aGlzLl9iYXRjaEJ1ZmZlci5ieXRlSW5kZXgpO1xuICAgIGJ1ZmZlclN5c3RlbS51cGRhdGVCdWZmZXIoZmlyc3RCdWZmZXIpO1xuICAgIGNvbnN0IGNvbW1hbmRFbmNvZGVyID0gdGhpcy5fcmVuZGVyZXIuZ3B1LmRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5fYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5fYnVmZmVyc1tpXTtcbiAgICAgIGNvbW1hbmRFbmNvZGVyLmNvcHlCdWZmZXJUb0J1ZmZlcihcbiAgICAgICAgYnVmZmVyU3lzdGVtLmdldEdQVUJ1ZmZlcihmaXJzdEJ1ZmZlciksXG4gICAgICAgIG1pblVuaWZvcm1PZmZzZXRBbGlnbm1lbnQsXG4gICAgICAgIGJ1ZmZlclN5c3RlbS5nZXRHUFVCdWZmZXIoYnVmZmVyKSxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy5fYmF0Y2hCdWZmZXIuYnl0ZUluZGV4XG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLl9yZW5kZXJlci5ncHUuZGV2aWNlLnF1ZXVlLnN1Ym1pdChbY29tbWFuZEVuY29kZXIuZmluaXNoKCldKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fYmluZEdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fYmluZEdyb3Vwc1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuX2JpbmRHcm91cHMgPSBudWxsO1xuICAgIHRoaXMuX2JpbmRHcm91cEhhc2ggPSBudWxsO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fYnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fYnVmZmVyc1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuX2J1ZmZlcnMgPSBudWxsO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fYnVmZmVyUmVzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9idWZmZXJSZXNvdXJjZXNbaV0uZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLl9idWZmZXJSZXNvdXJjZXMgPSBudWxsO1xuICAgIHRoaXMuX2JhdGNoQnVmZmVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLl9iaW5kR3JvdXBIYXNoID0gbnVsbDtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HcHVVbmlmb3JtQmF0Y2hQaXBlLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXNcbiAgXSxcbiAgbmFtZTogXCJ1bmlmb3JtQmF0Y2hcIlxufTtcblxuZXhwb3J0IHsgR3B1VW5pZm9ybUJhdGNoUGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1VW5pZm9ybUJhdGNoUGlwZS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy93YXJuLm1qcyc7XG5pbXBvcnQgeyBlbnN1cmVBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vLi4vZ2wvc2hhZGVyL3Byb2dyYW0vZW5zdXJlQXR0cmlidXRlcy5tanMnO1xuaW1wb3J0IHsgU1RFTkNJTF9NT0RFUyB9IGZyb20gJy4uLy4uL3NoYXJlZC9zdGF0ZS9jb25zdC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlSWRGcm9tU3RyaW5nIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzL2NyZWF0ZUlkRnJvbVN0cmluZy5tanMnO1xuaW1wb3J0IHsgR3B1U3RlbmNpbE1vZGVzVG9QaXhpIH0gZnJvbSAnLi4vc3RhdGUvR3B1U3RlbmNpbE1vZGVzVG9QaXhpLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgdG9wb2xvZ3lTdHJpbmdUb0lkID0ge1xuICBcInBvaW50LWxpc3RcIjogMCxcbiAgXCJsaW5lLWxpc3RcIjogMSxcbiAgXCJsaW5lLXN0cmlwXCI6IDIsXG4gIFwidHJpYW5nbGUtbGlzdFwiOiAzLFxuICBcInRyaWFuZ2xlLXN0cmlwXCI6IDRcbn07XG5mdW5jdGlvbiBnZXRHcmFwaGljc1N0YXRlS2V5KGdlb21ldHJ5TGF5b3V0LCBzaGFkZXJLZXksIHN0YXRlLCBibGVuZE1vZGUsIHRvcG9sb2d5KSB7XG4gIHJldHVybiBnZW9tZXRyeUxheW91dCA8PCAyNCB8IHNoYWRlcktleSA8PCAxNiB8IHN0YXRlIDw8IDEwIHwgYmxlbmRNb2RlIDw8IDUgfCB0b3BvbG9neTtcbn1cbmZ1bmN0aW9uIGdldEdsb2JhbFN0YXRlS2V5KHN0ZW5jaWxTdGF0ZUlkLCBtdWx0aVNhbXBsZUNvdW50LCBjb2xvck1hc2ssIHJlbmRlclRhcmdldCkge1xuICByZXR1cm4gY29sb3JNYXNrIDw8IDYgfCBzdGVuY2lsU3RhdGVJZCA8PCAzIHwgcmVuZGVyVGFyZ2V0IDw8IDEgfCBtdWx0aVNhbXBsZUNvdW50O1xufVxuY2xhc3MgUGlwZWxpbmVTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX21vZHVsZUNhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fYnVmZmVyTGF5b3V0c0NhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fYmluZGluZ05hbWVzQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9waXBlQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9waXBlU3RhdGVDYWNoZXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9jb2xvck1hc2sgPSAxNTtcbiAgICB0aGlzLl9tdWx0aXNhbXBsZUNvdW50ID0gMTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ3B1KSB7XG4gICAgdGhpcy5fZ3B1ID0gZ3B1O1xuICAgIHRoaXMuc2V0U3RlbmNpbE1vZGUoU1RFTkNJTF9NT0RFUy5ESVNBQkxFRCk7XG4gICAgdGhpcy5fdXBkYXRlUGlwZUhhc2goKTtcbiAgfVxuICBzZXRNdWx0aXNhbXBsZUNvdW50KG11bHRpc2FtcGxlQ291bnQpIHtcbiAgICBpZiAodGhpcy5fbXVsdGlzYW1wbGVDb3VudCA9PT0gbXVsdGlzYW1wbGVDb3VudClcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl9tdWx0aXNhbXBsZUNvdW50ID0gbXVsdGlzYW1wbGVDb3VudDtcbiAgICB0aGlzLl91cGRhdGVQaXBlSGFzaCgpO1xuICB9XG4gIHNldFJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpIHtcbiAgICB0aGlzLl9tdWx0aXNhbXBsZUNvdW50ID0gcmVuZGVyVGFyZ2V0Lm1zYWFTYW1wbGVzO1xuICAgIHRoaXMuX2RlcHRoU3RlbmNpbEF0dGFjaG1lbnQgPSByZW5kZXJUYXJnZXQuZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50ID8gMSA6IDA7XG4gICAgdGhpcy5fdXBkYXRlUGlwZUhhc2goKTtcbiAgfVxuICBzZXRDb2xvck1hc2soY29sb3JNYXNrKSB7XG4gICAgaWYgKHRoaXMuX2NvbG9yTWFzayA9PT0gY29sb3JNYXNrKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2NvbG9yTWFzayA9IGNvbG9yTWFzaztcbiAgICB0aGlzLl91cGRhdGVQaXBlSGFzaCgpO1xuICB9XG4gIHNldFN0ZW5jaWxNb2RlKHN0ZW5jaWxNb2RlKSB7XG4gICAgaWYgKHRoaXMuX3N0ZW5jaWxNb2RlID09PSBzdGVuY2lsTW9kZSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl9zdGVuY2lsTW9kZSA9IHN0ZW5jaWxNb2RlO1xuICAgIHRoaXMuX3N0ZW5jaWxTdGF0ZSA9IEdwdVN0ZW5jaWxNb2Rlc1RvUGl4aVtzdGVuY2lsTW9kZV07XG4gICAgdGhpcy5fdXBkYXRlUGlwZUhhc2goKTtcbiAgfVxuICBzZXRQaXBlbGluZShnZW9tZXRyeSwgcHJvZ3JhbSwgc3RhdGUsIHBhc3NFbmNvZGVyKSB7XG4gICAgY29uc3QgcGlwZWxpbmUgPSB0aGlzLmdldFBpcGVsaW5lKGdlb21ldHJ5LCBwcm9ncmFtLCBzdGF0ZSk7XG4gICAgcGFzc0VuY29kZXIuc2V0UGlwZWxpbmUocGlwZWxpbmUpO1xuICB9XG4gIGdldFBpcGVsaW5lKGdlb21ldHJ5LCBwcm9ncmFtLCBzdGF0ZSwgdG9wb2xvZ3kpIHtcbiAgICBpZiAoIWdlb21ldHJ5Ll9sYXlvdXRLZXkpIHtcbiAgICAgIGVuc3VyZUF0dHJpYnV0ZXMoZ2VvbWV0cnksIHByb2dyYW0uYXR0cmlidXRlRGF0YSk7XG4gICAgICB0aGlzLl9nZW5lcmF0ZUJ1ZmZlcktleShnZW9tZXRyeSk7XG4gICAgfVxuICAgIHRvcG9sb2d5ID0gdG9wb2xvZ3kgfHwgZ2VvbWV0cnkudG9wb2xvZ3k7XG4gICAgY29uc3Qga2V5ID0gZ2V0R3JhcGhpY3NTdGF0ZUtleShcbiAgICAgIGdlb21ldHJ5Ll9sYXlvdXRLZXksXG4gICAgICBwcm9ncmFtLl9sYXlvdXRLZXksXG4gICAgICBzdGF0ZS5kYXRhLFxuICAgICAgc3RhdGUuX2JsZW5kTW9kZUlkLFxuICAgICAgdG9wb2xvZ3lTdHJpbmdUb0lkW3RvcG9sb2d5XVxuICAgICk7XG4gICAgaWYgKHRoaXMuX3BpcGVDYWNoZVtrZXldKVxuICAgICAgcmV0dXJuIHRoaXMuX3BpcGVDYWNoZVtrZXldO1xuICAgIHRoaXMuX3BpcGVDYWNoZVtrZXldID0gdGhpcy5fY3JlYXRlUGlwZWxpbmUoZ2VvbWV0cnksIHByb2dyYW0sIHN0YXRlLCB0b3BvbG9neSk7XG4gICAgcmV0dXJuIHRoaXMuX3BpcGVDYWNoZVtrZXldO1xuICB9XG4gIF9jcmVhdGVQaXBlbGluZShnZW9tZXRyeSwgcHJvZ3JhbSwgc3RhdGUsIHRvcG9sb2d5KSB7XG4gICAgY29uc3QgZGV2aWNlID0gdGhpcy5fZ3B1LmRldmljZTtcbiAgICBjb25zdCBidWZmZXJzID0gdGhpcy5fY3JlYXRlVmVydGV4QnVmZmVyTGF5b3V0cyhnZW9tZXRyeSwgcHJvZ3JhbSk7XG4gICAgY29uc3QgYmxlbmRNb2RlcyA9IHRoaXMuX3JlbmRlcmVyLnN0YXRlLmdldENvbG9yVGFyZ2V0cyhzdGF0ZSk7XG4gICAgYmxlbmRNb2Rlc1swXS53cml0ZU1hc2sgPSB0aGlzLl9zdGVuY2lsTW9kZSA9PT0gU1RFTkNJTF9NT0RFUy5SRU5ERVJJTkdfTUFTS19BREQgPyAwIDogdGhpcy5fY29sb3JNYXNrO1xuICAgIGNvbnN0IGxheW91dCA9IHRoaXMuX3JlbmRlcmVyLnNoYWRlci5nZXRQcm9ncmFtRGF0YShwcm9ncmFtKS5waXBlbGluZTtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgLy8gVE9ETyBsYXRlciBjaGVjayBpZiBpdHMgaGVscGZ1bCB0byBjcmVhdGUuLlxuICAgICAgLy8gbGF5b3V0LFxuICAgICAgdmVydGV4OiB7XG4gICAgICAgIG1vZHVsZTogdGhpcy5fZ2V0TW9kdWxlKHByb2dyYW0udmVydGV4LnNvdXJjZSksXG4gICAgICAgIGVudHJ5UG9pbnQ6IHByb2dyYW0udmVydGV4LmVudHJ5UG9pbnQsXG4gICAgICAgIC8vIGdlb21ldHJ5Li5cbiAgICAgICAgYnVmZmVyc1xuICAgICAgfSxcbiAgICAgIGZyYWdtZW50OiB7XG4gICAgICAgIG1vZHVsZTogdGhpcy5fZ2V0TW9kdWxlKHByb2dyYW0uZnJhZ21lbnQuc291cmNlKSxcbiAgICAgICAgZW50cnlQb2ludDogcHJvZ3JhbS5mcmFnbWVudC5lbnRyeVBvaW50LFxuICAgICAgICB0YXJnZXRzOiBibGVuZE1vZGVzXG4gICAgICB9LFxuICAgICAgcHJpbWl0aXZlOiB7XG4gICAgICAgIHRvcG9sb2d5LFxuICAgICAgICBjdWxsTW9kZTogc3RhdGUuY3VsbE1vZGVcbiAgICAgIH0sXG4gICAgICBsYXlvdXQsXG4gICAgICBtdWx0aXNhbXBsZToge1xuICAgICAgICBjb3VudDogdGhpcy5fbXVsdGlzYW1wbGVDb3VudFxuICAgICAgfSxcbiAgICAgIC8vIGRlcHRoU3RlbmNpbCxcbiAgICAgIGxhYmVsOiBgUElYSSBQaXBlbGluZWBcbiAgICB9O1xuICAgIGlmICh0aGlzLl9kZXB0aFN0ZW5jaWxBdHRhY2htZW50KSB7XG4gICAgICBkZXNjcmlwdG9yLmRlcHRoU3RlbmNpbCA9IHtcbiAgICAgICAgLi4udGhpcy5fc3RlbmNpbFN0YXRlLFxuICAgICAgICBmb3JtYXQ6IFwiZGVwdGgyNHBsdXMtc3RlbmNpbDhcIixcbiAgICAgICAgZGVwdGhXcml0ZUVuYWJsZWQ6IHN0YXRlLmRlcHRoVGVzdCxcbiAgICAgICAgZGVwdGhDb21wYXJlOiBzdGF0ZS5kZXB0aFRlc3QgPyBcImxlc3NcIiA6IFwiYWx3YXlzXCJcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHBpcGVsaW5lID0gZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKGRlc2NyaXB0b3IpO1xuICAgIHJldHVybiBwaXBlbGluZTtcbiAgfVxuICBfZ2V0TW9kdWxlKGNvZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kdWxlQ2FjaGVbY29kZV0gfHwgdGhpcy5fY3JlYXRlTW9kdWxlKGNvZGUpO1xuICB9XG4gIF9jcmVhdGVNb2R1bGUoY29kZSkge1xuICAgIGNvbnN0IGRldmljZSA9IHRoaXMuX2dwdS5kZXZpY2U7XG4gICAgdGhpcy5fbW9kdWxlQ2FjaGVbY29kZV0gPSBkZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHtcbiAgICAgIGNvZGVcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fbW9kdWxlQ2FjaGVbY29kZV07XG4gIH1cbiAgX2dlbmVyYXRlQnVmZmVyS2V5KGdlb21ldHJ5KSB7XG4gICAgY29uc3Qga2V5R2VuID0gW107XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBjb25zdCBhdHRyaWJ1dGVLZXlzID0gT2JqZWN0LmtleXMoZ2VvbWV0cnkuYXR0cmlidXRlcykuc29ydCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVLZXlzW2ldXTtcbiAgICAgIGtleUdlbltpbmRleCsrXSA9IGF0dHJpYnV0ZS5vZmZzZXQ7XG4gICAgICBrZXlHZW5baW5kZXgrK10gPSBhdHRyaWJ1dGUuZm9ybWF0O1xuICAgICAga2V5R2VuW2luZGV4KytdID0gYXR0cmlidXRlLnN0cmlkZTtcbiAgICAgIGtleUdlbltpbmRleCsrXSA9IGF0dHJpYnV0ZS5pbnN0YW5jZTtcbiAgICB9XG4gICAgY29uc3Qgc3RyaW5nS2V5ID0ga2V5R2VuLmpvaW4oXCJ8XCIpO1xuICAgIGdlb21ldHJ5Ll9sYXlvdXRLZXkgPSBjcmVhdGVJZEZyb21TdHJpbmcoc3RyaW5nS2V5LCBcImdlb21ldHJ5XCIpO1xuICAgIHJldHVybiBnZW9tZXRyeS5fbGF5b3V0S2V5O1xuICB9XG4gIF9nZW5lcmF0ZUF0dHJpYnV0ZUxvY2F0aW9uc0tleShwcm9ncmFtKSB7XG4gICAgY29uc3Qga2V5R2VuID0gW107XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBjb25zdCBhdHRyaWJ1dGVLZXlzID0gT2JqZWN0LmtleXMocHJvZ3JhbS5hdHRyaWJ1dGVEYXRhKS5zb3J0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBhdHRyaWJ1dGUgPSBwcm9ncmFtLmF0dHJpYnV0ZURhdGFbYXR0cmlidXRlS2V5c1tpXV07XG4gICAgICBrZXlHZW5baW5kZXgrK10gPSBhdHRyaWJ1dGUubG9jYXRpb247XG4gICAgfVxuICAgIGNvbnN0IHN0cmluZ0tleSA9IGtleUdlbi5qb2luKFwifFwiKTtcbiAgICBwcm9ncmFtLl9hdHRyaWJ1dGVMb2NhdGlvbnNLZXkgPSBjcmVhdGVJZEZyb21TdHJpbmcoc3RyaW5nS2V5LCBcInByb2dyYW1BdHRyaWJ1dGVzXCIpO1xuICAgIHJldHVybiBwcm9ncmFtLl9hdHRyaWJ1dGVMb2NhdGlvbnNLZXk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBoYXNoIG9mIGJ1ZmZlciBuYW1lcyBtYXBwZWQgdG8gYmluZCBsb2NhdGlvbnMuXG4gICAqIFRoaXMgaXMgdXNlZCB0byBiaW5kIHRoZSBjb3JyZWN0IGJ1ZmZlciB0byB0aGUgY29ycmVjdCBsb2NhdGlvbiBpbiB0aGUgc2hhZGVyLlxuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSBUaGUgZ2VvbWV0cnkgd2hlcmUgdG8gZ2V0IHRoZSBidWZmZXIgbmFtZXNcbiAgICogQHBhcmFtIHByb2dyYW0gLSBUaGUgcHJvZ3JhbSB3aGVyZSB0byBnZXQgdGhlIGJ1ZmZlciBuYW1lc1xuICAgKiBAcmV0dXJucyBBbiBvYmplY3Qgb2YgYnVmZmVyIG5hbWVzIG1hcHBlZCB0byB0aGUgYmluZCBsb2NhdGlvbi5cbiAgICovXG4gIGdldEJ1ZmZlck5hbWVzVG9CaW5kKGdlb21ldHJ5LCBwcm9ncmFtKSB7XG4gICAgY29uc3Qga2V5ID0gZ2VvbWV0cnkuX2xheW91dEtleSA8PCAxNiB8IHByb2dyYW0uX2F0dHJpYnV0ZUxvY2F0aW9uc0tleTtcbiAgICBpZiAodGhpcy5fYmluZGluZ05hbWVzQ2FjaGVba2V5XSlcbiAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nTmFtZXNDYWNoZVtrZXldO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9jcmVhdGVWZXJ0ZXhCdWZmZXJMYXlvdXRzKGdlb21ldHJ5LCBwcm9ncmFtKTtcbiAgICBjb25zdCBidWZmZXJOYW1lc1RvQmluZCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEgPSBwcm9ncmFtLmF0dHJpYnV0ZURhdGE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGNvbnN0IGogaW4gYXR0cmlidXRlRGF0YSkge1xuICAgICAgICBpZiAoYXR0cmlidXRlRGF0YVtqXS5sb2NhdGlvbiA9PT0gaSkge1xuICAgICAgICAgIGJ1ZmZlck5hbWVzVG9CaW5kW2ldID0gajtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9iaW5kaW5nTmFtZXNDYWNoZVtrZXldID0gYnVmZmVyTmFtZXNUb0JpbmQ7XG4gICAgcmV0dXJuIGJ1ZmZlck5hbWVzVG9CaW5kO1xuICB9XG4gIF9jcmVhdGVWZXJ0ZXhCdWZmZXJMYXlvdXRzKGdlb21ldHJ5LCBwcm9ncmFtKSB7XG4gICAgaWYgKCFwcm9ncmFtLl9hdHRyaWJ1dGVMb2NhdGlvbnNLZXkpXG4gICAgICB0aGlzLl9nZW5lcmF0ZUF0dHJpYnV0ZUxvY2F0aW9uc0tleShwcm9ncmFtKTtcbiAgICBjb25zdCBrZXkgPSBnZW9tZXRyeS5fbGF5b3V0S2V5IDw8IDE2IHwgcHJvZ3JhbS5fYXR0cmlidXRlTG9jYXRpb25zS2V5O1xuICAgIGlmICh0aGlzLl9idWZmZXJMYXlvdXRzQ2FjaGVba2V5XSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2J1ZmZlckxheW91dHNDYWNoZVtrZXldO1xuICAgIH1cbiAgICBjb25zdCB2ZXJ0ZXhCdWZmZXJzTGF5b3V0ID0gW107XG4gICAgZ2VvbWV0cnkuYnVmZmVycy5mb3JFYWNoKChidWZmZXIpID0+IHtcbiAgICAgIGNvbnN0IGJ1ZmZlckVudHJ5ID0ge1xuICAgICAgICBhcnJheVN0cmlkZTogMCxcbiAgICAgICAgc3RlcE1vZGU6IFwidmVydGV4XCIsXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtdXG4gICAgICB9O1xuICAgICAgY29uc3QgYnVmZmVyRW50cnlBdHRyaWJ1dGVzID0gYnVmZmVyRW50cnkuYXR0cmlidXRlcztcbiAgICAgIGZvciAoY29uc3QgaSBpbiBwcm9ncmFtLmF0dHJpYnV0ZURhdGEpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1tpXTtcbiAgICAgICAgaWYgKChhdHRyaWJ1dGUuZGl2aXNvciA/PyAxKSAhPT0gMSkge1xuICAgICAgICAgIHdhcm4oYEF0dHJpYnV0ZSAke2l9IGhhcyBhbiBpbnZhbGlkIGRpdmlzb3IgdmFsdWUgb2YgJyR7YXR0cmlidXRlLmRpdmlzb3J9Jy4gV2ViR1BVIG9ubHkgc3VwcG9ydHMgYSBkaXZpc29yIHZhbHVlIG9mIDFgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0cmlidXRlLmJ1ZmZlciA9PT0gYnVmZmVyKSB7XG4gICAgICAgICAgYnVmZmVyRW50cnkuYXJyYXlTdHJpZGUgPSBhdHRyaWJ1dGUuc3RyaWRlO1xuICAgICAgICAgIGJ1ZmZlckVudHJ5LnN0ZXBNb2RlID0gYXR0cmlidXRlLmluc3RhbmNlID8gXCJpbnN0YW5jZVwiIDogXCJ2ZXJ0ZXhcIjtcbiAgICAgICAgICBidWZmZXJFbnRyeUF0dHJpYnV0ZXMucHVzaCh7XG4gICAgICAgICAgICBzaGFkZXJMb2NhdGlvbjogcHJvZ3JhbS5hdHRyaWJ1dGVEYXRhW2ldLmxvY2F0aW9uLFxuICAgICAgICAgICAgb2Zmc2V0OiBhdHRyaWJ1dGUub2Zmc2V0LFxuICAgICAgICAgICAgZm9ybWF0OiBhdHRyaWJ1dGUuZm9ybWF0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChidWZmZXJFbnRyeUF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICAgIHZlcnRleEJ1ZmZlcnNMYXlvdXQucHVzaChidWZmZXJFbnRyeSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5fYnVmZmVyTGF5b3V0c0NhY2hlW2tleV0gPSB2ZXJ0ZXhCdWZmZXJzTGF5b3V0O1xuICAgIHJldHVybiB2ZXJ0ZXhCdWZmZXJzTGF5b3V0O1xuICB9XG4gIF91cGRhdGVQaXBlSGFzaCgpIHtcbiAgICBjb25zdCBrZXkgPSBnZXRHbG9iYWxTdGF0ZUtleShcbiAgICAgIHRoaXMuX3N0ZW5jaWxNb2RlLFxuICAgICAgdGhpcy5fbXVsdGlzYW1wbGVDb3VudCxcbiAgICAgIHRoaXMuX2NvbG9yTWFzayxcbiAgICAgIHRoaXMuX2RlcHRoU3RlbmNpbEF0dGFjaG1lbnRcbiAgICApO1xuICAgIGlmICghdGhpcy5fcGlwZVN0YXRlQ2FjaGVzW2tleV0pIHtcbiAgICAgIHRoaXMuX3BpcGVTdGF0ZUNhY2hlc1trZXldID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIHRoaXMuX3BpcGVDYWNoZSA9IHRoaXMuX3BpcGVTdGF0ZUNhY2hlc1trZXldO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX2J1ZmZlckxheW91dHNDYWNoZSA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5QaXBlbGluZVN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtFeHRlbnNpb25UeXBlLldlYkdQVVN5c3RlbV0sXG4gIG5hbWU6IFwicGlwZWxpbmVcIlxufTtcblxuZXhwb3J0IHsgUGlwZWxpbmVTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBpcGVsaW5lU3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3B1UmVuZGVyVGFyZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgIHRoaXMubXNhYVRleHR1cmVzID0gW107XG4gICAgdGhpcy5tc2FhU2FtcGxlcyA9IDE7XG4gIH1cbn1cblxuZXhwb3J0IHsgR3B1UmVuZGVyVGFyZ2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcHVSZW5kZXJUYXJnZXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ0xFQVIgfSBmcm9tICcuLi8uLi9nbC9jb25zdC5tanMnO1xuaW1wb3J0IHsgQ2FudmFzU291cmNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3RleHR1cmUvc291cmNlcy9DYW52YXNTb3VyY2UubWpzJztcbmltcG9ydCB7IFRleHR1cmVTb3VyY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvdGV4dHVyZS9zb3VyY2VzL1RleHR1cmVTb3VyY2UubWpzJztcbmltcG9ydCB7IEdwdVJlbmRlclRhcmdldCB9IGZyb20gJy4vR3B1UmVuZGVyVGFyZ2V0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3B1UmVuZGVyVGFyZ2V0QWRhcHRvciB7XG4gIGluaXQocmVuZGVyZXIsIHJlbmRlclRhcmdldFN5c3RlbSkge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtID0gcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICB9XG4gIGNvcHlUb1RleHR1cmUoc291cmNlUmVuZGVyU3VyZmFjZVRleHR1cmUsIGRlc3RpbmF0aW9uVGV4dHVyZSwgb3JpZ2luU3JjLCBzaXplLCBvcmlnaW5EZXN0KSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCBiYXNlR3B1VGV4dHVyZSA9IHRoaXMuX2dldEdwdUNvbG9yVGV4dHVyZShcbiAgICAgIHNvdXJjZVJlbmRlclN1cmZhY2VUZXh0dXJlXG4gICAgKTtcbiAgICBjb25zdCBiYWNrR3B1VGV4dHVyZSA9IHJlbmRlcmVyLnRleHR1cmUuZ2V0R3B1U291cmNlKFxuICAgICAgZGVzdGluYXRpb25UZXh0dXJlLnNvdXJjZVxuICAgICk7XG4gICAgcmVuZGVyZXIuZW5jb2Rlci5jb21tYW5kRW5jb2Rlci5jb3B5VGV4dHVyZVRvVGV4dHVyZShcbiAgICAgIHtcbiAgICAgICAgdGV4dHVyZTogYmFzZUdwdVRleHR1cmUsXG4gICAgICAgIG9yaWdpbjogb3JpZ2luU3JjXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0ZXh0dXJlOiBiYWNrR3B1VGV4dHVyZSxcbiAgICAgICAgb3JpZ2luOiBvcmlnaW5EZXN0XG4gICAgICB9LFxuICAgICAgc2l6ZVxuICAgICk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uVGV4dHVyZTtcbiAgfVxuICBzdGFydFJlbmRlclBhc3MocmVuZGVyVGFyZ2V0LCBjbGVhciA9IHRydWUsIGNsZWFyQ29sb3IsIHZpZXdwb3J0KSB7XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0U3lzdGVtID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIGNvbnN0IGdwdVJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldFN5c3RlbS5nZXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gdGhpcy5nZXREZXNjcmlwdG9yKHJlbmRlclRhcmdldCwgY2xlYXIsIGNsZWFyQ29sb3IpO1xuICAgIGdwdVJlbmRlclRhcmdldC5kZXNjcmlwdG9yID0gZGVzY3JpcHRvcjtcbiAgICB0aGlzLl9yZW5kZXJlci5waXBlbGluZS5zZXRSZW5kZXJUYXJnZXQoZ3B1UmVuZGVyVGFyZ2V0KTtcbiAgICB0aGlzLl9yZW5kZXJlci5lbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyhncHVSZW5kZXJUYXJnZXQpO1xuICAgIHRoaXMuX3JlbmRlcmVyLmVuY29kZXIuc2V0Vmlld3BvcnQodmlld3BvcnQpO1xuICB9XG4gIGZpbmlzaFJlbmRlclBhc3MoKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuZW5jb2Rlci5lbmRSZW5kZXJQYXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybnMgdGhlIGdwdSB0ZXh0dXJlIGZvciB0aGUgZmlyc3QgY29sb3IgdGV4dHVyZSBpbiB0aGUgcmVuZGVyIHRhcmdldFxuICAgKiBtYWlubHkgdXNlZCBieSB0aGUgZmlsdGVyIG1hbmFnZXIgdG8gZ2V0IGNvcHkgdGhlIHRleHR1cmUgZm9yIGJsZW5kaW5nXG4gICAqIEBwYXJhbSByZW5kZXJUYXJnZXRcbiAgICogQHJldHVybnMgYSBncHUgdGV4dHVyZVxuICAgKi9cbiAgX2dldEdwdUNvbG9yVGV4dHVyZShyZW5kZXJUYXJnZXQpIHtcbiAgICBjb25zdCBncHVSZW5kZXJUYXJnZXQgPSB0aGlzLl9yZW5kZXJUYXJnZXRTeXN0ZW0uZ2V0R3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCk7XG4gICAgaWYgKGdwdVJlbmRlclRhcmdldC5jb250ZXh0c1swXSkge1xuICAgICAgcmV0dXJuIGdwdVJlbmRlclRhcmdldC5jb250ZXh0c1swXS5nZXRDdXJyZW50VGV4dHVyZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXIudGV4dHVyZS5nZXRHcHVTb3VyY2UoXG4gICAgICByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlc1swXS5zb3VyY2VcbiAgICApO1xuICB9XG4gIGdldERlc2NyaXB0b3IocmVuZGVyVGFyZ2V0LCBjbGVhciwgY2xlYXJWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgY2xlYXIgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBjbGVhciA9IGNsZWFyID8gQ0xFQVIuQUxMIDogQ0xFQVIuTk9ORTtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0U3lzdGVtID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIGNvbnN0IGdwdVJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldFN5c3RlbS5nZXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcbiAgICBjb25zdCBjb2xvckF0dGFjaG1lbnRzID0gcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMubWFwKFxuICAgICAgKHRleHR1cmUsIGkpID0+IHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGdwdVJlbmRlclRhcmdldC5jb250ZXh0c1tpXTtcbiAgICAgICAgbGV0IHZpZXc7XG4gICAgICAgIGxldCByZXNvbHZlVGFyZ2V0O1xuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRUZXh0dXJlID0gY29udGV4dC5nZXRDdXJyZW50VGV4dHVyZSgpO1xuICAgICAgICAgIGNvbnN0IGNhbnZhc1RleHR1cmVWaWV3ID0gY3VycmVudFRleHR1cmUuY3JlYXRlVmlldygpO1xuICAgICAgICAgIHZpZXcgPSBjYW52YXNUZXh0dXJlVmlldztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3ID0gdGhpcy5fcmVuZGVyZXIudGV4dHVyZS5nZXRHcHVTb3VyY2UodGV4dHVyZSkuY3JlYXRlVmlldyh7XG4gICAgICAgICAgICBtaXBMZXZlbENvdW50OiAxXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdwdVJlbmRlclRhcmdldC5tc2FhVGV4dHVyZXNbaV0pIHtcbiAgICAgICAgICByZXNvbHZlVGFyZ2V0ID0gdmlldztcbiAgICAgICAgICB2aWV3ID0gdGhpcy5fcmVuZGVyZXIudGV4dHVyZS5nZXRUZXh0dXJlVmlldyhcbiAgICAgICAgICAgIGdwdVJlbmRlclRhcmdldC5tc2FhVGV4dHVyZXNbaV1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvYWRPcCA9IGNsZWFyICYgQ0xFQVIuQ09MT1IgPyBcImNsZWFyXCIgOiBcImxvYWRcIjtcbiAgICAgICAgY2xlYXJWYWx1ZSA/PyAoY2xlYXJWYWx1ZSA9IHJlbmRlclRhcmdldFN5c3RlbS5kZWZhdWx0Q2xlYXJDb2xvcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmlldyxcbiAgICAgICAgICByZXNvbHZlVGFyZ2V0LFxuICAgICAgICAgIGNsZWFyVmFsdWUsXG4gICAgICAgICAgc3RvcmVPcDogXCJzdG9yZVwiLFxuICAgICAgICAgIGxvYWRPcFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICk7XG4gICAgbGV0IGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQ7XG4gICAgaWYgKChyZW5kZXJUYXJnZXQuc3RlbmNpbCB8fCByZW5kZXJUYXJnZXQuZGVwdGgpICYmICFyZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsVGV4dHVyZSkge1xuICAgICAgcmVuZGVyVGFyZ2V0LmVuc3VyZURlcHRoU3RlbmNpbFRleHR1cmUoKTtcbiAgICAgIHJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxUZXh0dXJlLnNvdXJjZS5zYW1wbGVDb3VudCA9IGdwdVJlbmRlclRhcmdldC5tc2FhID8gNCA6IDE7XG4gICAgfVxuICAgIGlmIChyZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsVGV4dHVyZSkge1xuICAgICAgY29uc3Qgc3RlbmNpbExvYWRPcCA9IGNsZWFyICYgQ0xFQVIuU1RFTkNJTCA/IFwiY2xlYXJcIiA6IFwibG9hZFwiO1xuICAgICAgY29uc3QgZGVwdGhMb2FkT3AgPSBjbGVhciAmIENMRUFSLkRFUFRIID8gXCJjbGVhclwiIDogXCJsb2FkXCI7XG4gICAgICBkZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0ge1xuICAgICAgICB2aWV3OiB0aGlzLl9yZW5kZXJlci50ZXh0dXJlLmdldEdwdVNvdXJjZShyZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsVGV4dHVyZS5zb3VyY2UpLmNyZWF0ZVZpZXcoKSxcbiAgICAgICAgc3RlbmNpbFN0b3JlT3A6IFwic3RvcmVcIixcbiAgICAgICAgc3RlbmNpbExvYWRPcCxcbiAgICAgICAgZGVwdGhDbGVhclZhbHVlOiAxLFxuICAgICAgICBkZXB0aExvYWRPcCxcbiAgICAgICAgZGVwdGhTdG9yZU9wOiBcInN0b3JlXCJcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB7XG4gICAgICBjb2xvckF0dGFjaG1lbnRzLFxuICAgICAgZGVwdGhTdGVuY2lsQXR0YWNobWVudFxuICAgIH07XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH1cbiAgY2xlYXIocmVuZGVyVGFyZ2V0LCBjbGVhciA9IHRydWUsIGNsZWFyQ29sb3IsIHZpZXdwb3J0KSB7XG4gICAgaWYgKCFjbGVhcilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB7IGdwdSwgZW5jb2RlciB9ID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgY29uc3QgZGV2aWNlID0gZ3B1LmRldmljZTtcbiAgICBjb25zdCBzdGFuZEFsb25lID0gZW5jb2Rlci5jb21tYW5kRW5jb2RlciA9PT0gbnVsbDtcbiAgICBpZiAoc3RhbmRBbG9uZSkge1xuICAgICAgY29uc3QgY29tbWFuZEVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcbiAgICAgIGNvbnN0IHJlbmRlclBhc3NEZXNjcmlwdG9yID0gdGhpcy5nZXREZXNjcmlwdG9yKHJlbmRlclRhcmdldCwgY2xlYXIsIGNsZWFyQ29sb3IpO1xuICAgICAgY29uc3QgcGFzc0VuY29kZXIgPSBjb21tYW5kRW5jb2Rlci5iZWdpblJlbmRlclBhc3MocmVuZGVyUGFzc0Rlc2NyaXB0b3IpO1xuICAgICAgcGFzc0VuY29kZXIuc2V0Vmlld3BvcnQodmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCwgMCwgMSk7XG4gICAgICBwYXNzRW5jb2Rlci5lbmQoKTtcbiAgICAgIGNvbnN0IGdwdUNvbW1hbmRzID0gY29tbWFuZEVuY29kZXIuZmluaXNoKCk7XG4gICAgICBkZXZpY2UucXVldWUuc3VibWl0KFtncHVDb21tYW5kc10pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXJ0UmVuZGVyUGFzcyhyZW5kZXJUYXJnZXQsIGNsZWFyLCBjbGVhckNvbG9yLCB2aWV3cG9ydCk7XG4gICAgfVxuICB9XG4gIGluaXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KSB7XG4gICAgcmVuZGVyVGFyZ2V0LmlzUm9vdCA9IHRydWU7XG4gICAgY29uc3QgZ3B1UmVuZGVyVGFyZ2V0ID0gbmV3IEdwdVJlbmRlclRhcmdldCgpO1xuICAgIHJlbmRlclRhcmdldC5jb2xvclRleHR1cmVzLmZvckVhY2goKGNvbG9yVGV4dHVyZSwgaSkgPT4ge1xuICAgICAgaWYgKENhbnZhc1NvdXJjZS50ZXN0KGNvbG9yVGV4dHVyZS5yZXNvdXJjZSkpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNvbG9yVGV4dHVyZS5yZXNvdXJjZS5nZXRDb250ZXh0KFxuICAgICAgICAgIFwid2ViZ3B1XCJcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgYWxwaGFNb2RlID0gY29sb3JUZXh0dXJlLnRyYW5zcGFyZW50ID8gXCJwcmVtdWx0aXBsaWVkXCIgOiBcIm9wYXF1ZVwiO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnRleHQuY29uZmlndXJlKHtcbiAgICAgICAgICAgIGRldmljZTogdGhpcy5fcmVuZGVyZXIuZ3B1LmRldmljZSxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICAgICAgICB1c2FnZTogR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX0RTVCB8IEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVCB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX1NSQyxcbiAgICAgICAgICAgIGZvcm1hdDogXCJiZ3JhOHVub3JtXCIsXG4gICAgICAgICAgICBhbHBoYU1vZGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ3B1UmVuZGVyVGFyZ2V0LmNvbnRleHRzW2ldID0gY29udGV4dDtcbiAgICAgIH1cbiAgICAgIGdwdVJlbmRlclRhcmdldC5tc2FhID0gY29sb3JUZXh0dXJlLnNvdXJjZS5hbnRpYWxpYXM7XG4gICAgICBpZiAoY29sb3JUZXh0dXJlLnNvdXJjZS5hbnRpYWxpYXMpIHtcbiAgICAgICAgY29uc3QgbXNhYVRleHR1cmUgPSBuZXcgVGV4dHVyZVNvdXJjZSh7XG4gICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgIHNhbXBsZUNvdW50OiA0XG4gICAgICAgIH0pO1xuICAgICAgICBncHVSZW5kZXJUYXJnZXQubXNhYVRleHR1cmVzW2ldID0gbXNhYVRleHR1cmU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGdwdVJlbmRlclRhcmdldC5tc2FhKSB7XG4gICAgICBncHVSZW5kZXJUYXJnZXQubXNhYVNhbXBsZXMgPSA0O1xuICAgICAgaWYgKHJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxUZXh0dXJlKSB7XG4gICAgICAgIHJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxUZXh0dXJlLnNvdXJjZS5zYW1wbGVDb3VudCA9IDQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBncHVSZW5kZXJUYXJnZXQ7XG4gIH1cbiAgZGVzdHJveUdwdVJlbmRlclRhcmdldChncHVSZW5kZXJUYXJnZXQpIHtcbiAgICBncHVSZW5kZXJUYXJnZXQuY29udGV4dHMuZm9yRWFjaCgoY29udGV4dCkgPT4ge1xuICAgICAgY29udGV4dC51bmNvbmZpZ3VyZSgpO1xuICAgIH0pO1xuICAgIGdwdVJlbmRlclRhcmdldC5tc2FhVGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4ge1xuICAgICAgdGV4dHVyZS5kZXN0cm95KCk7XG4gICAgfSk7XG4gICAgZ3B1UmVuZGVyVGFyZ2V0Lm1zYWFUZXh0dXJlcy5sZW5ndGggPSAwO1xuICAgIGdwdVJlbmRlclRhcmdldC5jb250ZXh0cy5sZW5ndGggPSAwO1xuICB9XG4gIGVuc3VyZURlcHRoU3RlbmNpbFRleHR1cmUocmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3QgZ3B1UmVuZGVyVGFyZ2V0ID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtLmdldEdwdVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xuICAgIGlmIChyZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsVGV4dHVyZSAmJiBncHVSZW5kZXJUYXJnZXQubXNhYSkge1xuICAgICAgcmVuZGVyVGFyZ2V0LmRlcHRoU3RlbmNpbFRleHR1cmUuc291cmNlLnNhbXBsZUNvdW50ID0gNDtcbiAgICB9XG4gIH1cbiAgcmVzaXplR3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCkge1xuICAgIGNvbnN0IGdwdVJlbmRlclRhcmdldCA9IHRoaXMuX3JlbmRlclRhcmdldFN5c3RlbS5nZXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcbiAgICBncHVSZW5kZXJUYXJnZXQud2lkdGggPSByZW5kZXJUYXJnZXQud2lkdGg7XG4gICAgZ3B1UmVuZGVyVGFyZ2V0LmhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG4gICAgaWYgKGdwdVJlbmRlclRhcmdldC5tc2FhKSB7XG4gICAgICByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlcy5mb3JFYWNoKChjb2xvclRleHR1cmUsIGkpID0+IHtcbiAgICAgICAgY29uc3QgbXNhYVRleHR1cmUgPSBncHVSZW5kZXJUYXJnZXQubXNhYVRleHR1cmVzW2ldO1xuICAgICAgICBtc2FhVGV4dHVyZT8ucmVzaXplKFxuICAgICAgICAgIGNvbG9yVGV4dHVyZS5zb3VyY2Uud2lkdGgsXG4gICAgICAgICAgY29sb3JUZXh0dXJlLnNvdXJjZS5oZWlnaHQsXG4gICAgICAgICAgY29sb3JUZXh0dXJlLnNvdXJjZS5fcmVzb2x1dGlvblxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IEdwdVJlbmRlclRhcmdldEFkYXB0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdwdVJlbmRlclRhcmdldEFkYXB0b3IubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgUmVuZGVyVGFyZ2V0U3lzdGVtIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3JlbmRlclRhcmdldC9SZW5kZXJUYXJnZXRTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdwdVJlbmRlclRhcmdldEFkYXB0b3IgfSBmcm9tICcuL0dwdVJlbmRlclRhcmdldEFkYXB0b3IubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHcHVSZW5kZXJUYXJnZXRTeXN0ZW0gZXh0ZW5kcyBSZW5kZXJUYXJnZXRTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHN1cGVyKHJlbmRlcmVyKTtcbiAgICB0aGlzLmFkYXB0b3IgPSBuZXcgR3B1UmVuZGVyVGFyZ2V0QWRhcHRvcigpO1xuICAgIHRoaXMuYWRhcHRvci5pbml0KHJlbmRlcmVyLCB0aGlzKTtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdwdVJlbmRlclRhcmdldFN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtFeHRlbnNpb25UeXBlLldlYkdQVVN5c3RlbV0sXG4gIG5hbWU6IFwicmVuZGVyVGFyZ2V0XCJcbn07XG5cbmV4cG9ydCB7IEdwdVJlbmRlclRhcmdldFN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1UmVuZGVyVGFyZ2V0U3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHcHVTaGFkZXJTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9ncHVQcm9ncmFtRGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ3B1KSB7XG4gICAgdGhpcy5fZ3B1ID0gZ3B1O1xuICAgIHRoaXMubWF4VGV4dHVyZXMgPSBncHUuZGV2aWNlLmxpbWl0cy5tYXhTYW1wbGVkVGV4dHVyZXNQZXJTaGFkZXJTdGFnZTtcbiAgfVxuICBnZXRQcm9ncmFtRGF0YShwcm9ncmFtKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dwdVByb2dyYW1EYXRhW3Byb2dyYW0uX2xheW91dEtleV0gfHwgdGhpcy5fY3JlYXRlR1BVUHJvZ3JhbURhdGEocHJvZ3JhbSk7XG4gIH1cbiAgX2NyZWF0ZUdQVVByb2dyYW1EYXRhKHByb2dyYW0pIHtcbiAgICBjb25zdCBkZXZpY2UgPSB0aGlzLl9ncHUuZGV2aWNlO1xuICAgIGNvbnN0IGJpbmRHcm91cHMgPSBwcm9ncmFtLmdwdUxheW91dC5tYXAoKGdyb3VwKSA9PiBkZXZpY2UuY3JlYXRlQmluZEdyb3VwTGF5b3V0KHsgZW50cmllczogZ3JvdXAgfSkpO1xuICAgIGNvbnN0IHBpcGVsaW5lTGF5b3V0RGVzYyA9IHsgYmluZEdyb3VwTGF5b3V0czogYmluZEdyb3VwcyB9O1xuICAgIHRoaXMuX2dwdVByb2dyYW1EYXRhW3Byb2dyYW0uX2xheW91dEtleV0gPSB7XG4gICAgICBiaW5kR3JvdXBzLFxuICAgICAgcGlwZWxpbmU6IGRldmljZS5jcmVhdGVQaXBlbGluZUxheW91dChwaXBlbGluZUxheW91dERlc2MpXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fZ3B1UHJvZ3JhbURhdGFbcHJvZ3JhbS5fbGF5b3V0S2V5XTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX2dwdSA9IG51bGw7XG4gICAgdGhpcy5fZ3B1UHJvZ3JhbURhdGEgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR3B1U2hhZGVyU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwic2hhZGVyXCJcbn07XG5cbmV4cG9ydCB7IEdwdVNoYWRlclN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1U2hhZGVyU3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgR3B1QmxlbmRNb2Rlc1RvUGl4aSA9IHt9O1xuR3B1QmxlbmRNb2Rlc1RvUGl4aS5ub3JtYWwgPSB7XG4gIGFscGhhOiB7XG4gICAgc3JjRmFjdG9yOiBcIm9uZVwiLFxuICAgIGRzdEZhY3RvcjogXCJvbmUtbWludXMtc3JjLWFscGhhXCIsXG4gICAgb3BlcmF0aW9uOiBcImFkZFwiXG4gIH0sXG4gIGNvbG9yOiB7XG4gICAgc3JjRmFjdG9yOiBcIm9uZVwiLFxuICAgIGRzdEZhY3RvcjogXCJvbmUtbWludXMtc3JjLWFscGhhXCIsXG4gICAgb3BlcmF0aW9uOiBcImFkZFwiXG4gIH1cbn07XG5HcHVCbGVuZE1vZGVzVG9QaXhpLmFkZCA9IHtcbiAgYWxwaGE6IHtcbiAgICBzcmNGYWN0b3I6IFwic3JjLWFscGhhXCIsXG4gICAgZHN0RmFjdG9yOiBcIm9uZS1taW51cy1zcmMtYWxwaGFcIixcbiAgICBvcGVyYXRpb246IFwiYWRkXCJcbiAgfSxcbiAgY29sb3I6IHtcbiAgICBzcmNGYWN0b3I6IFwib25lXCIsXG4gICAgZHN0RmFjdG9yOiBcIm9uZVwiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9XG59O1xuR3B1QmxlbmRNb2Rlc1RvUGl4aS5tdWx0aXBseSA9IHtcbiAgYWxwaGE6IHtcbiAgICBzcmNGYWN0b3I6IFwib25lXCIsXG4gICAgZHN0RmFjdG9yOiBcIm9uZS1taW51cy1zcmMtYWxwaGFcIixcbiAgICBvcGVyYXRpb246IFwiYWRkXCJcbiAgfSxcbiAgY29sb3I6IHtcbiAgICBzcmNGYWN0b3I6IFwiZHN0XCIsXG4gICAgZHN0RmFjdG9yOiBcIm9uZS1taW51cy1zcmMtYWxwaGFcIixcbiAgICBvcGVyYXRpb246IFwiYWRkXCJcbiAgfVxufTtcbkdwdUJsZW5kTW9kZXNUb1BpeGkuc2NyZWVuID0ge1xuICBhbHBoYToge1xuICAgIHNyY0ZhY3RvcjogXCJvbmVcIixcbiAgICBkc3RGYWN0b3I6IFwib25lLW1pbnVzLXNyYy1hbHBoYVwiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9LFxuICBjb2xvcjoge1xuICAgIHNyY0ZhY3RvcjogXCJvbmVcIixcbiAgICBkc3RGYWN0b3I6IFwib25lLW1pbnVzLXNyY1wiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9XG59O1xuR3B1QmxlbmRNb2Rlc1RvUGl4aS5vdmVybGF5ID0ge1xuICBhbHBoYToge1xuICAgIHNyY0ZhY3RvcjogXCJvbmVcIixcbiAgICBkc3RGYWN0b3I6IFwib25lLW1pbnVzLXNyYy1hbHBoYVwiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9LFxuICBjb2xvcjoge1xuICAgIHNyY0ZhY3RvcjogXCJvbmVcIixcbiAgICBkc3RGYWN0b3I6IFwib25lLW1pbnVzLXNyY1wiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9XG59O1xuR3B1QmxlbmRNb2Rlc1RvUGl4aS5ub25lID0ge1xuICBhbHBoYToge1xuICAgIHNyY0ZhY3RvcjogXCJvbmVcIixcbiAgICBkc3RGYWN0b3I6IFwib25lLW1pbnVzLXNyYy1hbHBoYVwiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9LFxuICBjb2xvcjoge1xuICAgIHNyY0ZhY3RvcjogXCJ6ZXJvXCIsXG4gICAgZHN0RmFjdG9yOiBcInplcm9cIixcbiAgICBvcGVyYXRpb246IFwiYWRkXCJcbiAgfVxufTtcbkdwdUJsZW5kTW9kZXNUb1BpeGlbXCJub3JtYWwtbnBtXCJdID0ge1xuICBhbHBoYToge1xuICAgIHNyY0ZhY3RvcjogXCJvbmVcIixcbiAgICBkc3RGYWN0b3I6IFwib25lLW1pbnVzLXNyYy1hbHBoYVwiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9LFxuICBjb2xvcjoge1xuICAgIHNyY0ZhY3RvcjogXCJzcmMtYWxwaGFcIixcbiAgICBkc3RGYWN0b3I6IFwib25lLW1pbnVzLXNyYy1hbHBoYVwiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9XG59O1xuR3B1QmxlbmRNb2Rlc1RvUGl4aVtcImFkZC1ucG1cIl0gPSB7XG4gIGFscGhhOiB7XG4gICAgc3JjRmFjdG9yOiBcIm9uZVwiLFxuICAgIGRzdEZhY3RvcjogXCJvbmVcIixcbiAgICBvcGVyYXRpb246IFwiYWRkXCJcbiAgfSxcbiAgY29sb3I6IHtcbiAgICBzcmNGYWN0b3I6IFwic3JjLWFscGhhXCIsXG4gICAgZHN0RmFjdG9yOiBcIm9uZVwiLFxuICAgIG9wZXJhdGlvbjogXCJhZGRcIlxuICB9XG59O1xuR3B1QmxlbmRNb2Rlc1RvUGl4aVtcInNjcmVlbi1ucG1cIl0gPSB7XG4gIGFscGhhOiB7XG4gICAgc3JjRmFjdG9yOiBcIm9uZVwiLFxuICAgIGRzdEZhY3RvcjogXCJvbmUtbWludXMtc3JjLWFscGhhXCIsXG4gICAgb3BlcmF0aW9uOiBcImFkZFwiXG4gIH0sXG4gIGNvbG9yOiB7XG4gICAgc3JjRmFjdG9yOiBcInNyYy1hbHBoYVwiLFxuICAgIGRzdEZhY3RvcjogXCJvbmUtbWludXMtc3JjXCIsXG4gICAgb3BlcmF0aW9uOiBcImFkZFwiXG4gIH1cbn07XG5HcHVCbGVuZE1vZGVzVG9QaXhpLmVyYXNlID0ge1xuICBhbHBoYToge1xuICAgIHNyY0ZhY3RvcjogXCJ6ZXJvXCIsXG4gICAgZHN0RmFjdG9yOiBcIm9uZS1taW51cy1zcmMtYWxwaGFcIixcbiAgICBvcGVyYXRpb246IFwiYWRkXCJcbiAgfSxcbiAgY29sb3I6IHtcbiAgICBzcmNGYWN0b3I6IFwiemVyb1wiLFxuICAgIGRzdEZhY3RvcjogXCJvbmUtbWludXMtc3JjXCIsXG4gICAgb3BlcmF0aW9uOiBcImFkZFwiXG4gIH1cbn07XG5HcHVCbGVuZE1vZGVzVG9QaXhpLm1pbiA9IHtcbiAgYWxwaGE6IHtcbiAgICBzcmNGYWN0b3I6IFwib25lXCIsXG4gICAgZHN0RmFjdG9yOiBcIm9uZVwiLFxuICAgIG9wZXJhdGlvbjogXCJtaW5cIlxuICB9LFxuICBjb2xvcjoge1xuICAgIHNyY0ZhY3RvcjogXCJvbmVcIixcbiAgICBkc3RGYWN0b3I6IFwib25lXCIsXG4gICAgb3BlcmF0aW9uOiBcIm1pblwiXG4gIH1cbn07XG5HcHVCbGVuZE1vZGVzVG9QaXhpLm1heCA9IHtcbiAgYWxwaGE6IHtcbiAgICBzcmNGYWN0b3I6IFwib25lXCIsXG4gICAgZHN0RmFjdG9yOiBcIm9uZVwiLFxuICAgIG9wZXJhdGlvbjogXCJtYXhcIlxuICB9LFxuICBjb2xvcjoge1xuICAgIHNyY0ZhY3RvcjogXCJvbmVcIixcbiAgICBkc3RGYWN0b3I6IFwib25lXCIsXG4gICAgb3BlcmF0aW9uOiBcIm1heFwiXG4gIH1cbn07XG5cbmV4cG9ydCB7IEdwdUJsZW5kTW9kZXNUb1BpeGkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdwdUJsZW5kTW9kZXNUb1BpeGkubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvc3RhdGUvU3RhdGUubWpzJztcbmltcG9ydCB7IEdwdUJsZW5kTW9kZXNUb1BpeGkgfSBmcm9tICcuL0dwdUJsZW5kTW9kZXNUb1BpeGkubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHcHVTdGF0ZVN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGVmYXVsdFN0YXRlID0gbmV3IFN0YXRlKCk7XG4gICAgdGhpcy5kZWZhdWx0U3RhdGUuYmxlbmQgPSB0cnVlO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ3B1KSB7XG4gICAgdGhpcy5ncHUgPSBncHU7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGJsZW5kIG1vZGUgZGF0YSBmb3IgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICogQHBhcmFtIHN0YXRlIC0gVGhlIHN0YXRlIHRvIGdldCB0aGUgYmxlbmQgbW9kZSBmcm9tXG4gICAqL1xuICBnZXRDb2xvclRhcmdldHMoc3RhdGUpIHtcbiAgICBjb25zdCBibGVuZCA9IEdwdUJsZW5kTW9kZXNUb1BpeGlbc3RhdGUuYmxlbmRNb2RlXSB8fCBHcHVCbGVuZE1vZGVzVG9QaXhpLm5vcm1hbDtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICBmb3JtYXQ6IFwiYmdyYTh1bm9ybVwiLFxuICAgICAgICB3cml0ZU1hc2s6IDAsXG4gICAgICAgIGJsZW5kXG4gICAgICB9XG4gICAgXTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZ3B1ID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdwdVN0YXRlU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwic3RhdGVcIlxufTtcblxuZXhwb3J0IHsgR3B1U3RhdGVTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdwdVN0YXRlU3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZ3B1VXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZSA9IHtcbiAgdHlwZTogXCJpbWFnZVwiLFxuICB1cGxvYWQoc291cmNlLCBncHVUZXh0dXJlLCBncHUpIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IHNvdXJjZS5yZXNvdXJjZTtcbiAgICBjb25zdCB0b3RhbCA9IChzb3VyY2UucGl4ZWxXaWR0aCB8IDApICogKHNvdXJjZS5waXhlbEhlaWdodCB8IDApO1xuICAgIGNvbnN0IGJ5dGVzUGVyUGl4ZWwgPSByZXNvdXJjZS5ieXRlTGVuZ3RoIC8gdG90YWw7XG4gICAgZ3B1LmRldmljZS5xdWV1ZS53cml0ZVRleHR1cmUoXG4gICAgICB7IHRleHR1cmU6IGdwdVRleHR1cmUgfSxcbiAgICAgIHJlc291cmNlLFxuICAgICAge1xuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIHJvd3NQZXJJbWFnZTogc291cmNlLnBpeGVsSGVpZ2h0LFxuICAgICAgICBieXRlc1BlclJvdzogc291cmNlLnBpeGVsSGVpZ2h0ICogYnl0ZXNQZXJQaXhlbFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgd2lkdGg6IHNvdXJjZS5waXhlbFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IHNvdXJjZS5waXhlbEhlaWdodCxcbiAgICAgICAgZGVwdGhPckFycmF5TGF5ZXJzOiAxXG4gICAgICB9XG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ3B1VXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3B1VXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGJsb2NrRGF0YU1hcCA9IHtcbiAgXCJiYzEtcmdiYS11bm9ybVwiOiB7IGJsb2NrQnl0ZXM6IDgsIGJsb2NrV2lkdGg6IDQsIGJsb2NrSGVpZ2h0OiA0IH0sXG4gIFwiYmMyLXJnYmEtdW5vcm1cIjogeyBibG9ja0J5dGVzOiAxNiwgYmxvY2tXaWR0aDogNCwgYmxvY2tIZWlnaHQ6IDQgfSxcbiAgXCJiYzMtcmdiYS11bm9ybVwiOiB7IGJsb2NrQnl0ZXM6IDE2LCBibG9ja1dpZHRoOiA0LCBibG9ja0hlaWdodDogNCB9LFxuICBcImJjNy1yZ2JhLXVub3JtXCI6IHsgYmxvY2tCeXRlczogMTYsIGJsb2NrV2lkdGg6IDQsIGJsb2NrSGVpZ2h0OiA0IH0sXG4gIFwiZXRjMS1yZ2ItdW5vcm1cIjogeyBibG9ja0J5dGVzOiA4LCBibG9ja1dpZHRoOiA0LCBibG9ja0hlaWdodDogNCB9LFxuICBcImV0YzItcmdiYTh1bm9ybVwiOiB7IGJsb2NrQnl0ZXM6IDE2LCBibG9ja1dpZHRoOiA0LCBibG9ja0hlaWdodDogNCB9LFxuICBcImFzdGMtNHg0LXVub3JtXCI6IHsgYmxvY2tCeXRlczogMTYsIGJsb2NrV2lkdGg6IDQsIGJsb2NrSGVpZ2h0OiA0IH1cbn07XG5jb25zdCBkZWZhdWx0QmxvY2tEYXRhID0geyBibG9ja0J5dGVzOiA0LCBibG9ja1dpZHRoOiAxLCBibG9ja0hlaWdodDogMSB9O1xuY29uc3QgZ3B1VXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZSA9IHtcbiAgdHlwZTogXCJjb21wcmVzc2VkXCIsXG4gIHVwbG9hZChzb3VyY2UsIGdwdVRleHR1cmUsIGdwdSkge1xuICAgIGxldCBtaXBXaWR0aCA9IHNvdXJjZS5waXhlbFdpZHRoO1xuICAgIGxldCBtaXBIZWlnaHQgPSBzb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgY29uc3QgYmxvY2tEYXRhID0gYmxvY2tEYXRhTWFwW3NvdXJjZS5mb3JtYXRdIHx8IGRlZmF1bHRCbG9ja0RhdGE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UucmVzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxldmVsQnVmZmVyID0gc291cmNlLnJlc291cmNlW2ldO1xuICAgICAgY29uc3QgYnl0ZXNQZXJSb3cgPSBNYXRoLmNlaWwobWlwV2lkdGggLyBibG9ja0RhdGEuYmxvY2tXaWR0aCkgKiBibG9ja0RhdGEuYmxvY2tCeXRlcztcbiAgICAgIGdwdS5kZXZpY2UucXVldWUud3JpdGVUZXh0dXJlKFxuICAgICAgICB7XG4gICAgICAgICAgdGV4dHVyZTogZ3B1VGV4dHVyZSxcbiAgICAgICAgICBtaXBMZXZlbDogaVxuICAgICAgICB9LFxuICAgICAgICBsZXZlbEJ1ZmZlcixcbiAgICAgICAge1xuICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICBieXRlc1BlclJvd1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgd2lkdGg6IE1hdGguY2VpbChtaXBXaWR0aCAvIGJsb2NrRGF0YS5ibG9ja1dpZHRoKSAqIGJsb2NrRGF0YS5ibG9ja1dpZHRoLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5jZWlsKG1pcEhlaWdodCAvIGJsb2NrRGF0YS5ibG9ja0hlaWdodCkgKiBibG9ja0RhdGEuYmxvY2tIZWlnaHQsXG4gICAgICAgICAgZGVwdGhPckFycmF5TGF5ZXJzOiAxXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBtaXBXaWR0aCA9IE1hdGgubWF4KG1pcFdpZHRoID4+IDEsIDEpO1xuICAgICAgbWlwSGVpZ2h0ID0gTWF0aC5tYXgobWlwSGVpZ2h0ID4+IDEsIDEpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgYmxvY2tEYXRhTWFwLCBncHVVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncHVVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZ3B1VXBsb2FkSW1hZ2VSZXNvdXJjZSA9IHtcbiAgdHlwZTogXCJpbWFnZVwiLFxuICB1cGxvYWQoc291cmNlLCBncHVUZXh0dXJlLCBncHUpIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IHNvdXJjZS5yZXNvdXJjZTtcbiAgICBpZiAoIXJlc291cmNlKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5taW4oZ3B1VGV4dHVyZS53aWR0aCwgc291cmNlLnJlc291cmNlV2lkdGggfHwgc291cmNlLnBpeGVsV2lkdGgpO1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWluKGdwdVRleHR1cmUuaGVpZ2h0LCBzb3VyY2UucmVzb3VyY2VIZWlnaHQgfHwgc291cmNlLnBpeGVsSGVpZ2h0KTtcbiAgICBjb25zdCBwcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UuYWxwaGFNb2RlID09PSBcInByZW11bHRpcGx5LWFscGhhLW9uLXVwbG9hZFwiO1xuICAgIGdwdS5kZXZpY2UucXVldWUuY29weUV4dGVybmFsSW1hZ2VUb1RleHR1cmUoXG4gICAgICB7IHNvdXJjZTogcmVzb3VyY2UgfSxcbiAgICAgIHsgdGV4dHVyZTogZ3B1VGV4dHVyZSwgcHJlbXVsdGlwbGllZEFscGhhIH0sXG4gICAgICB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgIH1cbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgeyBncHVVcGxvYWRJbWFnZVJlc291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncHVVcGxvYWRJbWFnZVNvdXJjZS5tanMubWFwXG4iLCJpbXBvcnQgeyBncHVVcGxvYWRJbWFnZVJlc291cmNlIH0gZnJvbSAnLi9ncHVVcGxvYWRJbWFnZVNvdXJjZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IGdwdVVwbG9hZFZpZGVvUmVzb3VyY2UgPSB7XG4gIHR5cGU6IFwidmlkZW9cIixcbiAgdXBsb2FkKHNvdXJjZSwgZ3B1VGV4dHVyZSwgZ3B1KSB7XG4gICAgZ3B1VXBsb2FkSW1hZ2VSZXNvdXJjZS51cGxvYWQoc291cmNlLCBncHVUZXh0dXJlLCBncHUpO1xuICB9XG59O1xuXG5leHBvcnQgeyBncHVVcGxvYWRWaWRlb1Jlc291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncHVVcGxvYWRWaWRlb1NvdXJjZS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdwdU1pcG1hcEdlbmVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKGRldmljZSkge1xuICAgIHRoaXMuZGV2aWNlID0gZGV2aWNlO1xuICAgIHRoaXMuc2FtcGxlciA9IGRldmljZS5jcmVhdGVTYW1wbGVyKHsgbWluRmlsdGVyOiBcImxpbmVhclwiIH0pO1xuICAgIHRoaXMucGlwZWxpbmVzID0ge307XG4gIH1cbiAgX2dldE1pcG1hcFBpcGVsaW5lKGZvcm1hdCkge1xuICAgIGxldCBwaXBlbGluZSA9IHRoaXMucGlwZWxpbmVzW2Zvcm1hdF07XG4gICAgaWYgKCFwaXBlbGluZSkge1xuICAgICAgaWYgKCF0aGlzLm1pcG1hcFNoYWRlck1vZHVsZSkge1xuICAgICAgICB0aGlzLm1pcG1hcFNoYWRlck1vZHVsZSA9IHRoaXMuZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG4gICAgICAgICAgY29kZTogKFxuICAgICAgICAgICAgLyogd2dzbCAqL1xuICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyPHByaXZhdGU+IHBvcyA6IGFycmF5PHZlYzI8ZjMyPiwgMz4gPSBhcnJheTx2ZWMyPGYzMj4sIDM+KFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVjMjxmMzI+KC0xLjAsIC0xLjApLCB2ZWMyPGYzMj4oLTEuMCwgMy4wKSwgdmVjMjxmMzI+KDMuMCwgLTEuMCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgVmVydGV4T3V0cHV0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbiA6IHZlYzQ8ZjMyPixcbiAgICAgICAgICAgICAgICAgICAgICAgIEBsb2NhdGlvbigwKSB0ZXhDb29yZCA6IHZlYzI8ZjMyPixcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIEB2ZXJ0ZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuIHZlcnRleE1haW4oQGJ1aWx0aW4odmVydGV4X2luZGV4KSB2ZXJ0ZXhJbmRleCA6IHUzMikgLT4gVmVydGV4T3V0cHV0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgOiBWZXJ0ZXhPdXRwdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQudGV4Q29vcmQgPSBwb3NbdmVydGV4SW5kZXhdICogdmVjMjxmMzI+KDAuNSwgLTAuNSkgKyB2ZWMyPGYzMj4oMC41KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5wb3NpdGlvbiA9IHZlYzQ8ZjMyPihwb3NbdmVydGV4SW5kZXhdLCAwLjAsIDEuMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBAZ3JvdXAoMCkgQGJpbmRpbmcoMCkgdmFyIGltZ1NhbXBsZXIgOiBzYW1wbGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKDEpIHZhciBpbWcgOiB0ZXh0dXJlXzJkPGYzMj47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIEBmcmFnbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgZm4gZnJhZ21lbnRNYWluKEBsb2NhdGlvbigwKSB0ZXhDb29yZCA6IHZlYzI8ZjMyPikgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZVNhbXBsZShpbWcsIGltZ1NhbXBsZXIsIHRleENvb3JkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgIClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBwaXBlbGluZSA9IHRoaXMuZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHtcbiAgICAgICAgbGF5b3V0OiBcImF1dG9cIixcbiAgICAgICAgdmVydGV4OiB7XG4gICAgICAgICAgbW9kdWxlOiB0aGlzLm1pcG1hcFNoYWRlck1vZHVsZSxcbiAgICAgICAgICBlbnRyeVBvaW50OiBcInZlcnRleE1haW5cIlxuICAgICAgICB9LFxuICAgICAgICBmcmFnbWVudDoge1xuICAgICAgICAgIG1vZHVsZTogdGhpcy5taXBtYXBTaGFkZXJNb2R1bGUsXG4gICAgICAgICAgZW50cnlQb2ludDogXCJmcmFnbWVudE1haW5cIixcbiAgICAgICAgICB0YXJnZXRzOiBbeyBmb3JtYXQgfV1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnBpcGVsaW5lc1tmb3JtYXRdID0gcGlwZWxpbmU7XG4gICAgfVxuICAgIHJldHVybiBwaXBlbGluZTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIG1pcG1hcHMgZm9yIHRoZSBnaXZlbiBHUFVUZXh0dXJlIGZyb20gdGhlIGRhdGEgaW4gbGV2ZWwgMC5cbiAgICogQHBhcmFtIHttb2R1bGU6RXh0ZXJuYWwuR1BVVGV4dHVyZX0gdGV4dHVyZSAtIFRleHR1cmUgdG8gZ2VuZXJhdGUgbWlwbWFwcyBmb3IuXG4gICAqIEByZXR1cm5zIHttb2R1bGU6RXh0ZXJuYWwuR1BVVGV4dHVyZX0gLSBUaGUgb3JpZ2luYWxseSBwYXNzZWQgdGV4dHVyZVxuICAgKi9cbiAgZ2VuZXJhdGVNaXBtYXAodGV4dHVyZSkge1xuICAgIGNvbnN0IHBpcGVsaW5lID0gdGhpcy5fZ2V0TWlwbWFwUGlwZWxpbmUodGV4dHVyZS5mb3JtYXQpO1xuICAgIGlmICh0ZXh0dXJlLmRpbWVuc2lvbiA9PT0gXCIzZFwiIHx8IHRleHR1cmUuZGltZW5zaW9uID09PSBcIjFkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRpbmcgbWlwbWFwcyBmb3Igbm9uLTJkIHRleHR1cmVzIGlzIGN1cnJlbnRseSB1bnN1cHBvcnRlZCFcIik7XG4gICAgfVxuICAgIGxldCBtaXBUZXh0dXJlID0gdGV4dHVyZTtcbiAgICBjb25zdCBhcnJheUxheWVyQ291bnQgPSB0ZXh0dXJlLmRlcHRoT3JBcnJheUxheWVycyB8fCAxO1xuICAgIGNvbnN0IHJlbmRlclRvU291cmNlID0gdGV4dHVyZS51c2FnZSAmIEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVDtcbiAgICBpZiAoIXJlbmRlclRvU291cmNlKSB7XG4gICAgICBjb25zdCBtaXBUZXh0dXJlRGVzY3JpcHRvciA9IHtcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgIHdpZHRoOiBNYXRoLmNlaWwodGV4dHVyZS53aWR0aCAvIDIpLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5jZWlsKHRleHR1cmUuaGVpZ2h0IC8gMiksXG4gICAgICAgICAgZGVwdGhPckFycmF5TGF5ZXJzOiBhcnJheUxheWVyQ291bnRcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0OiB0ZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgdXNhZ2U6IEdQVVRleHR1cmVVc2FnZS5URVhUVVJFX0JJTkRJTkcgfCBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9TUkMgfCBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlQsXG4gICAgICAgIG1pcExldmVsQ291bnQ6IHRleHR1cmUubWlwTGV2ZWxDb3VudCAtIDFcbiAgICAgIH07XG4gICAgICBtaXBUZXh0dXJlID0gdGhpcy5kZXZpY2UuY3JlYXRlVGV4dHVyZShtaXBUZXh0dXJlRGVzY3JpcHRvcik7XG4gICAgfVxuICAgIGNvbnN0IGNvbW1hbmRFbmNvZGVyID0gdGhpcy5kZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoe30pO1xuICAgIGNvbnN0IGJpbmRHcm91cExheW91dCA9IHBpcGVsaW5lLmdldEJpbmRHcm91cExheW91dCgwKTtcbiAgICBmb3IgKGxldCBhcnJheUxheWVyID0gMDsgYXJyYXlMYXllciA8IGFycmF5TGF5ZXJDb3VudDsgKythcnJheUxheWVyKSB7XG4gICAgICBsZXQgc3JjVmlldyA9IHRleHR1cmUuY3JlYXRlVmlldyh7XG4gICAgICAgIGJhc2VNaXBMZXZlbDogMCxcbiAgICAgICAgbWlwTGV2ZWxDb3VudDogMSxcbiAgICAgICAgZGltZW5zaW9uOiBcIjJkXCIsXG4gICAgICAgIGJhc2VBcnJheUxheWVyOiBhcnJheUxheWVyLFxuICAgICAgICBhcnJheUxheWVyQ291bnQ6IDFcbiAgICAgIH0pO1xuICAgICAgbGV0IGRzdE1pcExldmVsID0gcmVuZGVyVG9Tb3VyY2UgPyAxIDogMDtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGV4dHVyZS5taXBMZXZlbENvdW50OyArK2kpIHtcbiAgICAgICAgY29uc3QgZHN0VmlldyA9IG1pcFRleHR1cmUuY3JlYXRlVmlldyh7XG4gICAgICAgICAgYmFzZU1pcExldmVsOiBkc3RNaXBMZXZlbCsrLFxuICAgICAgICAgIG1pcExldmVsQ291bnQ6IDEsXG4gICAgICAgICAgZGltZW5zaW9uOiBcIjJkXCIsXG4gICAgICAgICAgYmFzZUFycmF5TGF5ZXI6IGFycmF5TGF5ZXIsXG4gICAgICAgICAgYXJyYXlMYXllckNvdW50OiAxXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwYXNzRW5jb2RlciA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyh7XG4gICAgICAgICAgY29sb3JBdHRhY2htZW50czogW3tcbiAgICAgICAgICAgIHZpZXc6IGRzdFZpZXcsXG4gICAgICAgICAgICBzdG9yZU9wOiBcInN0b3JlXCIsXG4gICAgICAgICAgICBsb2FkT3A6IFwiY2xlYXJcIixcbiAgICAgICAgICAgIGNsZWFyVmFsdWU6IHsgcjogMCwgZzogMCwgYjogMCwgYTogMCB9XG4gICAgICAgICAgfV1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGJpbmRHcm91cCA9IHRoaXMuZGV2aWNlLmNyZWF0ZUJpbmRHcm91cCh7XG4gICAgICAgICAgbGF5b3V0OiBiaW5kR3JvdXBMYXlvdXQsXG4gICAgICAgICAgZW50cmllczogW3tcbiAgICAgICAgICAgIGJpbmRpbmc6IDAsXG4gICAgICAgICAgICByZXNvdXJjZTogdGhpcy5zYW1wbGVyXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgYmluZGluZzogMSxcbiAgICAgICAgICAgIHJlc291cmNlOiBzcmNWaWV3XG4gICAgICAgICAgfV1cbiAgICAgICAgfSk7XG4gICAgICAgIHBhc3NFbmNvZGVyLnNldFBpcGVsaW5lKHBpcGVsaW5lKTtcbiAgICAgICAgcGFzc0VuY29kZXIuc2V0QmluZEdyb3VwKDAsIGJpbmRHcm91cCk7XG4gICAgICAgIHBhc3NFbmNvZGVyLmRyYXcoMywgMSwgMCwgMCk7XG4gICAgICAgIHBhc3NFbmNvZGVyLmVuZCgpO1xuICAgICAgICBzcmNWaWV3ID0gZHN0VmlldztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFyZW5kZXJUb1NvdXJjZSkge1xuICAgICAgY29uc3QgbWlwTGV2ZWxTaXplID0ge1xuICAgICAgICB3aWR0aDogTWF0aC5jZWlsKHRleHR1cmUud2lkdGggLyAyKSxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLmNlaWwodGV4dHVyZS5oZWlnaHQgLyAyKSxcbiAgICAgICAgZGVwdGhPckFycmF5TGF5ZXJzOiBhcnJheUxheWVyQ291bnRcbiAgICAgIH07XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRleHR1cmUubWlwTGV2ZWxDb3VudDsgKytpKSB7XG4gICAgICAgIGNvbW1hbmRFbmNvZGVyLmNvcHlUZXh0dXJlVG9UZXh0dXJlKHtcbiAgICAgICAgICB0ZXh0dXJlOiBtaXBUZXh0dXJlLFxuICAgICAgICAgIG1pcExldmVsOiBpIC0gMVxuICAgICAgICB9LCB7XG4gICAgICAgICAgdGV4dHVyZSxcbiAgICAgICAgICBtaXBMZXZlbDogaVxuICAgICAgICB9LCBtaXBMZXZlbFNpemUpO1xuICAgICAgICBtaXBMZXZlbFNpemUud2lkdGggPSBNYXRoLmNlaWwobWlwTGV2ZWxTaXplLndpZHRoIC8gMik7XG4gICAgICAgIG1pcExldmVsU2l6ZS5oZWlnaHQgPSBNYXRoLmNlaWwobWlwTGV2ZWxTaXplLmhlaWdodCAvIDIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRldmljZS5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG4gICAgaWYgKCFyZW5kZXJUb1NvdXJjZSkge1xuICAgICAgbWlwVGV4dHVyZS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9XG59XG5cbmV4cG9ydCB7IEdwdU1pcG1hcEdlbmVyYXRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1TWlwbWFwR2VuZXJhdG9yLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5pbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi9zaGFyZWQvc2hhZGVyL1VuaWZvcm1Hcm91cC5tanMnO1xuaW1wb3J0IHsgQ2FudmFzUG9vbCB9IGZyb20gJy4uLy4uL3NoYXJlZC90ZXh0dXJlL0NhbnZhc1Bvb2wubWpzJztcbmltcG9ydCB7IEJpbmRHcm91cCB9IGZyb20gJy4uL3NoYWRlci9CaW5kR3JvdXAubWpzJztcbmltcG9ydCB7IGdwdVVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UgfSBmcm9tICcuL3VwbG9hZGVycy9ncHVVcGxvYWRCdWZmZXJJbWFnZVJlc291cmNlLm1qcyc7XG5pbXBvcnQgeyBncHVVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLCBibG9ja0RhdGFNYXAgfSBmcm9tICcuL3VwbG9hZGVycy9ncHVVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLm1qcyc7XG5pbXBvcnQgeyBncHVVcGxvYWRJbWFnZVJlc291cmNlIH0gZnJvbSAnLi91cGxvYWRlcnMvZ3B1VXBsb2FkSW1hZ2VTb3VyY2UubWpzJztcbmltcG9ydCB7IGdwdVVwbG9hZFZpZGVvUmVzb3VyY2UgfSBmcm9tICcuL3VwbG9hZGVycy9ncHVVcGxvYWRWaWRlb1NvdXJjZS5tanMnO1xuaW1wb3J0IHsgR3B1TWlwbWFwR2VuZXJhdG9yIH0gZnJvbSAnLi91dGlscy9HcHVNaXBtYXBHZW5lcmF0b3IubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHcHVUZXh0dXJlU3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLm1hbmFnZWRUZXh0dXJlcyA9IFtdO1xuICAgIHRoaXMuX2dwdVNvdXJjZXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ncHVTYW1wbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2JpbmRHcm91cEhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl90ZXh0dXJlVmlld0hhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl91cGxvYWRzID0ge1xuICAgICAgaW1hZ2U6IGdwdVVwbG9hZEltYWdlUmVzb3VyY2UsXG4gICAgICBidWZmZXI6IGdwdVVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UsXG4gICAgICB2aWRlbzogZ3B1VXBsb2FkVmlkZW9SZXNvdXJjZSxcbiAgICAgIGNvbXByZXNzZWQ6IGdwdVVwbG9hZENvbXByZXNzZWRUZXh0dXJlUmVzb3VyY2VcbiAgICB9O1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgY29udGV4dENoYW5nZShncHUpIHtcbiAgICB0aGlzLl9ncHUgPSBncHU7XG4gIH1cbiAgaW5pdFNvdXJjZShzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmF1dG9HZW5lcmF0ZU1pcG1hcHMpIHtcbiAgICAgIGNvbnN0IGJpZ2dlc3REaW1lbnNpb24gPSBNYXRoLm1heChzb3VyY2UucGl4ZWxXaWR0aCwgc291cmNlLnBpeGVsSGVpZ2h0KTtcbiAgICAgIHNvdXJjZS5taXBMZXZlbENvdW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZzIoYmlnZ2VzdERpbWVuc2lvbikpICsgMTtcbiAgICB9XG4gICAgbGV0IHVzYWdlID0gR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX0RTVDtcbiAgICBpZiAoc291cmNlLnVwbG9hZE1ldGhvZElkICE9PSBcImNvbXByZXNzZWRcIikge1xuICAgICAgdXNhZ2UgfD0gR1BVVGV4dHVyZVVzYWdlLlJFTkRFUl9BVFRBQ0hNRU5UO1xuICAgICAgdXNhZ2UgfD0gR1BVVGV4dHVyZVVzYWdlLkNPUFlfU1JDO1xuICAgIH1cbiAgICBjb25zdCBibG9ja0RhdGEgPSBibG9ja0RhdGFNYXBbc291cmNlLmZvcm1hdF0gfHwgeyBibG9ja0J5dGVzOiA0LCBibG9ja1dpZHRoOiAxLCBibG9ja0hlaWdodDogMSB9O1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5jZWlsKHNvdXJjZS5waXhlbFdpZHRoIC8gYmxvY2tEYXRhLmJsb2NrV2lkdGgpICogYmxvY2tEYXRhLmJsb2NrV2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5jZWlsKHNvdXJjZS5waXhlbEhlaWdodCAvIGJsb2NrRGF0YS5ibG9ja0hlaWdodCkgKiBibG9ja0RhdGEuYmxvY2tIZWlnaHQ7XG4gICAgY29uc3QgdGV4dHVyZURlc2NyaXB0b3IgPSB7XG4gICAgICBsYWJlbDogc291cmNlLmxhYmVsLFxuICAgICAgc2l6ZTogeyB3aWR0aCwgaGVpZ2h0IH0sXG4gICAgICBmb3JtYXQ6IHNvdXJjZS5mb3JtYXQsXG4gICAgICBzYW1wbGVDb3VudDogc291cmNlLnNhbXBsZUNvdW50LFxuICAgICAgbWlwTGV2ZWxDb3VudDogc291cmNlLm1pcExldmVsQ291bnQsXG4gICAgICBkaW1lbnNpb246IHNvdXJjZS5kaW1lbnNpb24sXG4gICAgICB1c2FnZVxuICAgIH07XG4gICAgY29uc3QgZ3B1VGV4dHVyZSA9IHRoaXMuX2dwdS5kZXZpY2UuY3JlYXRlVGV4dHVyZSh0ZXh0dXJlRGVzY3JpcHRvcik7XG4gICAgdGhpcy5fZ3B1U291cmNlc1tzb3VyY2UudWlkXSA9IGdwdVRleHR1cmU7XG4gICAgaWYgKCF0aGlzLm1hbmFnZWRUZXh0dXJlcy5pbmNsdWRlcyhzb3VyY2UpKSB7XG4gICAgICBzb3VyY2Uub24oXCJ1cGRhdGVcIiwgdGhpcy5vblNvdXJjZVVwZGF0ZSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJyZXNpemVcIiwgdGhpcy5vblNvdXJjZVJlc2l6ZSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJkZXN0cm95XCIsIHRoaXMub25Tb3VyY2VEZXN0cm95LCB0aGlzKTtcbiAgICAgIHNvdXJjZS5vbihcInVubG9hZFwiLCB0aGlzLm9uU291cmNlVW5sb2FkLCB0aGlzKTtcbiAgICAgIHNvdXJjZS5vbihcInVwZGF0ZU1pcG1hcHNcIiwgdGhpcy5vblVwZGF0ZU1pcG1hcHMsIHRoaXMpO1xuICAgICAgdGhpcy5tYW5hZ2VkVGV4dHVyZXMucHVzaChzb3VyY2UpO1xuICAgIH1cbiAgICB0aGlzLm9uU291cmNlVXBkYXRlKHNvdXJjZSk7XG4gICAgcmV0dXJuIGdwdVRleHR1cmU7XG4gIH1cbiAgb25Tb3VyY2VVcGRhdGUoc291cmNlKSB7XG4gICAgY29uc3QgZ3B1VGV4dHVyZSA9IHRoaXMuZ2V0R3B1U291cmNlKHNvdXJjZSk7XG4gICAgaWYgKCFncHVUZXh0dXJlKVxuICAgICAgcmV0dXJuO1xuICAgIGlmICh0aGlzLl91cGxvYWRzW3NvdXJjZS51cGxvYWRNZXRob2RJZF0pIHtcbiAgICAgIHRoaXMuX3VwbG9hZHNbc291cmNlLnVwbG9hZE1ldGhvZElkXS51cGxvYWQoc291cmNlLCBncHVUZXh0dXJlLCB0aGlzLl9ncHUpO1xuICAgIH1cbiAgICBpZiAoc291cmNlLmF1dG9HZW5lcmF0ZU1pcG1hcHMgJiYgc291cmNlLm1pcExldmVsQ291bnQgPiAxKSB7XG4gICAgICB0aGlzLm9uVXBkYXRlTWlwbWFwcyhzb3VyY2UpO1xuICAgIH1cbiAgfVxuICBvblNvdXJjZVVubG9hZChzb3VyY2UpIHtcbiAgICBjb25zdCBncHVUZXh0dXJlID0gdGhpcy5fZ3B1U291cmNlc1tzb3VyY2UudWlkXTtcbiAgICBpZiAoZ3B1VGV4dHVyZSkge1xuICAgICAgdGhpcy5fZ3B1U291cmNlc1tzb3VyY2UudWlkXSA9IG51bGw7XG4gICAgICBncHVUZXh0dXJlLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgb25VcGRhdGVNaXBtYXBzKHNvdXJjZSkge1xuICAgIGlmICghdGhpcy5fbWlwbWFwR2VuZXJhdG9yKSB7XG4gICAgICB0aGlzLl9taXBtYXBHZW5lcmF0b3IgPSBuZXcgR3B1TWlwbWFwR2VuZXJhdG9yKHRoaXMuX2dwdS5kZXZpY2UpO1xuICAgIH1cbiAgICBjb25zdCBncHVUZXh0dXJlID0gdGhpcy5nZXRHcHVTb3VyY2Uoc291cmNlKTtcbiAgICB0aGlzLl9taXBtYXBHZW5lcmF0b3IuZ2VuZXJhdGVNaXBtYXAoZ3B1VGV4dHVyZSk7XG4gIH1cbiAgb25Tb3VyY2VEZXN0cm95KHNvdXJjZSkge1xuICAgIHNvdXJjZS5vZmYoXCJ1cGRhdGVcIiwgdGhpcy5vblNvdXJjZVVwZGF0ZSwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInVubG9hZFwiLCB0aGlzLm9uU291cmNlVW5sb2FkLCB0aGlzKTtcbiAgICBzb3VyY2Uub2ZmKFwiZGVzdHJveVwiLCB0aGlzLm9uU291cmNlRGVzdHJveSwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInJlc2l6ZVwiLCB0aGlzLm9uU291cmNlUmVzaXplLCB0aGlzKTtcbiAgICBzb3VyY2Uub2ZmKFwidXBkYXRlTWlwbWFwc1wiLCB0aGlzLm9uVXBkYXRlTWlwbWFwcywgdGhpcyk7XG4gICAgdGhpcy5tYW5hZ2VkVGV4dHVyZXMuc3BsaWNlKHRoaXMubWFuYWdlZFRleHR1cmVzLmluZGV4T2Yoc291cmNlKSwgMSk7XG4gICAgdGhpcy5vblNvdXJjZVVubG9hZChzb3VyY2UpO1xuICB9XG4gIG9uU291cmNlUmVzaXplKHNvdXJjZSkge1xuICAgIGNvbnN0IGdwdVRleHR1cmUgPSB0aGlzLl9ncHVTb3VyY2VzW3NvdXJjZS51aWRdO1xuICAgIGlmICghZ3B1VGV4dHVyZSkge1xuICAgICAgdGhpcy5pbml0U291cmNlKHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmIChncHVUZXh0dXJlLndpZHRoICE9PSBzb3VyY2UucGl4ZWxXaWR0aCB8fCBncHVUZXh0dXJlLmhlaWdodCAhPT0gc291cmNlLnBpeGVsSGVpZ2h0KSB7XG4gICAgICB0aGlzLl90ZXh0dXJlVmlld0hhc2hbc291cmNlLnVpZF0gPSBudWxsO1xuICAgICAgdGhpcy5fYmluZEdyb3VwSGFzaFtzb3VyY2UudWlkXSA9IG51bGw7XG4gICAgICB0aGlzLm9uU291cmNlVW5sb2FkKHNvdXJjZSk7XG4gICAgICB0aGlzLmluaXRTb3VyY2Uoc291cmNlKTtcbiAgICB9XG4gIH1cbiAgX2luaXRTYW1wbGVyKHNhbXBsZXIpIHtcbiAgICB0aGlzLl9ncHVTYW1wbGVyc1tzYW1wbGVyLl9yZXNvdXJjZUlkXSA9IHRoaXMuX2dwdS5kZXZpY2UuY3JlYXRlU2FtcGxlcihzYW1wbGVyKTtcbiAgICByZXR1cm4gdGhpcy5fZ3B1U2FtcGxlcnNbc2FtcGxlci5fcmVzb3VyY2VJZF07XG4gIH1cbiAgZ2V0R3B1U2FtcGxlcihzYW1wbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dwdVNhbXBsZXJzW3NhbXBsZXIuX3Jlc291cmNlSWRdIHx8IHRoaXMuX2luaXRTYW1wbGVyKHNhbXBsZXIpO1xuICB9XG4gIGdldEdwdVNvdXJjZShzb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3B1U291cmNlc1tzb3VyY2UudWlkXSB8fCB0aGlzLmluaXRTb3VyY2Uoc291cmNlKTtcbiAgfVxuICAvKipcbiAgICogdGhpcyByZXR1cm5zIHMgYmluZCBncm91cCBmb3IgYSBzcGVjaWZpYyB0ZXh0dXJlLCB0aGUgYmluZCBncm91cCBjb250YWluc1xuICAgKiAtIHRoZSB0ZXh0dXJlIHNvdXJjZVxuICAgKiAtIHRoZSB0ZXh0dXJlIHN0eWxlXG4gICAqIC0gdGhlIHRleHR1cmUgbWF0cml4XG4gICAqIFRoaXMgaXMgY2FjaGVkIHNvIHRoZSBiaW5kIGdyb3VwIHNob3VsZCBvbmx5IGJlIGNyZWF0ZWQgb25jZSBwZXIgdGV4dHVyZVxuICAgKiBAcGFyYW0gdGV4dHVyZSAtIHRoZSB0ZXh0dXJlIHlvdSB3YW50IHRoZSBiaW5kZ3JvdXAgZm9yXG4gICAqIEByZXR1cm5zIHRoZSBiaW5kIGdyb3VwIGZvciB0aGUgdGV4dHVyZVxuICAgKi9cbiAgZ2V0VGV4dHVyZUJpbmRHcm91cCh0ZXh0dXJlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JpbmRHcm91cEhhc2hbdGV4dHVyZS51aWRdID8/IHRoaXMuX2NyZWF0ZVRleHR1cmVCaW5kR3JvdXAodGV4dHVyZSk7XG4gIH1cbiAgX2NyZWF0ZVRleHR1cmVCaW5kR3JvdXAodGV4dHVyZSkge1xuICAgIGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuICAgIHRoaXMuX2JpbmRHcm91cEhhc2hbdGV4dHVyZS51aWRdID0gbmV3IEJpbmRHcm91cCh7XG4gICAgICAwOiBzb3VyY2UsXG4gICAgICAxOiBzb3VyY2Uuc3R5bGUsXG4gICAgICAyOiBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgICAgdVRleHR1cmVNYXRyaXg6IHsgdHlwZTogXCJtYXQzeDM8ZjMyPlwiLCB2YWx1ZTogdGV4dHVyZS50ZXh0dXJlTWF0cml4Lm1hcENvb3JkIH1cbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2JpbmRHcm91cEhhc2hbdGV4dHVyZS51aWRdO1xuICB9XG4gIGdldFRleHR1cmVWaWV3KHRleHR1cmUpIHtcbiAgICBjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcbiAgICByZXR1cm4gdGhpcy5fdGV4dHVyZVZpZXdIYXNoW3NvdXJjZS51aWRdID8/IHRoaXMuX2NyZWF0ZVRleHR1cmVWaWV3KHNvdXJjZSk7XG4gIH1cbiAgX2NyZWF0ZVRleHR1cmVWaWV3KHRleHR1cmUpIHtcbiAgICB0aGlzLl90ZXh0dXJlVmlld0hhc2hbdGV4dHVyZS51aWRdID0gdGhpcy5nZXRHcHVTb3VyY2UodGV4dHVyZSkuY3JlYXRlVmlldygpO1xuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlVmlld0hhc2hbdGV4dHVyZS51aWRdO1xuICB9XG4gIGdlbmVyYXRlQ2FudmFzKHRleHR1cmUpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGNvbnN0IGNvbW1hbmRFbmNvZGVyID0gcmVuZGVyZXIuZ3B1LmRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuICAgIGNvbnN0IGNhbnZhcyA9IERPTUFkYXB0ZXIuZ2V0KCkuY3JlYXRlQ2FudmFzKCk7XG4gICAgY2FudmFzLndpZHRoID0gdGV4dHVyZS5zb3VyY2UucGl4ZWxXaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gdGV4dHVyZS5zb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ3B1XCIpO1xuICAgIGNvbnRleHQuY29uZmlndXJlKHtcbiAgICAgIGRldmljZTogcmVuZGVyZXIuZ3B1LmRldmljZSxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICB1c2FnZTogR1BVVGV4dHVyZVVzYWdlLkNPUFlfRFNUIHwgR1BVVGV4dHVyZVVzYWdlLkNPUFlfU1JDLFxuICAgICAgZm9ybWF0OiBET01BZGFwdGVyLmdldCgpLmdldE5hdmlnYXRvcigpLmdwdS5nZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKSxcbiAgICAgIGFscGhhTW9kZTogXCJwcmVtdWx0aXBsaWVkXCJcbiAgICB9KTtcbiAgICBjb21tYW5kRW5jb2Rlci5jb3B5VGV4dHVyZVRvVGV4dHVyZSh7XG4gICAgICB0ZXh0dXJlOiByZW5kZXJlci50ZXh0dXJlLmdldEdwdVNvdXJjZSh0ZXh0dXJlLnNvdXJjZSksXG4gICAgICBvcmlnaW46IHtcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHRleHR1cmU6IGNvbnRleHQuZ2V0Q3VycmVudFRleHR1cmUoKVxuICAgIH0sIHtcbiAgICAgIHdpZHRoOiBjYW52YXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGNhbnZhcy5oZWlnaHRcbiAgICB9KTtcbiAgICByZW5kZXJlci5ncHUuZGV2aWNlLnF1ZXVlLnN1Ym1pdChbY29tbWFuZEVuY29kZXIuZmluaXNoKCldKTtcbiAgICByZXR1cm4gY2FudmFzO1xuICB9XG4gIGdldFBpeGVscyh0ZXh0dXJlKSB7XG4gICAgY29uc3Qgd2ViR1BVQ2FudmFzID0gdGhpcy5nZW5lcmF0ZUNhbnZhcyh0ZXh0dXJlKTtcbiAgICBjb25zdCBjYW52YXNBbmRDb250ZXh0ID0gQ2FudmFzUG9vbC5nZXRPcHRpbWFsQ2FudmFzQW5kQ29udGV4dCh3ZWJHUFVDYW52YXMud2lkdGgsIHdlYkdQVUNhbnZhcy5oZWlnaHQpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXNBbmRDb250ZXh0LmNvbnRleHQ7XG4gICAgY29udGV4dC5kcmF3SW1hZ2Uod2ViR1BVQ2FudmFzLCAwLCAwKTtcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHdlYkdQVUNhbnZhcztcbiAgICBjb25zdCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBjb25zdCBwaXhlbHMgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoaW1hZ2VEYXRhLmRhdGEuYnVmZmVyKTtcbiAgICBDYW52YXNQb29sLnJldHVybkNhbnZhc0FuZENvbnRleHQoY2FudmFzQW5kQ29udGV4dCk7XG4gICAgcmV0dXJuIHsgcGl4ZWxzLCB3aWR0aCwgaGVpZ2h0IH07XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLm1hbmFnZWRUZXh0dXJlcy5zbGljZSgpLmZvckVhY2goKHNvdXJjZSkgPT4gdGhpcy5vblNvdXJjZURlc3Ryb3koc291cmNlKSk7XG4gICAgdGhpcy5tYW5hZ2VkVGV4dHVyZXMgPSBudWxsO1xuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh0aGlzLl9iaW5kR3JvdXBIYXNoKSkge1xuICAgICAgY29uc3Qga2V5ID0gTnVtYmVyKGspO1xuICAgICAgY29uc3QgYmluZEdyb3VwID0gdGhpcy5fYmluZEdyb3VwSGFzaFtrZXldO1xuICAgICAgYmluZEdyb3VwPy5kZXN0cm95KCk7XG4gICAgICB0aGlzLl9iaW5kR3JvdXBIYXNoW2tleV0gPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLl9ncHUgPSBudWxsO1xuICAgIHRoaXMuX21pcG1hcEdlbmVyYXRvciA9IG51bGw7XG4gICAgdGhpcy5fZ3B1U291cmNlcyA9IG51bGw7XG4gICAgdGhpcy5fYmluZEdyb3VwSGFzaCA9IG51bGw7XG4gICAgdGhpcy5fdGV4dHVyZVZpZXdIYXNoID0gbnVsbDtcbiAgICB0aGlzLl9ncHVTYW1wbGVycyA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HcHVUZXh0dXJlU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwidGV4dHVyZVwiXG59O1xuXG5leHBvcnQgeyBHcHVUZXh0dXJlU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcHVUZXh0dXJlU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMsIEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IEdwdUdyYXBoaWNzQWRhcHRvciB9IGZyb20gJy4uLy4uLy4uL3NjZW5lL2dyYXBoaWNzL2dwdS9HcHVHcmFwaGljc0FkYXB0b3IubWpzJztcbmltcG9ydCB7IEdwdU1lc2hBZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmUvbWVzaC9ncHUvR3B1TWVzaEFkYXB0ZXIubWpzJztcbmltcG9ydCB7IEdwdUJhdGNoQWRhcHRvciB9IGZyb20gJy4uLy4uL2JhdGNoZXIvZ3B1L0dwdUJhdGNoQWRhcHRvci5tanMnO1xuaW1wb3J0IHsgQWJzdHJhY3RSZW5kZXJlciB9IGZyb20gJy4uL3NoYXJlZC9zeXN0ZW0vQWJzdHJhY3RSZW5kZXJlci5tanMnO1xuaW1wb3J0IHsgU2hhcmVkU3lzdGVtcywgU2hhcmVkUmVuZGVyUGlwZXMgfSBmcm9tICcuLi9zaGFyZWQvc3lzdGVtL1NoYXJlZFN5c3RlbXMubWpzJztcbmltcG9ydCB7IFJlbmRlcmVyVHlwZSB9IGZyb20gJy4uL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBCaW5kR3JvdXBTeXN0ZW0gfSBmcm9tICcuL0JpbmRHcm91cFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR3B1QnVmZmVyU3lzdGVtIH0gZnJvbSAnLi9idWZmZXIvR3B1QnVmZmVyU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHcHVDb2xvck1hc2tTeXN0ZW0gfSBmcm9tICcuL0dwdUNvbG9yTWFza1N5c3RlbS5tanMnO1xuaW1wb3J0IHsgR3B1RGV2aWNlU3lzdGVtIH0gZnJvbSAnLi9HcHVEZXZpY2VTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdwdUVuY29kZXJTeXN0ZW0gfSBmcm9tICcuL0dwdUVuY29kZXJTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdwdVN0ZW5jaWxTeXN0ZW0gfSBmcm9tICcuL0dwdVN0ZW5jaWxTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdwdVVib1N5c3RlbSB9IGZyb20gJy4vR3B1VWJvU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHcHVVbmlmb3JtQmF0Y2hQaXBlIH0gZnJvbSAnLi9HcHVVbmlmb3JtQmF0Y2hQaXBlLm1qcyc7XG5pbXBvcnQgeyBQaXBlbGluZVN5c3RlbSB9IGZyb20gJy4vcGlwZWxpbmUvUGlwZWxpbmVTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdwdVJlbmRlclRhcmdldFN5c3RlbSB9IGZyb20gJy4vcmVuZGVyVGFyZ2V0L0dwdVJlbmRlclRhcmdldFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR3B1U2hhZGVyU3lzdGVtIH0gZnJvbSAnLi9zaGFkZXIvR3B1U2hhZGVyU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHcHVTdGF0ZVN5c3RlbSB9IGZyb20gJy4vc3RhdGUvR3B1U3RhdGVTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdwdVRleHR1cmVTeXN0ZW0gfSBmcm9tICcuL3RleHR1cmUvR3B1VGV4dHVyZVN5c3RlbS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IERlZmF1bHRXZWJHUFVTeXN0ZW1zID0gW1xuICAuLi5TaGFyZWRTeXN0ZW1zLFxuICBHcHVVYm9TeXN0ZW0sXG4gIEdwdUVuY29kZXJTeXN0ZW0sXG4gIEdwdURldmljZVN5c3RlbSxcbiAgR3B1QnVmZmVyU3lzdGVtLFxuICBHcHVUZXh0dXJlU3lzdGVtLFxuICBHcHVSZW5kZXJUYXJnZXRTeXN0ZW0sXG4gIEdwdVNoYWRlclN5c3RlbSxcbiAgR3B1U3RhdGVTeXN0ZW0sXG4gIFBpcGVsaW5lU3lzdGVtLFxuICBHcHVDb2xvck1hc2tTeXN0ZW0sXG4gIEdwdVN0ZW5jaWxTeXN0ZW0sXG4gIEJpbmRHcm91cFN5c3RlbVxuXTtcbmNvbnN0IERlZmF1bHRXZWJHUFVQaXBlcyA9IFsuLi5TaGFyZWRSZW5kZXJQaXBlcywgR3B1VW5pZm9ybUJhdGNoUGlwZV07XG5jb25zdCBEZWZhdWx0V2ViR1BVQWRhcHRlcnMgPSBbR3B1QmF0Y2hBZGFwdG9yLCBHcHVNZXNoQWRhcHRlciwgR3B1R3JhcGhpY3NBZGFwdG9yXTtcbmNvbnN0IHN5c3RlbXMgPSBbXTtcbmNvbnN0IHJlbmRlclBpcGVzID0gW107XG5jb25zdCByZW5kZXJQaXBlQWRhcHRvcnMgPSBbXTtcbmV4dGVuc2lvbnMuaGFuZGxlQnlOYW1lZExpc3QoRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW0sIHN5c3RlbXMpO1xuZXh0ZW5zaW9ucy5oYW5kbGVCeU5hbWVkTGlzdChFeHRlbnNpb25UeXBlLldlYkdQVVBpcGVzLCByZW5kZXJQaXBlcyk7XG5leHRlbnNpb25zLmhhbmRsZUJ5TmFtZWRMaXN0KEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXNBZGFwdG9yLCByZW5kZXJQaXBlQWRhcHRvcnMpO1xuZXh0ZW5zaW9ucy5hZGQoLi4uRGVmYXVsdFdlYkdQVVN5c3RlbXMsIC4uLkRlZmF1bHRXZWJHUFVQaXBlcywgLi4uRGVmYXVsdFdlYkdQVUFkYXB0ZXJzKTtcbmNsYXNzIFdlYkdQVVJlbmRlcmVyIGV4dGVuZHMgQWJzdHJhY3RSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHN5c3RlbUNvbmZpZyA9IHtcbiAgICAgIG5hbWU6IFwid2ViZ3B1XCIsXG4gICAgICB0eXBlOiBSZW5kZXJlclR5cGUuV0VCR1BVLFxuICAgICAgc3lzdGVtcyxcbiAgICAgIHJlbmRlclBpcGVzLFxuICAgICAgcmVuZGVyUGlwZUFkYXB0b3JzXG4gICAgfTtcbiAgICBzdXBlcihzeXN0ZW1Db25maWcpO1xuICB9XG59XG5cbmV4cG9ydCB7IFdlYkdQVVJlbmRlcmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1XZWJHUFVSZW5kZXJlci5tanMubWFwXG4iLCJpbXBvcnQgeyBET01BZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vZW52aXJvbm1lbnQvYWRhcHRlci5tanMnO1xuaW1wb3J0IHsgbmV4dFBvdzIgfSBmcm9tICcuLi8uLi8uLi8uLi9tYXRocy9taXNjL3BvdzIubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBDYW52YXNQb29sQ2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjYW52YXNPcHRpb25zKSB7XG4gICAgdGhpcy5fY2FudmFzUG9vbCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuY2FudmFzT3B0aW9ucyA9IGNhbnZhc09wdGlvbnMgfHwge307XG4gICAgdGhpcy5lbmFibGVGdWxsU2NyZWVuID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGV4dHVyZSB3aXRoIHBhcmFtcyB0aGF0IHdlcmUgc3BlY2lmaWVkIGluIHBvb2wgY29uc3RydWN0b3IuXG4gICAqIEBwYXJhbSBwaXhlbFdpZHRoIC0gV2lkdGggb2YgdGV4dHVyZSBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSBwaXhlbEhlaWdodCAtIEhlaWdodCBvZiB0ZXh0dXJlIGluIHBpeGVscy5cbiAgICovXG4gIF9jcmVhdGVDYW52YXNBbmRDb250ZXh0KHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0KSB7XG4gICAgY29uc3QgY2FudmFzID0gRE9NQWRhcHRlci5nZXQoKS5jcmVhdGVDYW52YXMoKTtcbiAgICBjYW52YXMud2lkdGggPSBwaXhlbFdpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBwaXhlbEhlaWdodDtcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICByZXR1cm4geyBjYW52YXMsIGNvbnRleHQgfTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIFBvd2VyLW9mLVR3byByZW5kZXIgdGV4dHVyZSBvciBmdWxsU2NyZWVuIHRleHR1cmVcbiAgICogQHBhcmFtIG1pbldpZHRoIC0gVGhlIG1pbmltdW0gd2lkdGggb2YgdGhlIHJlbmRlciB0ZXh0dXJlLlxuICAgKiBAcGFyYW0gbWluSGVpZ2h0IC0gVGhlIG1pbmltdW0gaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGV4dHVyZS5cbiAgICogQHBhcmFtIHJlc29sdXRpb24gLSBUaGUgcmVzb2x1dGlvbiBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEByZXR1cm5zIFRoZSBuZXcgcmVuZGVyIHRleHR1cmUuXG4gICAqL1xuICBnZXRPcHRpbWFsQ2FudmFzQW5kQ29udGV4dChtaW5XaWR0aCwgbWluSGVpZ2h0LCByZXNvbHV0aW9uID0gMSkge1xuICAgIG1pbldpZHRoID0gTWF0aC5jZWlsKG1pbldpZHRoICogcmVzb2x1dGlvbiAtIDFlLTYpO1xuICAgIG1pbkhlaWdodCA9IE1hdGguY2VpbChtaW5IZWlnaHQgKiByZXNvbHV0aW9uIC0gMWUtNik7XG4gICAgbWluV2lkdGggPSBuZXh0UG93MihtaW5XaWR0aCk7XG4gICAgbWluSGVpZ2h0ID0gbmV4dFBvdzIobWluSGVpZ2h0KTtcbiAgICBjb25zdCBrZXkgPSAobWluV2lkdGggPDwgMTcpICsgKG1pbkhlaWdodCA8PCAxKTtcbiAgICBpZiAoIXRoaXMuX2NhbnZhc1Bvb2xba2V5XSkge1xuICAgICAgdGhpcy5fY2FudmFzUG9vbFtrZXldID0gW107XG4gICAgfVxuICAgIGxldCBjYW52YXNBbmRDb250ZXh0ID0gdGhpcy5fY2FudmFzUG9vbFtrZXldLnBvcCgpO1xuICAgIGlmICghY2FudmFzQW5kQ29udGV4dCkge1xuICAgICAgY2FudmFzQW5kQ29udGV4dCA9IHRoaXMuX2NyZWF0ZUNhbnZhc0FuZENvbnRleHQobWluV2lkdGgsIG1pbkhlaWdodCk7XG4gICAgfVxuICAgIHJldHVybiBjYW52YXNBbmRDb250ZXh0O1xuICB9XG4gIC8qKlxuICAgKiBQbGFjZSBhIHJlbmRlciB0ZXh0dXJlIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICogQHBhcmFtIGNhbnZhc0FuZENvbnRleHRcbiAgICovXG4gIHJldHVybkNhbnZhc0FuZENvbnRleHQoY2FudmFzQW5kQ29udGV4dCkge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNhbnZhc0FuZENvbnRleHQuY2FudmFzO1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuICAgIGNvbnN0IGtleSA9ICh3aWR0aCA8PCAxNykgKyAoaGVpZ2h0IDw8IDEpO1xuICAgIHRoaXMuX2NhbnZhc1Bvb2xba2V5XS5wdXNoKGNhbnZhc0FuZENvbnRleHQpO1xuICB9XG4gIGNsZWFyKCkge1xuICAgIHRoaXMuX2NhbnZhc1Bvb2wgPSB7fTtcbiAgfVxufVxuY29uc3QgQ2FudmFzUG9vbCA9IG5ldyBDYW52YXNQb29sQ2xhc3MoKTtcblxuZXhwb3J0IHsgQ2FudmFzUG9vbCwgQ2FudmFzUG9vbENsYXNzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYW52YXNQb29sLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJHcHVHcmFwaGljc0FkYXB0b3IiLCJpbml0IiwibG9jYWxVbmlmb3JtcyIsIlVuaWZvcm1Hcm91cCIsInVUcmFuc2Zvcm1NYXRyaXgiLCJ2YWx1ZSIsIk1hdHJpeCIsInR5cGUiLCJ1Q29sb3IiLCJGbG9hdDMyQXJyYXkiLCJ1Um91bmQiLCJncHVQcm9ncmFtIiwibmFtZSIsImJpdHMiLCJjb2xvckJpdCIsImdlbmVyYXRlVGV4dHVyZUJhdGNoQml0IiwibG9jYWxVbmlmb3JtQml0Iiwicm91bmRQaXhlbHNCaXQiLCJ0aGlzIiwic2hhZGVyIiwiU2hhZGVyIiwicmVzb3VyY2VzIiwiZXhlY3V0ZSIsImdyYXBoaWNzUGlwZSIsInJlbmRlcmFibGUiLCJjb250ZXh0IiwiY3VzdG9tU2hhZGVyIiwicmVuZGVyZXIiLCJjb250ZXh0U3lzdGVtIiwiZ3JhcGhpY3NDb250ZXh0IiwiYmF0Y2hlciIsImluc3RydWN0aW9ucyIsImdldENvbnRleHRSZW5kZXJEYXRhIiwiZW5jb2RlciIsInNldFBpcGVsaW5lRnJvbUdlb21ldHJ5UHJvZ3JhbUFuZFN0YXRlIiwiZ2VvbWV0cnkiLCJzdGF0ZSIsInNldEdlb21ldHJ5IiwiZ2xvYmFsVW5pZm9ybXNCaW5kR3JvdXAiLCJnbG9iYWxVbmlmb3JtcyIsImJpbmRHcm91cCIsInNldEJpbmRHcm91cCIsImxvY2FsQmluZEdyb3VwIiwicmVuZGVyUGlwZXMiLCJ1bmlmb3JtQmF0Y2giLCJnZXRVbmlmb3JtQmluZEdyb3VwIiwiYmF0Y2hlcyIsImkiLCJpbnN0cnVjdGlvblNpemUiLCJiYXRjaCIsImdyb3VwcyIsImdwdUJpbmRHcm91cCIsInRleHR1cmVCYXRjaCIsInRleHR1cmVzIiwiZ2V0VGV4dHVyZUJhdGNoQmluZEdyb3VwIiwiY291bnQiLCJnZXRCaW5kR3JvdXAiLCJyZW5kZXJQYXNzRW5jb2RlciIsImRyYXdJbmRleGVkIiwic2l6ZSIsInN0YXJ0IiwiZGVzdHJveSIsImV4dGVuc2lvbiIsIldlYkdQVVBpcGVzQWRhcHRvciIsIkdwdU1lc2hBZGFwdGVyIiwidGV4dHVyZUJpdCIsIl9zaGFkZXIiLCJ1VGV4dHVyZSIsIlRleHR1cmUiLCJFTVBUWSIsIl9zb3VyY2UiLCJ1U2FtcGxlciIsInN0eWxlIiwidGV4dHVyZVVuaWZvcm1zIiwidVRleHR1cmVNYXRyaXgiLCJtZXNoUGlwZSIsIm1lc2giLCJ3YXJuIiwidGV4dHVyZSIsImdldFRleHR1cmVCaW5kR3JvdXAiLCJhdXRvQXNzaWduR2xvYmFsVW5pZm9ybXMiLCJhdXRvQXNzaWduTG9jYWxVbmlmb3JtcyIsImRyYXciLCJfZ2VvbWV0cnkiLCJ0ZW1wU3RhdGUiLCJTdGF0ZSIsImZvcjJkIiwiR3B1QmF0Y2hBZGFwdG9yIiwiYmF0Y2hQaXBlIiwicHJvZ3JhbSIsImJsZW5kTW9kZSIsInBpcGVsaW5lIiwiZ2V0UGlwZWxpbmUiLCJyZXNldEJpbmRHcm91cCIsIl90b3VjaCIsInRleHR1cmVHQyIsInNldFBpcGVsaW5lIiwiQmluZEdyb3VwU3lzdGVtIiwiY29uc3RydWN0b3IiLCJfaGFzaCIsIk9iamVjdCIsImNyZWF0ZSIsIl9yZW5kZXJlciIsImNvbnRleHRDaGFuZ2UiLCJncHUiLCJfZ3B1IiwiZ3JvdXBJbmRleCIsIl91cGRhdGVLZXkiLCJfa2V5IiwiX2NyZWF0ZUJpbmRHcm91cCIsImdyb3VwIiwiZGV2aWNlIiwiZ3JvdXBMYXlvdXQiLCJsYXlvdXQiLCJlbnRyaWVzIiwiaiIsInJlc291cmNlIiwiZ3B1UmVzb3VyY2UiLCJfcmVzb3VyY2VUeXBlIiwidW5pZm9ybUdyb3VwIiwidWJvIiwidXBkYXRlVW5pZm9ybUdyb3VwIiwiYnVmZmVyIiwiZ2V0R1BVQnVmZmVyIiwib2Zmc2V0IiwiZGVzY3JpcHRvciIsImJ1ZmZlclJlc291cmNlIiwic2FtcGxlciIsImdldEdwdVNhbXBsZXIiLCJnZXRHcHVTb3VyY2UiLCJjcmVhdGVWaWV3IiwicHVzaCIsImJpbmRpbmciLCJnZXRQcm9ncmFtRGF0YSIsImJpbmRHcm91cHMiLCJjcmVhdGVCaW5kR3JvdXAiLCJrZXkiLCJrZXlzIiwiV2ViR1BVU3lzdGVtIiwiR3B1QnVmZmVyU3lzdGVtIiwiX2dwdUJ1ZmZlcnMiLCJfbWFuYWdlZEJ1ZmZlcnMiLCJ1aWQiLCJjcmVhdGVHUFVCdWZmZXIiLCJ1cGRhdGVCdWZmZXIiLCJncHVCdWZmZXIiLCJkYXRhIiwiX3VwZGF0ZUlEIiwicXVldWUiLCJ3cml0ZUJ1ZmZlciIsIl91cGRhdGVTaXplIiwiYnl0ZUxlbmd0aCIsImRlc3Ryb3lBbGwiLCJpZCIsIm9uIiwib25CdWZmZXJDaGFuZ2UiLCJvbkJ1ZmZlckRlc3Ryb3kiLCJjcmVhdGVCdWZmZXIiLCJmYXN0Q29weSIsImdldE1hcHBlZFJhbmdlIiwidW5tYXAiLCJzcGxpY2UiLCJpbmRleE9mIiwiX2Rlc3Ryb3lCdWZmZXIiLCJmb3JFYWNoIiwib2ZmIiwiR3B1Q29sb3JNYXNrU3lzdGVtIiwiX2NvbG9yTWFza0NhY2hlIiwic2V0TWFzayIsImNvbG9yTWFzayIsInNldENvbG9yTWFzayIsIkdwdURldmljZVN5c3RlbSIsIm9wdGlvbnMiLCJfaW5pdFByb21pc2UiLCJfY3JlYXRlRGV2aWNlQW5kQWRhcHRvciIsInRoZW4iLCJydW5uZXJzIiwiZW1pdCIsImFkYXB0ZXIiLCJnZXQiLCJnZXROYXZpZ2F0b3IiLCJyZXF1ZXN0QWRhcHRlciIsInBvd2VyUHJlZmVyZW5jZSIsImZvcmNlRmFsbGJhY2tBZGFwdGVyIiwicmVxdWlyZWRGZWF0dXJlcyIsImZpbHRlciIsImZlYXR1cmUiLCJmZWF0dXJlcyIsImhhcyIsInJlcXVlc3REZXZpY2UiLCJkZWZhdWx0T3B0aW9ucyIsIkdwdUVuY29kZXJTeXN0ZW0iLCJfYm91bmRCaW5kR3JvdXAiLCJfYm91bmRWZXJ0ZXhCdWZmZXIiLCJyZW5kZXJTdGFydCIsImNvbW1hbmRGaW5pc2hlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiX3Jlc29sdmVDb21tYW5kRmluaXNoZWQiLCJjb21tYW5kRW5jb2RlciIsImNyZWF0ZUNvbW1hbmRFbmNvZGVyIiwiYmVnaW5SZW5kZXJQYXNzIiwiZ3B1UmVuZGVyVGFyZ2V0IiwiZW5kUmVuZGVyUGFzcyIsIl9jbGVhckNhY2hlIiwiZW5kIiwic2V0Vmlld3BvcnQiLCJ2aWV3cG9ydCIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJ0b3BvbG9neSIsIl9ib3VuZFBpcGVsaW5lIiwiX3NldFZlcnRleEJ1ZmZlciIsImluZGV4Iiwic2V0VmVydGV4QnVmZmVyIiwiX3NldEluZGV4QnVmZmVyIiwiX2JvdW5kSW5kZXhCdWZmZXIiLCJpbmRleEZvcm1hdCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwic2V0SW5kZXhCdWZmZXIiLCJidWZmZXJzVG9CaW5kIiwiZ2V0QnVmZmVyTmFtZXNUb0JpbmQiLCJhdHRyaWJ1dGVzIiwiaW5kZXhCdWZmZXIiLCJfc2V0U2hhZGVyQmluZEdyb3VwcyIsInNraXBTeW5jIiwiX3N5bmNCaW5kR3JvdXAiLCJpc1VuaWZvcm1Hcm91cCIsImluc3RhbmNlQ291bnQiLCJsZW5ndGgiLCJnZXRTaXplIiwiZmluaXNoUmVuZGVyUGFzcyIsInBvc3RyZW5kZXIiLCJzdWJtaXQiLCJmaW5pc2giLCJyZXN0b3JlUmVuZGVyUGFzcyIsInJlbmRlclRhcmdldCIsImFkYXB0b3IiLCJnZXREZXNjcmlwdG9yIiwiYm91bmRQaXBlbGluZSIsImJvdW5kVmVydGV4QnVmZmVyIiwiYm91bmRJbmRleEJ1ZmZlciIsImJvdW5kQmluZEdyb3VwIiwicHJpb3JpdHkiLCJHcHVTdGVuY2lsU3lzdGVtIiwiX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZSIsIm9uUmVuZGVyVGFyZ2V0Q2hhbmdlIiwiYWRkIiwic3RlbmNpbFN0YXRlIiwic3RlbmNpbE1vZGUiLCJESVNBQkxFRCIsInN0ZW5jaWxSZWZlcmVuY2UiLCJfYWN0aXZlUmVuZGVyVGFyZ2V0Iiwic2V0U3RlbmNpbE1vZGUiLCJzZXRTdGVuY2lsUmVmZXJlbmNlIiwicmVtb3ZlIiwiV0dTTF9BTElHTl9TSVpFX0RBVEEiLCJpMzIiLCJhbGlnbiIsInUzMiIsImYzMiIsImYxNiIsImNyZWF0ZVVib0VsZW1lbnRzV0dTTCIsInVuaWZvcm1EYXRhIiwidWJvRWxlbWVudHMiLCJtYXAiLCJ1Ym9FbGVtZW50IiwiRXJyb3IiLCJNYXRoIiwibWF4IiwiY2VpbCIsImdlbmVyYXRlQXJyYXlTeW5jV0dTTCIsIm9mZnNldFRvQWRkIiwicmVtYWluZGVyIiwiY3JlYXRlVWJvU3luY0Z1bmN0aW9uV0dTTCIsImNyZWF0ZVVib1N5bmNGdW5jdGlvbiIsInVib1N5bmNGdW5jdGlvbnMiLCJHcHVVYm9TeXN0ZW0iLCJVYm9TeXN0ZW0iLCJzdXBlciIsImNyZWF0ZVVib0VsZW1lbnRzIiwiZ2VuZXJhdGVVYm9TeW5jIiwiVWJvQmF0Y2giLCJtaW5Vbmlmb3JtT2Zmc2V0QWxpZ25tZW50IiwiX21pblVuaWZvcm1PZmZzZXRBbGlnbm1lbnQiLCJieXRlSW5kZXgiLCJjbGVhciIsImFkZEVtcHR5R3JvdXAiLCJuZXdTaXplIiwiYWRkR3JvdXAiLCJhcnJheSIsIl9idWZmZXIiLCJHcHVVbmlmb3JtQmF0Y2hQaXBlIiwiX2JpbmRHcm91cEhhc2giLCJfYnVmZmVycyIsIl9iaW5kR3JvdXBzIiwiX2J1ZmZlclJlc291cmNlcyIsIl9iYXRjaEJ1ZmZlciIsInVzYWdlIiwiVU5JRk9STSIsIkNPUFlfRFNUIiwiQ09QWV9TUkMiLCJCdWZmZXIiLCJyZW5kZXJFbmQiLCJfdXBsb2FkQmluZEdyb3VwcyIsIl9yZXNldEJpbmRHcm91cHMiLCJkdXBsaWNhdGUiLCJlbnN1cmVVbmlmb3JtR3JvdXAiLCJzeW5jVW5pZm9ybUdyb3VwIiwiX2dldEJpbmRHcm91cCIsImdldFVib1Jlc291cmNlIiwiX2dldEJ1ZmZlclJlc291cmNlIiwiZ2V0QXJyYXlCaW5kR3JvdXAiLCJnZXRBcnJheUJ1ZmZlclJlc291cmNlIiwiQnVmZmVyUmVzb3VyY2UiLCJCaW5kR3JvdXAiLCJidWZmZXJTeXN0ZW0iLCJmaXJzdEJ1ZmZlciIsInVwZGF0ZSIsImNvcHlCdWZmZXJUb0J1ZmZlciIsIldlYkdQVVBpcGVzIiwidG9wb2xvZ3lTdHJpbmdUb0lkIiwiUGlwZWxpbmVTeXN0ZW0iLCJfbW9kdWxlQ2FjaGUiLCJfYnVmZmVyTGF5b3V0c0NhY2hlIiwiX2JpbmRpbmdOYW1lc0NhY2hlIiwiX3BpcGVDYWNoZSIsIl9waXBlU3RhdGVDYWNoZXMiLCJfY29sb3JNYXNrIiwiX211bHRpc2FtcGxlQ291bnQiLCJfdXBkYXRlUGlwZUhhc2giLCJzZXRNdWx0aXNhbXBsZUNvdW50IiwibXVsdGlzYW1wbGVDb3VudCIsInNldFJlbmRlclRhcmdldCIsIm1zYWFTYW1wbGVzIiwiX2RlcHRoU3RlbmNpbEF0dGFjaG1lbnQiLCJkZXB0aFN0ZW5jaWxBdHRhY2htZW50IiwiX3N0ZW5jaWxNb2RlIiwiX3N0ZW5jaWxTdGF0ZSIsIkdwdVN0ZW5jaWxNb2Rlc1RvUGl4aSIsInBhc3NFbmNvZGVyIiwiX2xheW91dEtleSIsImVuc3VyZUF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVEYXRhIiwiX2dlbmVyYXRlQnVmZmVyS2V5IiwiZ2VvbWV0cnlMYXlvdXQiLCJzaGFkZXJLZXkiLCJnZXRHcmFwaGljc1N0YXRlS2V5IiwiX2JsZW5kTW9kZUlkIiwiX2NyZWF0ZVBpcGVsaW5lIiwiYnVmZmVycyIsIl9jcmVhdGVWZXJ0ZXhCdWZmZXJMYXlvdXRzIiwiYmxlbmRNb2RlcyIsImdldENvbG9yVGFyZ2V0cyIsIndyaXRlTWFzayIsIlJFTkRFUklOR19NQVNLX0FERCIsInZlcnRleCIsIm1vZHVsZSIsIl9nZXRNb2R1bGUiLCJzb3VyY2UiLCJlbnRyeVBvaW50IiwiZnJhZ21lbnQiLCJ0YXJnZXRzIiwicHJpbWl0aXZlIiwiY3VsbE1vZGUiLCJtdWx0aXNhbXBsZSIsImxhYmVsIiwiZGVwdGhTdGVuY2lsIiwiZm9ybWF0IiwiZGVwdGhXcml0ZUVuYWJsZWQiLCJkZXB0aFRlc3QiLCJkZXB0aENvbXBhcmUiLCJjcmVhdGVSZW5kZXJQaXBlbGluZSIsImNvZGUiLCJfY3JlYXRlTW9kdWxlIiwiY3JlYXRlU2hhZGVyTW9kdWxlIiwia2V5R2VuIiwiYXR0cmlidXRlS2V5cyIsInNvcnQiLCJhdHRyaWJ1dGUiLCJzdHJpZGUiLCJpbnN0YW5jZSIsInN0cmluZ0tleSIsImpvaW4iLCJjcmVhdGVJZEZyb21TdHJpbmciLCJfZ2VuZXJhdGVBdHRyaWJ1dGVMb2NhdGlvbnNLZXkiLCJsb2NhdGlvbiIsIl9hdHRyaWJ1dGVMb2NhdGlvbnNLZXkiLCJidWZmZXJOYW1lc1RvQmluZCIsInZlcnRleEJ1ZmZlcnNMYXlvdXQiLCJidWZmZXJFbnRyeSIsImFycmF5U3RyaWRlIiwic3RlcE1vZGUiLCJidWZmZXJFbnRyeUF0dHJpYnV0ZXMiLCJkaXZpc29yIiwic2hhZGVyTG9jYXRpb24iLCJzdGVuY2lsU3RhdGVJZCIsIm11bHRpU2FtcGxlQ291bnQiLCJHcHVSZW5kZXJUYXJnZXQiLCJjb250ZXh0cyIsIm1zYWFUZXh0dXJlcyIsIkdwdVJlbmRlclRhcmdldEFkYXB0b3IiLCJyZW5kZXJUYXJnZXRTeXN0ZW0iLCJfcmVuZGVyVGFyZ2V0U3lzdGVtIiwiY29weVRvVGV4dHVyZSIsInNvdXJjZVJlbmRlclN1cmZhY2VUZXh0dXJlIiwiZGVzdGluYXRpb25UZXh0dXJlIiwib3JpZ2luU3JjIiwib3JpZ2luRGVzdCIsImJhc2VHcHVUZXh0dXJlIiwiX2dldEdwdUNvbG9yVGV4dHVyZSIsImJhY2tHcHVUZXh0dXJlIiwiY29weVRleHR1cmVUb1RleHR1cmUiLCJvcmlnaW4iLCJzdGFydFJlbmRlclBhc3MiLCJjbGVhckNvbG9yIiwiZ2V0R3B1UmVuZGVyVGFyZ2V0IiwiZ2V0Q3VycmVudFRleHR1cmUiLCJjb2xvclRleHR1cmVzIiwiY2xlYXJWYWx1ZSIsIkFMTCIsIk5PTkUiLCJjb2xvckF0dGFjaG1lbnRzIiwidmlldyIsInJlc29sdmVUYXJnZXQiLCJtaXBMZXZlbENvdW50IiwiZ2V0VGV4dHVyZVZpZXciLCJsb2FkT3AiLCJDT0xPUiIsImRlZmF1bHRDbGVhckNvbG9yIiwic3RvcmVPcCIsInN0ZW5jaWwiLCJkZXB0aCIsImRlcHRoU3RlbmNpbFRleHR1cmUiLCJlbnN1cmVEZXB0aFN0ZW5jaWxUZXh0dXJlIiwic2FtcGxlQ291bnQiLCJtc2FhIiwic3RlbmNpbExvYWRPcCIsIlNURU5DSUwiLCJkZXB0aExvYWRPcCIsIkRFUFRIIiwic3RlbmNpbFN0b3JlT3AiLCJkZXB0aENsZWFyVmFsdWUiLCJkZXB0aFN0b3JlT3AiLCJyZW5kZXJQYXNzRGVzY3JpcHRvciIsImdwdUNvbW1hbmRzIiwiaW5pdEdwdVJlbmRlclRhcmdldCIsImlzUm9vdCIsImNvbG9yVGV4dHVyZSIsIkNhbnZhc1NvdXJjZSIsInRlc3QiLCJnZXRDb250ZXh0IiwiYWxwaGFNb2RlIiwidHJhbnNwYXJlbnQiLCJjb25maWd1cmUiLCJHUFVUZXh0dXJlVXNhZ2UiLCJURVhUVVJFX0JJTkRJTkciLCJSRU5ERVJfQVRUQUNITUVOVCIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJhbnRpYWxpYXMiLCJtc2FhVGV4dHVyZSIsIlRleHR1cmVTb3VyY2UiLCJkZXN0cm95R3B1UmVuZGVyVGFyZ2V0IiwidW5jb25maWd1cmUiLCJyZXNpemVHcHVSZW5kZXJUYXJnZXQiLCJyZXNpemUiLCJfcmVzb2x1dGlvbiIsIkdwdVJlbmRlclRhcmdldFN5c3RlbSIsIlJlbmRlclRhcmdldFN5c3RlbSIsIkdwdVNoYWRlclN5c3RlbSIsIl9ncHVQcm9ncmFtRGF0YSIsIm1heFRleHR1cmVzIiwibGltaXRzIiwibWF4U2FtcGxlZFRleHR1cmVzUGVyU2hhZGVyU3RhZ2UiLCJfY3JlYXRlR1BVUHJvZ3JhbURhdGEiLCJncHVMYXlvdXQiLCJjcmVhdGVCaW5kR3JvdXBMYXlvdXQiLCJwaXBlbGluZUxheW91dERlc2MiLCJiaW5kR3JvdXBMYXlvdXRzIiwiY3JlYXRlUGlwZWxpbmVMYXlvdXQiLCJHcHVCbGVuZE1vZGVzVG9QaXhpIiwiYWxwaGEiLCJzcmNGYWN0b3IiLCJkc3RGYWN0b3IiLCJvcGVyYXRpb24iLCJjb2xvciIsIkdwdVN0YXRlU3lzdGVtIiwiZGVmYXVsdFN0YXRlIiwiYmxlbmQiLCJub3JtYWwiLCJncHVVcGxvYWRCdWZmZXJJbWFnZVJlc291cmNlIiwidXBsb2FkIiwiZ3B1VGV4dHVyZSIsInRvdGFsIiwicGl4ZWxXaWR0aCIsInBpeGVsSGVpZ2h0IiwiYnl0ZXNQZXJQaXhlbCIsIndyaXRlVGV4dHVyZSIsInJvd3NQZXJJbWFnZSIsImJ5dGVzUGVyUm93IiwiZGVwdGhPckFycmF5TGF5ZXJzIiwiYmxvY2tEYXRhTWFwIiwiYmxvY2tCeXRlcyIsImJsb2NrV2lkdGgiLCJibG9ja0hlaWdodCIsImRlZmF1bHRCbG9ja0RhdGEiLCJncHVVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlIiwibWlwV2lkdGgiLCJtaXBIZWlnaHQiLCJibG9ja0RhdGEiLCJsZXZlbEJ1ZmZlciIsIm1pcExldmVsIiwiZ3B1VXBsb2FkSW1hZ2VSZXNvdXJjZSIsIm1pbiIsInJlc291cmNlV2lkdGgiLCJyZXNvdXJjZUhlaWdodCIsInByZW11bHRpcGxpZWRBbHBoYSIsImNvcHlFeHRlcm5hbEltYWdlVG9UZXh0dXJlIiwiZ3B1VXBsb2FkVmlkZW9SZXNvdXJjZSIsIkdwdU1pcG1hcEdlbmVyYXRvciIsImNyZWF0ZVNhbXBsZXIiLCJtaW5GaWx0ZXIiLCJwaXBlbGluZXMiLCJfZ2V0TWlwbWFwUGlwZWxpbmUiLCJtaXBtYXBTaGFkZXJNb2R1bGUiLCJnZW5lcmF0ZU1pcG1hcCIsImRpbWVuc2lvbiIsIm1pcFRleHR1cmUiLCJhcnJheUxheWVyQ291bnQiLCJyZW5kZXJUb1NvdXJjZSIsIm1pcFRleHR1cmVEZXNjcmlwdG9yIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRHcm91cExheW91dCIsImdldEJpbmRHcm91cExheW91dCIsImFycmF5TGF5ZXIiLCJzcmNWaWV3IiwiYmFzZU1pcExldmVsIiwiYmFzZUFycmF5TGF5ZXIiLCJkc3RNaXBMZXZlbCIsImRzdFZpZXciLCJyIiwiZyIsImIiLCJhIiwibWlwTGV2ZWxTaXplIiwiR3B1VGV4dHVyZVN5c3RlbSIsIm1hbmFnZWRUZXh0dXJlcyIsIl9ncHVTb3VyY2VzIiwiX2dwdVNhbXBsZXJzIiwiX3RleHR1cmVWaWV3SGFzaCIsIl91cGxvYWRzIiwiaW1hZ2UiLCJ2aWRlbyIsImNvbXByZXNzZWQiLCJpbml0U291cmNlIiwiYXV0b0dlbmVyYXRlTWlwbWFwcyIsImJpZ2dlc3REaW1lbnNpb24iLCJmbG9vciIsImxvZzIiLCJ1cGxvYWRNZXRob2RJZCIsInRleHR1cmVEZXNjcmlwdG9yIiwiaW5jbHVkZXMiLCJvblNvdXJjZVVwZGF0ZSIsIm9uU291cmNlUmVzaXplIiwib25Tb3VyY2VEZXN0cm95Iiwib25Tb3VyY2VVbmxvYWQiLCJvblVwZGF0ZU1pcG1hcHMiLCJfbWlwbWFwR2VuZXJhdG9yIiwiX2luaXRTYW1wbGVyIiwiX3Jlc291cmNlSWQiLCJfY3JlYXRlVGV4dHVyZUJpbmRHcm91cCIsInRleHR1cmVNYXRyaXgiLCJtYXBDb29yZCIsIl9jcmVhdGVUZXh0dXJlVmlldyIsImdlbmVyYXRlQ2FudmFzIiwiY2FudmFzIiwiY3JlYXRlQ2FudmFzIiwiZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0IiwiZ2V0UGl4ZWxzIiwid2ViR1BVQ2FudmFzIiwiY2FudmFzQW5kQ29udGV4dCIsIkNhbnZhc1Bvb2wiLCJnZXRPcHRpbWFsQ2FudmFzQW5kQ29udGV4dCIsImRyYXdJbWFnZSIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsInBpeGVscyIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwicmV0dXJuQ2FudmFzQW5kQ29udGV4dCIsInNsaWNlIiwiayIsIk51bWJlciIsIkRlZmF1bHRXZWJHUFVTeXN0ZW1zIiwiU2hhcmVkU3lzdGVtcyIsIkRlZmF1bHRXZWJHUFVQaXBlcyIsIkRlZmF1bHRXZWJHUFVBZGFwdGVycyIsInN5c3RlbXMiLCJyZW5kZXJQaXBlQWRhcHRvcnMiLCJoYW5kbGVCeU5hbWVkTGlzdCIsIldlYkdQVVJlbmRlcmVyIiwiQWJzdHJhY3RSZW5kZXJlciIsIldFQkdQVSIsImNhbnZhc09wdGlvbnMiLCJfY2FudmFzUG9vbCIsImVuYWJsZUZ1bGxTY3JlZW4iLCJfY3JlYXRlQ2FudmFzQW5kQ29udGV4dCIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwicmVzb2x1dGlvbiIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=