"use strict";(self.webpackChunknetsim=self.webpackChunknetsim||[]).push([[151],{3151:(e,t,r)=>{r.d(t,{WebGLRenderer:()=>$e});var n=r(8507),s=r(9313),i=r(6563),a=r(5611),o=r(4459),c=r(4e3),u=r(2067),_=r(6665),l=r(6040),h=r(8475),d=r(5811);class f{init(){const e=new d.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new s.u,type:"mat3x3<f32>"},uRound:{value:0,type:"f32"}}),t=(0,i.a)(),r=(0,a.I)({name:"graphics",bits:[o.a,(0,c.P)(t),u.mA,_.m]});this.shader=new h.M({glProgram:r,resources:{localUniforms:e,batchSamplers:(0,l.n)(t)}})}execute(e,t){const r=t.context,n=r.customShader||this.shader,s=e.renderer,i=s.graphicsContext,{batcher:a,instructions:o}=i.getContextRenderData(r);n.groups[0]=s.globalUniforms.bindGroup,s.state.set(e.state),s.shader.bind(n),s.geometry.bind(a.geometry,n.glProgram);const c=o.instructions;for(let e=0;e<o.instructionSize;e++){const t=c[e];if(t.size){for(let e=0;e<t.textures.count;e++)s.texture.bind(t.textures.textures[e],e);s.geometry.draw("triangle-list",t.size,t.start)}}}destroy(){this.shader.destroy(!0),this.shader=null}}f.extension={type:[n.Ag.WebGLPipesAdaptor],name:"graphics"};var g=r(3391),m=r(4492),E=r(268);class T{init(){const e=(0,a.I)({name:"mesh",bits:[u.mA,g.m,_.m]});this._shader=new h.M({glProgram:e,resources:{uTexture:m.g.EMPTY.source,textureUniforms:{uTextureMatrix:{type:"mat3x3<f32>",value:new s.u}}}})}execute(e,t){const r=e.renderer;let n=t._shader;if(n){if(!n.glProgram)return void(0,E.R)("Mesh shader has no glProgram",t.shader)}else{n=this._shader;const e=t.texture,r=e.source;n.resources.uTexture=r,n.resources.uSampler=r.style,n.resources.textureUniforms.uniforms.uTextureMatrix=e.textureMatrix.mapCoord}n.groups[100]=r.globalUniforms.bindGroup,n.groups[101]=e.localUniformsBindGroup,r.encoder.draw({geometry:t._geometry,shader:n,state:t.state})}destroy(){this._shader.destroy(!0),this._shader=null}}T.extension={type:[n.Ag.WebGLPipesAdaptor],name:"mesh"};var b=r(7547);class R{constructor(){this._didUpload=!1,this._tempState=b.U.for2d()}init(e){e.renderer.runners.contextChange.add(this)}contextChange(){this._didUpload=!1}start(e,t,r){const n=e.renderer;n.shader.bind(r,this._didUpload),n.shader.updateUniformGroup(n.globalUniforms.uniformGroup),n.geometry.bind(t,r.glProgram)}execute(e,t){const r=e.renderer;this._didUpload=!0,this._tempState.blendMode=t.blendMode,r.state.set(this._tempState);const n=t.textures.textures;for(let e=0;e<t.textures.count;e++)r.texture.bind(n[e],e);r.geometry.draw("triangle-list",t.size,t.start)}}R.extension={type:[n.Ag.WebGLPipesAdaptor],name:"batch"};var S=r(800),x=r(6680),p=r(5099),v=r(1132),A=(e=>(e[e.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER",e[e.ARRAY_BUFFER=34962]="ARRAY_BUFFER",e[e.UNIFORM_BUFFER=35345]="UNIFORM_BUFFER",e))(A||{});class N{constructor(e,t){this.buffer=e||null,this.updateID=-1,this.byteLength=-1,this.type=t}}class B{constructor(e){this._gpuBuffers=Object.create(null),this._boundBufferBases=Object.create(null),this._renderer=e}destroy(){this._renderer=null,this._gl=null,this._gpuBuffers=null,this._boundBufferBases=null}contextChange(){this._gpuBuffers=Object.create(null),this._gl=this._renderer.gl}getGlBuffer(e){return this._gpuBuffers[e.uid]||this.createGLBuffer(e)}bind(e){const{_gl:t}=this,r=this.getGlBuffer(e);t.bindBuffer(r.type,r.buffer)}bindBufferBase(e,t){const{_gl:r}=this;if(this._boundBufferBases[t]!==e){const n=this.getGlBuffer(e);this._boundBufferBases[t]=e,r.bindBufferBase(r.UNIFORM_BUFFER,t,n.buffer)}}bindBufferRange(e,t,r){const{_gl:n}=this;r=r||0;const s=this.getGlBuffer(e);n.bindBufferRange(n.UNIFORM_BUFFER,t||0,s.buffer,256*r,256)}updateBuffer(e){const{_gl:t}=this,r=this.getGlBuffer(e);if(e._updateID===r.updateID)return r;r.updateID=e._updateID,t.bindBuffer(r.type,r.buffer);const n=e.data;if(r.byteLength>=e.data.byteLength)t.bufferSubData(r.type,0,n,0,e._updateSize/n.BYTES_PER_ELEMENT);else{const s=e.descriptor.usage&v.S.STATIC?t.STATIC_DRAW:t.DYNAMIC_DRAW;r.byteLength=n.byteLength,t.bufferData(r.type,n,s)}return r}destroyAll(){const e=this._gl;for(const t in this._gpuBuffers)e.deleteBuffer(this._gpuBuffers[t].buffer);this._gpuBuffers=Object.create(null)}onBufferDestroy(e,t){const r=this._gpuBuffers[e.uid],n=this._gl;t||n.deleteBuffer(r.buffer),this._gpuBuffers[e.uid]=null}createGLBuffer(e){const{_gl:t}=this;let r=A.ARRAY_BUFFER;e.descriptor.usage&v.S.INDEX?r=A.ELEMENT_ARRAY_BUFFER:e.descriptor.usage&v.S.UNIFORM&&(r=A.UNIFORM_BUFFER);const n=new N(t.createBuffer(),r);return this._gpuBuffers[e.uid]=n,e.on("destroy",this.onBufferDestroy,this),n}}B.extension={type:[n.Ag.WebGLSystem],name:"buffer"};var G=r(1761);const I=class e{constructor(e){this.supports={uint32Indices:!0,uniformBufferObject:!0,vertexArrayObject:!0,srgbTextures:!0,nonPowOf2wrapping:!0,msaa:!0,nonPowOf2mipmaps:!0},this._renderer=e,this.extensions=Object.create(null),this.handleContextLost=this.handleContextLost.bind(this),this.handleContextRestored=this.handleContextRestored.bind(this)}get isLost(){return!this.gl||this.gl.isContextLost()}contextChange(e){this.gl=e,this._renderer.gl=e}init(t){t={...e.defaultOptions,...t};let r=this.multiView=t.multiView;if(t.context&&r&&((0,E.R)("Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together."),r=!1),this.canvas=r?G.e.get().createCanvas(this._renderer.canvas.width,this._renderer.canvas.height):this._renderer.view.canvas,t.context)this.initFromContext(t.context);else{const e=this._renderer.background.alpha<1,r=t.premultipliedAlpha??!0,n=t.antialias&&!this._renderer.backBuffer.useBackBuffer;this.createContext(t.preferWebGLVersion,{alpha:e,premultipliedAlpha:r,antialias:n,stencil:!0,preserveDrawingBuffer:t.preserveDrawingBuffer,powerPreference:t.powerPreference??"default"})}}ensureCanvasSize(e){if(!this.multiView)return void(e!==this.canvas&&(0,E.R)("multiView is disabled, but targetCanvas is not the main canvas"));const{canvas:t}=this;(t.width<e.width||t.height<e.height)&&(t.width=Math.max(e.width,e.width),t.height=Math.max(e.height,e.height))}initFromContext(e){this.gl=e,this.webGLVersion=e instanceof G.e.get().getWebGLRenderingContext()?1:2,this.getExtensions(),this.validateContext(e),this._renderer.runners.contextChange.emit(e);const t=this._renderer.view.canvas;t.addEventListener("webglcontextlost",this.handleContextLost,!1),t.addEventListener("webglcontextrestored",this.handleContextRestored,!1)}createContext(e,t){let r;const n=this.canvas;if(2===e&&(r=n.getContext("webgl2",t)),!r&&(r=n.getContext("webgl",t),!r))throw new Error("This browser does not support WebGL. Try using the canvas renderer");this.gl=r,this.initFromContext(this.gl)}getExtensions(){const{gl:e}=this,t={anisotropicFiltering:e.getExtension("EXT_texture_filter_anisotropic"),floatTextureLinear:e.getExtension("OES_texture_float_linear"),s3tc:e.getExtension("WEBGL_compressed_texture_s3tc"),s3tc_sRGB:e.getExtension("WEBGL_compressed_texture_s3tc_srgb"),etc:e.getExtension("WEBGL_compressed_texture_etc"),etc1:e.getExtension("WEBGL_compressed_texture_etc1"),pvrtc:e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),atc:e.getExtension("WEBGL_compressed_texture_atc"),astc:e.getExtension("WEBGL_compressed_texture_astc"),bptc:e.getExtension("EXT_texture_compression_bptc"),rgtc:e.getExtension("EXT_texture_compression_rgtc"),loseContext:e.getExtension("WEBGL_lose_context")};if(1===this.webGLVersion)this.extensions={...t,drawBuffers:e.getExtension("WEBGL_draw_buffers"),depthTexture:e.getExtension("WEBGL_depth_texture"),vertexArrayObject:e.getExtension("OES_vertex_array_object")||e.getExtension("MOZ_OES_vertex_array_object")||e.getExtension("WEBKIT_OES_vertex_array_object"),uint32ElementIndex:e.getExtension("OES_element_index_uint"),floatTexture:e.getExtension("OES_texture_float"),floatTextureLinear:e.getExtension("OES_texture_float_linear"),textureHalfFloat:e.getExtension("OES_texture_half_float"),textureHalfFloatLinear:e.getExtension("OES_texture_half_float_linear"),vertexAttribDivisorANGLE:e.getExtension("ANGLE_instanced_arrays"),srgb:e.getExtension("EXT_sRGB")};else{this.extensions={...t,colorBufferFloat:e.getExtension("EXT_color_buffer_float")};const r=e.getExtension("WEBGL_provoking_vertex");r&&r.provokingVertexWEBGL(r.FIRST_VERTEX_CONVENTION_WEBGL)}}handleContextLost(e){e.preventDefault(),this._contextLossForced&&(this._contextLossForced=!1,setTimeout((()=>{this.gl.isContextLost()&&this.extensions.loseContext?.restoreContext()}),0))}handleContextRestored(){this._renderer.runners.contextChange.emit(this.gl)}destroy(){const e=this._renderer.view.canvas;this._renderer=null,e.removeEventListener("webglcontextlost",this.handleContextLost),e.removeEventListener("webglcontextrestored",this.handleContextRestored),this.gl.useProgram(null),this.extensions.loseContext?.loseContext()}forceContextLoss(){this.extensions.loseContext?.loseContext(),this._contextLossForced=!0}validateContext(e){const t=e.getContextAttributes();t&&!t.stencil&&(0,E.R)("Provided WebGL context does not have a stencil buffer, masks may not render correctly");const r=this.supports,n=2===this.webGLVersion,s=this.extensions;r.uint32Indices=n||!!s.uint32ElementIndex,r.uniformBufferObject=n,r.vertexArrayObject=n||!!s.vertexArrayObject,r.srgbTextures=n||!!s.srgb,r.nonPowOf2wrapping=n,r.nonPowOf2mipmaps=n,r.msaa=n,r.uint32Indices||(0,E.R)("Provided WebGL context does not support 32 index buffer, large scenes may not render correctly")}};I.extension={type:[n.Ag.WebGLSystem],name:"context"},I.defaultOptions={context:null,premultipliedAlpha:!0,preserveDrawingBuffer:!1,powerPreference:void 0,preferWebGLVersion:2,multiView:!1};let C=I;var D=r(8306),O=r(7084),U=(e=>(e[e.RGBA=6408]="RGBA",e[e.RGB=6407]="RGB",e[e.RG=33319]="RG",e[e.RED=6403]="RED",e[e.RGBA_INTEGER=36249]="RGBA_INTEGER",e[e.RGB_INTEGER=36248]="RGB_INTEGER",e[e.RG_INTEGER=33320]="RG_INTEGER",e[e.RED_INTEGER=36244]="RED_INTEGER",e[e.ALPHA=6406]="ALPHA",e[e.LUMINANCE=6409]="LUMINANCE",e[e.LUMINANCE_ALPHA=6410]="LUMINANCE_ALPHA",e[e.DEPTH_COMPONENT=6402]="DEPTH_COMPONENT",e[e.DEPTH_STENCIL=34041]="DEPTH_STENCIL",e))(U||{}),y=(e=>(e[e.TEXTURE_2D=3553]="TEXTURE_2D",e[e.TEXTURE_CUBE_MAP=34067]="TEXTURE_CUBE_MAP",e[e.TEXTURE_2D_ARRAY=35866]="TEXTURE_2D_ARRAY",e[e.TEXTURE_CUBE_MAP_POSITIVE_X=34069]="TEXTURE_CUBE_MAP_POSITIVE_X",e[e.TEXTURE_CUBE_MAP_NEGATIVE_X=34070]="TEXTURE_CUBE_MAP_NEGATIVE_X",e[e.TEXTURE_CUBE_MAP_POSITIVE_Y=34071]="TEXTURE_CUBE_MAP_POSITIVE_Y",e[e.TEXTURE_CUBE_MAP_NEGATIVE_Y=34072]="TEXTURE_CUBE_MAP_NEGATIVE_Y",e[e.TEXTURE_CUBE_MAP_POSITIVE_Z=34073]="TEXTURE_CUBE_MAP_POSITIVE_Z",e[e.TEXTURE_CUBE_MAP_NEGATIVE_Z=34074]="TEXTURE_CUBE_MAP_NEGATIVE_Z",e))(y||{}),P=(e=>(e[e.UNSIGNED_BYTE=5121]="UNSIGNED_BYTE",e[e.UNSIGNED_SHORT=5123]="UNSIGNED_SHORT",e[e.UNSIGNED_SHORT_5_6_5=33635]="UNSIGNED_SHORT_5_6_5",e[e.UNSIGNED_SHORT_4_4_4_4=32819]="UNSIGNED_SHORT_4_4_4_4",e[e.UNSIGNED_SHORT_5_5_5_1=32820]="UNSIGNED_SHORT_5_5_5_1",e[e.UNSIGNED_INT=5125]="UNSIGNED_INT",e[e.UNSIGNED_INT_10F_11F_11F_REV=35899]="UNSIGNED_INT_10F_11F_11F_REV",e[e.UNSIGNED_INT_2_10_10_10_REV=33640]="UNSIGNED_INT_2_10_10_10_REV",e[e.UNSIGNED_INT_24_8=34042]="UNSIGNED_INT_24_8",e[e.UNSIGNED_INT_5_9_9_9_REV=35902]="UNSIGNED_INT_5_9_9_9_REV",e[e.BYTE=5120]="BYTE",e[e.SHORT=5122]="SHORT",e[e.INT=5124]="INT",e[e.FLOAT=5126]="FLOAT",e[e.FLOAT_32_UNSIGNED_INT_24_8_REV=36269]="FLOAT_32_UNSIGNED_INT_24_8_REV",e[e.HALF_FLOAT=36193]="HALF_FLOAT",e))(P||{});const F={uint8x2:P.UNSIGNED_BYTE,uint8x4:P.UNSIGNED_BYTE,sint8x2:P.BYTE,sint8x4:P.BYTE,unorm8x2:P.UNSIGNED_BYTE,unorm8x4:P.UNSIGNED_BYTE,snorm8x2:P.BYTE,snorm8x4:P.BYTE,uint16x2:P.UNSIGNED_SHORT,uint16x4:P.UNSIGNED_SHORT,sint16x2:P.SHORT,sint16x4:P.SHORT,unorm16x2:P.UNSIGNED_SHORT,unorm16x4:P.UNSIGNED_SHORT,snorm16x2:P.SHORT,snorm16x4:P.SHORT,float16x2:P.HALF_FLOAT,float16x4:P.HALF_FLOAT,float32:P.FLOAT,float32x2:P.FLOAT,float32x3:P.FLOAT,float32x4:P.FLOAT,uint32:P.UNSIGNED_INT,uint32x2:P.UNSIGNED_INT,uint32x3:P.UNSIGNED_INT,uint32x4:P.UNSIGNED_INT,sint32:P.INT,sint32x2:P.INT,sint32x3:P.INT,sint32x4:P.INT},M={"point-list":0,"line-list":1,"line-strip":3,"triangle-list":4,"triangle-strip":5};class L{constructor(e){this._geometryVaoHash=Object.create(null),this._renderer=e,this._activeGeometry=null,this._activeVao=null,this.hasVao=!0,this.hasInstance=!0}contextChange(){const e=this.gl=this._renderer.gl;if(!this._renderer.context.supports.vertexArrayObject)throw new Error("[PixiJS] Vertex Array Objects are not supported on this device");const t=this._renderer.context.extensions.vertexArrayObject;t&&(e.createVertexArray=()=>t.createVertexArrayOES(),e.bindVertexArray=e=>t.bindVertexArrayOES(e),e.deleteVertexArray=e=>t.deleteVertexArrayOES(e));const r=this._renderer.context.extensions.vertexAttribDivisorANGLE;r&&(e.drawArraysInstanced=(e,t,n,s)=>{r.drawArraysInstancedANGLE(e,t,n,s)},e.drawElementsInstanced=(e,t,n,s,i)=>{r.drawElementsInstancedANGLE(e,t,n,s,i)},e.vertexAttribDivisor=(e,t)=>r.vertexAttribDivisorANGLE(e,t)),this._activeGeometry=null,this._activeVao=null,this._geometryVaoHash=Object.create(null)}bind(e,t){const r=this.gl;this._activeGeometry=e;const n=this.getVao(e,t);this._activeVao!==n&&(this._activeVao=n,r.bindVertexArray(n)),this.updateBuffers()}reset(){this.unbind()}updateBuffers(){const e=this._activeGeometry,t=this._renderer.buffer;for(let r=0;r<e.buffers.length;r++){const n=e.buffers[r];t.updateBuffer(n)}}checkCompatibility(e,t){const r=e.attributes,n=t._attributeData;for(const e in n)if(!r[e])throw new Error(`shader and geometry incompatible, geometry missing the "${e}" attribute`)}getSignature(e,t){const r=e.attributes,n=t._attributeData,s=["g",e.uid];for(const e in r)n[e]&&s.push(e,n[e].location);return s.join("-")}getVao(e,t){return this._geometryVaoHash[e.uid]?.[t._key]||this.initGeometryVao(e,t)}initGeometryVao(e,t,r=!0){const n=this._renderer.gl,s=this._renderer.buffer;this._renderer.shader._getProgramData(t),this.checkCompatibility(e,t);const i=this.getSignature(e,t);this._geometryVaoHash[e.uid]||(this._geometryVaoHash[e.uid]=Object.create(null),e.on("destroy",this.onGeometryDestroy,this));const a=this._geometryVaoHash[e.uid];let o=a[i];if(o)return a[t._key]=o,o;(0,O.q)(e,t._attributeData);const c=e.buffers;o=n.createVertexArray(),n.bindVertexArray(o);for(let e=0;e<c.length;e++){const t=c[e];s.bind(t)}return this.activateVao(e,t),a[t._key]=o,a[i]=o,n.bindVertexArray(null),o}onGeometryDestroy(e,t){const r=this._geometryVaoHash[e.uid],n=this.gl;if(r){if(t)for(const e in r)this._activeVao!==r[e]&&this.unbind(),n.deleteVertexArray(r[e]);this._geometryVaoHash[e.uid]=null}}destroyAll(e=!1){const t=this.gl;for(const r in this._geometryVaoHash){if(e)for(const e in this._geometryVaoHash[r]){const n=this._geometryVaoHash[r];this._activeVao!==n&&this.unbind(),t.deleteVertexArray(n[e])}this._geometryVaoHash[r]=null}}activateVao(e,t){const r=this._renderer.gl,n=this._renderer.buffer,s=e.attributes;e.indexBuffer&&n.bind(e.indexBuffer);let i=null;for(const e in s){const o=s[e],c=o.buffer,u=n.getGlBuffer(c),_=t._attributeData[e];if(_){i!==u&&(n.bind(c),i=u);const e=_.location;r.enableVertexAttribArray(e);const t=(0,D.m)(o.format),s=(a=o.format,F[a]??F.float32);if("int"===_.format?.substring(1,4)?r.vertexAttribIPointer(e,t.size,s,o.stride,o.offset):r.vertexAttribPointer(e,t.size,s,t.normalised,o.stride,o.offset),o.instance){if(!this.hasInstance)throw new Error("geometry error, GPU Instancing is not supported on this device");{const t=o.divisor??1;r.vertexAttribDivisor(e,t)}}}}var a}draw(e,t,r,n){const{gl:s}=this._renderer,i=this._activeGeometry,a=M[i.topology||e];if(n||(n=i.instanceCount),i.indexBuffer){const e=i.indexBuffer.data.BYTES_PER_ELEMENT,o=2===e?s.UNSIGNED_SHORT:s.UNSIGNED_INT;n>1?s.drawElementsInstanced(a,t||i.indexBuffer.data.length,o,(r||0)*e,n):s.drawElements(a,t||i.indexBuffer.data.length,o,(r||0)*e)}else n>1?s.drawArraysInstanced(a,r||0,t||i.getSize(),n):s.drawArrays(a,r||0,t||i.getSize());return this}unbind(){this.gl.bindVertexArray(null),this._activeVao=null,this._activeGeometry=null}destroy(){this._renderer=null,this.gl=null,this._activeVao=null,this._activeGeometry=null}}L.extension={type:[n.Ag.WebGLSystem],name:"geometry"};var H=r(6011),w=r(6932),V=r(9113);const k=new H.V({attributes:{aPosition:[-1,-1,3,-1,-1,3]}}),X=class e{constructor(e){this.useBackBuffer=!1,this._useBackBufferThisRender=!1,this._renderer=e}init(t={}){const{useBackBuffer:r,antialias:n}={...e.defaultOptions,...t};this.useBackBuffer=r,this._antialias=n,this._renderer.context.supports.msaa||((0,E.R)("antialiasing, is not supported on when using the back buffer"),this._antialias=!1),this._state=b.U.for2d();const s=new V.M({vertex:"\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }",fragment:"\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }",name:"big-triangle"});this._bigTriangleShader=new h.M({glProgram:s,resources:{uTexture:m.g.WHITE.source}})}renderStart(e){const t=this._renderer.renderTarget.getRenderTarget(e.target);if(this._useBackBufferThisRender=this.useBackBuffer&&!!t.isRoot,this._useBackBufferThisRender){const t=this._renderer.renderTarget.getRenderTarget(e.target);this._targetTexture=t.colorTexture,e.target=this._getBackBufferTexture(t.colorTexture)}}renderEnd(){this._presentBackBuffer()}_presentBackBuffer(){const e=this._renderer;e.renderTarget.finishRenderPass(),this._useBackBufferThisRender&&(e.renderTarget.bind(this._targetTexture,!1),this._bigTriangleShader.resources.uTexture=this._backBufferTexture.source,e.encoder.draw({geometry:k,shader:this._bigTriangleShader,state:this._state}))}_getBackBufferTexture(e){return this._backBufferTexture=this._backBufferTexture||new m.g({source:new w.v({width:e.width,height:e.height,resolution:e._resolution,antialias:this._antialias})}),this._backBufferTexture.source.resize(e.width,e.height,e._resolution),this._backBufferTexture}destroy(){this._backBufferTexture&&(this._backBufferTexture.destroy(),this._backBufferTexture=null)}};X.extension={type:[n.Ag.WebGLSystem],name:"backBuffer",priority:1},X.defaultOptions={useBackBuffer:!1};let W=X;class Y{constructor(e){this._colorMaskCache=15,this._renderer=e}setMask(e){this._colorMaskCache!==e&&(this._colorMaskCache=e,this._renderer.gl.colorMask(!!(8&e),!!(4&e),!!(2&e),!!(1&e)))}}Y.extension={type:[n.Ag.WebGLSystem],name:"colorMask"};class j{constructor(e){this.commandFinished=Promise.resolve(),this._renderer=e}setGeometry(e,t){this._renderer.geometry.bind(e,t.glProgram)}finishRenderPass(){}draw(e){const t=this._renderer,{geometry:r,shader:n,state:s,skipSync:i,topology:a,size:o,start:c,instanceCount:u}=e;t.shader.bind(n,i),t.geometry.bind(r,t.shader._activeProgram),s&&t.state.set(s),t.geometry.draw(a,o,c,u??r.instanceCount)}destroy(){this._renderer=null}}j.extension={type:[n.Ag.WebGLSystem],name:"encoder"};var K=r(1172),$=r(1957);class z{constructor(e){this._stencilCache={enabled:!1,stencilReference:0,stencilMode:$.K.NONE},this._renderTargetStencilState=Object.create(null),e.renderTarget.onRenderTargetChange.add(this)}contextChange(e){this._gl=e,this._comparisonFuncMapping={always:e.ALWAYS,never:e.NEVER,equal:e.EQUAL,"not-equal":e.NOTEQUAL,less:e.LESS,"less-equal":e.LEQUAL,greater:e.GREATER,"greater-equal":e.GEQUAL},this._stencilOpsMapping={keep:e.KEEP,zero:e.ZERO,replace:e.REPLACE,invert:e.INVERT,"increment-clamp":e.INCR,"decrement-clamp":e.DECR,"increment-wrap":e.INCR_WRAP,"decrement-wrap":e.DECR_WRAP},this._stencilCache.enabled=!1,this._stencilCache.stencilMode=$.K.NONE,this._stencilCache.stencilReference=0}onRenderTargetChange(e){if(this._activeRenderTarget===e)return;this._activeRenderTarget=e;let t=this._renderTargetStencilState[e.uid];t||(t=this._renderTargetStencilState[e.uid]={stencilMode:$.K.DISABLED,stencilReference:0}),this.setStencilMode(t.stencilMode,t.stencilReference)}setStencilMode(e,t){const r=this._renderTargetStencilState[this._activeRenderTarget.uid],n=this._gl,s=K.g[e],i=this._stencilCache;r.stencilMode=e,r.stencilReference=t,e!==$.K.DISABLED?(this._stencilCache.enabled||(this._stencilCache.enabled=!0,n.enable(n.STENCIL_TEST)),e===i.stencilMode&&i.stencilReference===t||(i.stencilMode=e,i.stencilReference=t,n.stencilFunc(this._comparisonFuncMapping[s.stencilBack.compare],t,255),n.stencilOp(n.KEEP,n.KEEP,this._stencilOpsMapping[s.stencilBack.passOp]))):this._stencilCache.enabled&&(this._stencilCache.enabled=!1,n.disable(n.STENCIL_TEST))}}z.extension={type:[n.Ag.WebGLSystem],name:"stencil"};var q=r(7047);const Z={f32:4,"vec2<f32>":8,"vec3<f32>":12,"vec4<f32>":16,"mat2x2<f32>":32,"mat3x3<f32>":48,"mat4x4<f32>":64};function Q(e){const t=e.map((e=>({data:e,offset:0,size:0})));let r=0,n=0,s=0;for(let e=0;e<t.length;e++){const i=t[e];if(r=Z[i.data.type],!r)throw new Error(`Unknown type ${i.data.type}`);if(i.data.size>1&&(r=Math.max(r,16)*i.data.size),i.size=r,n%r!=0&&n<16){const e=n%r%16;n+=e,s+=e}n+r>16?(s=16*Math.ceil(s/16),i.offset=s,s+=r,n=r):(i.offset=s,n+=r,s+=r)}return s=16*Math.ceil(s/16),{uboElements:t,size:s}}var J=r(6423),ee=r(1266);function te(e,t){const r=Math.max(Z[e.data.type]/16,1),n=e.data.value.length/e.data.size,s=(4-n%4)%4;return`\n        v = uv.${e.data.name};\n        offset += ${t};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${e.data.size*r}; i++)\n        {\n            for(var j = 0; j < ${n}; j++)\n            {\n                data[arrayOffset++] = v[t++];\n            }\n            ${0!==s?`arrayOffset += ${s};`:""}\n        }\n    `}function re(e){return(0,J.E)(e,"uboStd40",te,ee.g)}class ne extends q.W{constructor(){super({createUboElements:Q,generateUboSync:re})}}ne.extension={type:[n.Ag.WebGLSystem],name:"ubo"};var se=r(7238),ie=r(9252),ae=r(4884),oe=r(1257);class ce{constructor(){this.width=-1,this.height=-1,this.msaa=!1,this.msaaRenderBuffer=[]}}class ue{constructor(){this._clearColorCache=[0,0,0,0],this._viewPortCache=new ie.M}init(e,t){this._renderer=e,this._renderTargetSystem=t,e.runners.contextChange.add(this)}contextChange(){this._clearColorCache=[0,0,0,0],this._viewPortCache=new ie.M}copyToTexture(e,t,r,n,s){const i=this._renderTargetSystem,a=this._renderer,o=i.getGpuRenderTarget(e),c=a.gl;return this.finishRenderPass(e),c.bindFramebuffer(c.FRAMEBUFFER,o.resolveTargetFramebuffer),a.texture.bind(t,0),c.copyTexSubImage2D(c.TEXTURE_2D,0,s.x,s.y,r.x,r.y,n.width,n.height),t}startRenderPass(e,t=!0,r,n){const s=this._renderTargetSystem,i=e.colorTexture,a=s.getGpuRenderTarget(e);let o=n.y;e.isRoot&&(o=i.pixelHeight-n.height),e.colorTextures.forEach((e=>{this._renderer.texture.unbind(e)}));const c=this._renderer.gl;c.bindFramebuffer(c.FRAMEBUFFER,a.framebuffer);const u=this._viewPortCache;u.x===n.x&&u.y===o&&u.width===n.width&&u.height===n.height||(u.x=n.x,u.y=o,u.width=n.width,u.height=n.height,c.viewport(n.x,o,n.width,n.height)),a.depthStencilRenderBuffer||!e.stencil&&!e.depth||this._initStencil(a),this.clear(e,t,r)}finishRenderPass(e){const t=this._renderTargetSystem.getGpuRenderTarget(e);if(!t.msaa)return;const r=this._renderer.gl;r.bindFramebuffer(r.FRAMEBUFFER,t.resolveTargetFramebuffer),r.bindFramebuffer(r.READ_FRAMEBUFFER,t.framebuffer),r.blitFramebuffer(0,0,t.width,t.height,0,0,t.width,t.height,r.COLOR_BUFFER_BIT,r.NEAREST),r.bindFramebuffer(r.FRAMEBUFFER,t.framebuffer)}initGpuRenderTarget(e){const t=this._renderer.gl,r=new ce,n=e.colorTexture;return ae.q.test(n.resource)?(this._renderer.context.ensureCanvasSize(e.colorTexture.resource),r.framebuffer=null,r):(this._initColor(e,r),t.bindFramebuffer(t.FRAMEBUFFER,null),r)}destroyGpuRenderTarget(e){const t=this._renderer.gl;e.framebuffer&&(t.deleteFramebuffer(e.framebuffer),e.framebuffer=null),e.resolveTargetFramebuffer&&(t.deleteFramebuffer(e.resolveTargetFramebuffer),e.resolveTargetFramebuffer=null),e.depthStencilRenderBuffer&&(t.deleteRenderbuffer(e.depthStencilRenderBuffer),e.depthStencilRenderBuffer=null),e.msaaRenderBuffer.forEach((e=>{t.deleteRenderbuffer(e)})),e.msaaRenderBuffer=null}clear(e,t,r){if(!t)return;const n=this._renderTargetSystem;"boolean"==typeof t&&(t=t?oe.u.ALL:oe.u.NONE);const s=this._renderer.gl;if(t&oe.u.COLOR){r??(r=n.defaultClearColor);const e=this._clearColorCache,t=r;e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]||(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],s.clearColor(t[0],t[1],t[2],t[3]))}s.clear(t)}resizeGpuRenderTarget(e){if(e.isRoot)return;const t=this._renderTargetSystem.getGpuRenderTarget(e);this._resizeColor(e,t),(e.stencil||e.depth)&&this._resizeStencil(t)}_initColor(e,t){const r=this._renderer,n=r.gl,s=n.createFramebuffer();if(t.resolveTargetFramebuffer=s,n.bindFramebuffer(n.FRAMEBUFFER,s),t.width=e.colorTexture.source.pixelWidth,t.height=e.colorTexture.source.pixelHeight,e.colorTextures.forEach(((e,s)=>{const i=e.source;i.antialias&&(r.context.supports.msaa?t.msaa=!0:(0,E.R)("[RenderTexture] Antialiasing on textures is not supported in WebGL1")),r.texture.bindSource(i,0);const a=r.texture.getGlSource(i).texture;n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+s,3553,a,0)})),t.msaa){const r=n.createFramebuffer();t.framebuffer=r,n.bindFramebuffer(n.FRAMEBUFFER,r),e.colorTextures.forEach(((e,r)=>{const s=n.createRenderbuffer();t.msaaRenderBuffer[r]=s}))}else t.framebuffer=s;this._resizeColor(e,t)}_resizeColor(e,t){const r=e.colorTexture.source;if(t.width=r.pixelWidth,t.height=r.pixelHeight,e.colorTextures.forEach(((e,t)=>{0!==t&&e.source.resize(r.width,r.height,r._resolution)})),t.msaa){const r=this._renderer,n=r.gl,s=t.framebuffer;n.bindFramebuffer(n.FRAMEBUFFER,s),e.colorTextures.forEach(((e,s)=>{const i=e.source;r.texture.bindSource(i,0);const a=r.texture.getGlSource(i).internalFormat,o=t.msaaRenderBuffer[s];n.bindRenderbuffer(n.RENDERBUFFER,o),n.renderbufferStorageMultisample(n.RENDERBUFFER,4,a,i.pixelWidth,i.pixelHeight),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+s,n.RENDERBUFFER,o)}))}}_initStencil(e){if(null===e.framebuffer)return;const t=this._renderer.gl,r=t.createRenderbuffer();e.depthStencilRenderBuffer=r,t.bindRenderbuffer(t.RENDERBUFFER,r),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,r),this._resizeStencil(e)}_resizeStencil(e){const t=this._renderer.gl;t.bindRenderbuffer(t.RENDERBUFFER,e.depthStencilRenderBuffer),e.msaa?t.renderbufferStorageMultisample(t.RENDERBUFFER,4,t.DEPTH24_STENCIL8,e.width,e.height):t.renderbufferStorage(t.RENDERBUFFER,2===this._renderer.context.webGLVersion?t.DEPTH24_STENCIL8:t.DEPTH_STENCIL,e.width,e.height)}postrender(e){if(this._renderer.context.multiView&&ae.q.test(e.colorTexture.resource)){const t=this._renderer.context.canvas,r=e.colorTexture;r.context2D.drawImage(t,0,r.pixelHeight-t.height)}}}class _e extends se.l{constructor(e){super(e),this.adaptor=new ue,this.adaptor.init(e,this)}}_e.extension={type:[n.Ag.WebGLSystem],name:"renderTarget"};var le=r(581);class he{constructor(e,t){this.program=e,this.uniformData=t,this.uniformGroups={},this.uniformDirtyGroups={},this.uniformBlockBindings={}}destroy(){this.uniformData=null,this.uniformGroups=null,this.uniformDirtyGroups=null,this.uniformBlockBindings=null,this.program=null}}function de(e,t,r){const n=e.createShader(t);return e.shaderSource(n,r),e.compileShader(n),n}function fe(e){const t=new Array(e);for(let e=0;e<t.length;e++)t[e]=!1;return t}function ge(e,t){switch(e){case"float":case"int":case"uint":case"sampler2D":case"sampler2DArray":return 0;case"vec2":return new Float32Array(2*t);case"vec3":return new Float32Array(3*t);case"vec4":return new Float32Array(4*t);case"ivec2":return new Int32Array(2*t);case"ivec3":return new Int32Array(3*t);case"ivec4":return new Int32Array(4*t);case"uvec2":return new Uint32Array(2*t);case"uvec3":return new Uint32Array(3*t);case"uvec4":return new Uint32Array(4*t);case"bool":return!1;case"bvec2":return fe(2*t);case"bvec3":return fe(3*t);case"bvec4":return fe(4*t);case"mat2":return new Float32Array([1,0,0,1]);case"mat3":return new Float32Array([1,0,0,0,1,0,0,0,1]);case"mat4":return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}return null}let me=null;const Ee={FLOAT:"float",FLOAT_VEC2:"vec2",FLOAT_VEC3:"vec3",FLOAT_VEC4:"vec4",INT:"int",INT_VEC2:"ivec2",INT_VEC3:"ivec3",INT_VEC4:"ivec4",UNSIGNED_INT:"uint",UNSIGNED_INT_VEC2:"uvec2",UNSIGNED_INT_VEC3:"uvec3",UNSIGNED_INT_VEC4:"uvec4",BOOL:"bool",BOOL_VEC2:"bvec2",BOOL_VEC3:"bvec3",BOOL_VEC4:"bvec4",FLOAT_MAT2:"mat2",FLOAT_MAT3:"mat3",FLOAT_MAT4:"mat4",SAMPLER_2D:"sampler2D",INT_SAMPLER_2D:"sampler2D",UNSIGNED_INT_SAMPLER_2D:"sampler2D",SAMPLER_CUBE:"samplerCube",INT_SAMPLER_CUBE:"samplerCube",UNSIGNED_INT_SAMPLER_CUBE:"samplerCube",SAMPLER_2D_ARRAY:"sampler2DArray",INT_SAMPLER_2D_ARRAY:"sampler2DArray",UNSIGNED_INT_SAMPLER_2D_ARRAY:"sampler2DArray"},Te={float:"float32",vec2:"float32x2",vec3:"float32x3",vec4:"float32x4",int:"sint32",ivec2:"sint32x2",ivec3:"sint32x3",ivec4:"sint32x4",uint:"uint32",uvec2:"uint32x2",uvec3:"uint32x3",uvec4:"uint32x4",bool:"uint32",bvec2:"uint32x2",bvec3:"uint32x3",bvec4:"uint32x4"};function be(e,t){if(!me){const t=Object.keys(Ee);me={};for(let r=0;r<t.length;++r){const n=t[r];me[e[n]]=Ee[n]}}return me[t]}function Re(e,t){const r=be(e,t);return Te[r]||"float32"}function Se(e,t){const r=e.getShaderSource(t).split("\n").map(((e,t)=>`${t}: ${e}`)),n=e.getShaderInfoLog(t),s=n.split("\n"),i={},a=s.map((e=>parseFloat(e.replace(/^ERROR\: 0\:([\d]+)\:.*$/,"$1")))).filter((e=>!(!e||i[e]||(i[e]=!0,0)))),o=[""];a.forEach((e=>{r[e-1]=`%c${r[e-1]}%c`,o.push("background: #FF0000; color:#FFFFFF; font-size: 10px","font-size: 10px")}));const c=r.join("\n");o[0]=c,console.error(n),console.groupCollapsed("click to view full shader code"),console.warn(...o),console.groupEnd()}const xe={textureCount:0,blockIndex:0};class pe{constructor(e){this._activeProgram=null,this._programDataHash=Object.create(null),this._nextIndex=0,this._boundUniformsIdsToIndexHash=Object.create(null),this._boundIndexToUniformsHash=Object.create(null),this._shaderSyncFunctions=Object.create(null),this._renderer=e}contextChange(e){this._gl=e,this._maxBindings=e.MAX_UNIFORM_BUFFER_BINDINGS?e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS):0,this._programDataHash=Object.create(null),this._boundUniformsIdsToIndexHash=Object.create(null),this._boundIndexToUniformsHash=Object.create(null),this._shaderSyncFunctions=Object.create(null),this._activeProgram=null,this.maxTextures=(0,i.a)()}bind(e,t){if(this._setProgram(e.glProgram),t)return;xe.textureCount=0,xe.blockIndex=0;let r=this._shaderSyncFunctions[e.glProgram._key];r||(r=this._shaderSyncFunctions[e.glProgram._key]=this._generateShaderSync(e,this)),r(this._renderer,e,xe)}updateUniformGroup(e){this._renderer.uniformGroup.updateUniformGroup(e,this._activeProgram,xe)}bindUniformBlock(e,t,r=0){const n=this._renderer.buffer,s=this._getProgramData(this._activeProgram),i=e._bufferResource;i&&this._renderer.ubo.updateUniformGroup(e),n.updateBuffer(e.buffer);let a=this._boundUniformsIdsToIndexHash[e.uid];if(void 0===a){const t=this._nextIndex++%this._maxBindings,r=this._boundIndexToUniformsHash[t];r&&(this._boundUniformsIdsToIndexHash[r.uid]=void 0),a=this._boundUniformsIdsToIndexHash[e.uid]=t,this._boundIndexToUniformsHash[t]=e,i?n.bindBufferRange(e.buffer,t,e.offset):n.bindBufferBase(e.buffer,t)}const o=this._gl,c=this._activeProgram._uniformBlockData[t].index;s.uniformBlockBindings[r]!==a&&(s.uniformBlockBindings[r]=a,o.uniformBlockBinding(s.program,c,a))}_setProgram(e){if(this._activeProgram===e)return;this._activeProgram=e;const t=this._getProgramData(e);this._gl.useProgram(t.program)}_getProgramData(e){return this._programDataHash[e._key]||this._createProgramData(e)}_createProgramData(e){const t=e._key;return this._programDataHash[t]=function(e,t){const r=de(e,e.VERTEX_SHADER,t.vertex),n=de(e,e.FRAGMENT_SHADER,t.fragment),s=e.createProgram();e.attachShader(s,r),e.attachShader(s,n);const i=t.transformFeedbackVaryings;i&&("function"!=typeof e.transformFeedbackVaryings?(0,E.R)("TransformFeedback is not supported but TransformFeedbackVaryings are given."):e.transformFeedbackVaryings(s,i.names,"separate"===i.bufferMode?e.SEPARATE_ATTRIBS:e.INTERLEAVED_ATTRIBS)),e.linkProgram(s),e.getProgramParameter(s,e.LINK_STATUS)||function(e,t,r,n){e.getProgramParameter(t,e.LINK_STATUS)||(e.getShaderParameter(r,e.COMPILE_STATUS)||Se(e,r),e.getShaderParameter(n,e.COMPILE_STATUS)||Se(e,n),console.error("PixiJS Error: Could not initialize shader."),""!==e.getProgramInfoLog(t)&&console.warn("PixiJS Warning: gl.getProgramInfoLog()",e.getProgramInfoLog(t)))}(e,s,r,n),t._attributeData=function(e,t,r=!1){const n={},s=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES);for(let r=0;r<s;r++){const s=t.getActiveAttrib(e,r);if(s.name.startsWith("gl_"))continue;const i=Re(t,s.type);n[s.name]={location:0,format:i,stride:(0,D.m)(i).stride,offset:0,instance:!1,start:0}}const i=Object.keys(n);if(r){i.sort(((e,t)=>e>t?1:-1));for(let r=0;r<i.length;r++)n[i[r]].location=r,t.bindAttribLocation(e,r,i[r]);t.linkProgram(e)}else for(let r=0;r<i.length;r++)n[i[r]].location=t.getAttribLocation(e,i[r]);return n}(s,e,!/^[ \t]*#[ \t]*version[ \t]+300[ \t]+es[ \t]*$/m.test(t.vertex)),t._uniformData=function(e,t){const r={},n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let s=0;s<n;s++){const n=t.getActiveUniform(e,s),i=n.name.replace(/\[.*?\]$/,""),a=!!n.name.match(/\[.*?\]$/),o=be(t,n.type);r[i]={name:i,index:s,type:o,size:n.size,isArray:a,value:ge(o,n.size)}}return r}(s,e),t._uniformBlockData=function(e,t){if(!t.ACTIVE_UNIFORM_BLOCKS)return{};const r={},n=t.getProgramParameter(e,t.ACTIVE_UNIFORM_BLOCKS);for(let s=0;s<n;s++){const n=t.getActiveUniformBlockName(e,s),i=t.getUniformBlockIndex(e,n),a=t.getActiveUniformBlockParameter(e,s,t.UNIFORM_BLOCK_DATA_SIZE);r[n]={name:n,index:i,size:a}}return r}(s,e),e.deleteShader(r),e.deleteShader(n);const a={};for(const r in t._uniformData){const n=t._uniformData[r];a[r]={location:e.getUniformLocation(s,r),value:ge(n.type,n.size)}}return new he(s,a)}(this._gl,e),this._programDataHash[t]}destroy(){for(const e of Object.keys(this._programDataHash))this._programDataHash[e].destroy(),this._programDataHash[e]=null;this._programDataHash=null,this._boundUniformsIdsToIndexHash=null}_generateShaderSync(e,t){return function(e,t){const r=[],n=["\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    "];let s=!1,i=0,a=0;const o=t._getProgramData(e.glProgram);for(const c in e.groups){const u=e.groups[c];r.push(`\n            resources = g[${c}].resources;\n        `);for(const _ in u.resources){const l=u.resources[_];if(l instanceof d.k)l.ubo?r.push(`\n                        sS.bindUniformBlock(\n                            resources[${_}],\n                            sS._uniformBindMap[${c}[${_}],\n                            ${i++}\n                        );\n                    `):r.push(`\n                        ugS.updateUniformGroup(resources[${_}], p, sD);\n                    `);else if(l instanceof le.d)r.push(`\n                    sS.bindUniformBlock(\n                        resources[${_}],\n                        sS._uniformBindMap[${c}[${_}],\n                        ${i++}\n                    );\n                `);else if(l instanceof w.v){const i=e._uniformBindMap[c][_],u=o.uniformData[i];u&&(s||(s=!0,n.push("\n                        var tS = r.texture;\n                        ")),t._gl.uniform1i(u.location,a),r.push(`\n                        tS.bind(resources[${_}], ${a});\n                    `),a++)}}}const c=[...n,...r].join("\n");return new Function("r","s","sD",c)}(e,t)}}pe.extension={type:[n.Ag.WebGLSystem],name:"shader"};var ve=r(8166);const Ae={f32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }","vec2<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }","vec3<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }","vec4<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }",i32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }","vec2<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }","vec3<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }","vec4<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }",u32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }","vec2<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }","vec3<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }","vec4<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }",bool:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }","vec2<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }","vec3<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }","vec4<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }","mat2x2<f32>":"gl.uniformMatrix2fv(location, false, v);","mat3x3<f32>":"gl.uniformMatrix3fv(location, false, v);","mat4x4<f32>":"gl.uniformMatrix4fv(location, false, v);"},Ne={f32:"gl.uniform1fv(location, v);","vec2<f32>":"gl.uniform2fv(location, v);","vec3<f32>":"gl.uniform3fv(location, v);","vec4<f32>":"gl.uniform4fv(location, v);","mat2x2<f32>":"gl.uniformMatrix2fv(location, false, v);","mat3x3<f32>":"gl.uniformMatrix3fv(location, false, v);","mat4x4<f32>":"gl.uniformMatrix4fv(location, false, v);",i32:"gl.uniform1iv(location, v);","vec2<i32>":"gl.uniform2iv(location, v);","vec3<i32>":"gl.uniform3iv(location, v);","vec4<i32>":"gl.uniform4iv(location, v);",u32:"gl.uniform1iv(location, v);","vec2<u32>":"gl.uniform2iv(location, v);","vec3<u32>":"gl.uniform3iv(location, v);","vec4<u32>":"gl.uniform4iv(location, v);",bool:"gl.uniform1iv(location, v);","vec2<bool>":"gl.uniform2iv(location, v);","vec3<bool>":"gl.uniform3iv(location, v);","vec4<bool>":"gl.uniform4iv(location, v);"};class Be{constructor(e){this._cache={},this._uniformGroupSyncHash={},this._renderer=e,this.gl=null,this._cache={}}contextChange(e){this.gl=e}updateUniformGroup(e,t,r){const n=this._renderer.shader._getProgramData(t);e.isStatic&&e._dirtyId===n.uniformDirtyGroups[e.uid]||(n.uniformDirtyGroups[e.uid]=e._dirtyId,this._getUniformSyncFunction(e,t)(n.uniformData,e.uniforms,this._renderer,r))}_getUniformSyncFunction(e,t){return this._uniformGroupSyncHash[e._signature]?.[t._key]||this._createUniformSyncFunction(e,t)}_createUniformSyncFunction(e,t){const r=this._uniformGroupSyncHash[e._signature]||(this._uniformGroupSyncHash[e._signature]={}),n=this._getSignature(e,t._uniformData,"u");return this._cache[n]||(this._cache[n]=this._generateUniformsSync(e,t._uniformData)),r[t._key]=this._cache[n],r[t._key]}_generateUniformsSync(e,t){return function(e,t){const r=["\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    "];for(const n in e.uniforms){if(!t[n]){e.uniforms[n]instanceof d.k?e.uniforms[n].ubo?r.push(`\n                        renderer.shader.bindUniformBlock(uv.${n}, "${n}");\n                    `):r.push(`\n                        renderer.shader.updateUniformGroup(uv.${n});\n                    `):e.uniforms[n]instanceof le.d&&r.push(`\n                        renderer.shader.bindBufferResource(uv.${n}, "${n}");\n                    `);continue}const s=e.uniformStructures[n];let i=!1;for(let e=0;e<ve.$.length;e++){const t=ve.$[e];if(s.type===t.type&&t.test(s)){r.push(`name = "${n}";`,ve.$[e].uniform),i=!0;break}}if(!i){const e=(1===s.size?Ae:Ne)[s.type].replace("location",`ud["${n}"].location`);r.push(`\n            cu = ud["${n}"];\n            cv = cu.value;\n            v = uv["${n}"];\n            ${e};`)}}return new Function("ud","uv","renderer","syncData",r.join("\n"))}(e,t)}_getSignature(e,t,r){const n=e.uniforms,s=[`${r}-`];for(const e in n)s.push(e),t[e]&&s.push(t[e].type);return s.join("-")}destroy(){this._renderer=null,this._cache=null}}Be.extension={type:[n.Ag.WebGLSystem],name:"uniformGroup"};const Ge=class e{constructor(){this.gl=null,this.stateId=0,this.polygonOffset=0,this.blendMode="none",this._blendEq=!1,this.map=[],this.map[0]=this.setBlend,this.map[1]=this.setOffset,this.map[2]=this.setCullFace,this.map[3]=this.setDepthTest,this.map[4]=this.setFrontFace,this.map[5]=this.setDepthMask,this.checks=[],this.defaultState=b.U.for2d()}contextChange(e){this.gl=e,this.blendModesMap=function(e){const t={};if(t.normal=[e.ONE,e.ONE_MINUS_SRC_ALPHA],t.add=[e.ONE,e.ONE],t.multiply=[e.DST_COLOR,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.screen=[e.ONE,e.ONE_MINUS_SRC_COLOR,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.none=[0,0],t["normal-npm"]=[e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA],t["add-npm"]=[e.SRC_ALPHA,e.ONE,e.ONE,e.ONE],t["screen-npm"]=[e.SRC_ALPHA,e.ONE_MINUS_SRC_COLOR,e.ONE,e.ONE_MINUS_SRC_ALPHA],t.erase=[e.ZERO,e.ONE_MINUS_SRC_ALPHA],e instanceof G.e.get().getWebGLRenderingContext()){const r=e.getExtension("EXT_blend_minmax");r&&(t.min=[e.ONE,e.ONE,e.ONE,e.ONE,r.MIN_EXT,r.MIN_EXT],t.max=[e.ONE,e.ONE,e.ONE,e.ONE,r.MAX_EXT,r.MAX_EXT])}else t.min=[e.ONE,e.ONE,e.ONE,e.ONE,e.MIN,e.MIN],t.max=[e.ONE,e.ONE,e.ONE,e.ONE,e.MAX,e.MAX];return t}(e),this.reset()}set(e){if(e=e||this.defaultState,this.stateId!==e.data){let t=this.stateId^e.data,r=0;for(;t;)1&t&&this.map[r].call(this,!!(e.data&1<<r)),t>>=1,r++;this.stateId=e.data}for(let t=0;t<this.checks.length;t++)this.checks[t](this,e)}forceState(e){e=e||this.defaultState;for(let t=0;t<this.map.length;t++)this.map[t].call(this,!!(e.data&1<<t));for(let t=0;t<this.checks.length;t++)this.checks[t](this,e);this.stateId=e.data}setBlend(t){this._updateCheck(e._checkBlendMode,t),this.gl[t?"enable":"disable"](this.gl.BLEND)}setOffset(t){this._updateCheck(e._checkPolygonOffset,t),this.gl[t?"enable":"disable"](this.gl.POLYGON_OFFSET_FILL)}setDepthTest(e){this.gl[e?"enable":"disable"](this.gl.DEPTH_TEST)}setDepthMask(e){this.gl.depthMask(e)}setCullFace(e){this.gl[e?"enable":"disable"](this.gl.CULL_FACE)}setFrontFace(e){this.gl.frontFace(this.gl[e?"CW":"CCW"])}setBlendMode(e){if(this.blendModesMap[e]||(e="normal"),e===this.blendMode)return;this.blendMode=e;const t=this.blendModesMap[e],r=this.gl;2===t.length?r.blendFunc(t[0],t[1]):r.blendFuncSeparate(t[0],t[1],t[2],t[3]),6===t.length?(this._blendEq=!0,r.blendEquationSeparate(t[4],t[5])):this._blendEq&&(this._blendEq=!1,r.blendEquationSeparate(r.FUNC_ADD,r.FUNC_ADD))}setPolygonOffset(e,t){this.gl.polygonOffset(e,t)}reset(){this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!1),this.forceState(this.defaultState),this._blendEq=!0,this.blendMode="",this.setBlendMode("normal")}_updateCheck(e,t){const r=this.checks.indexOf(e);t&&-1===r?this.checks.push(e):t||-1===r||this.checks.splice(r,1)}static _checkBlendMode(e,t){e.setBlendMode(t.blendMode)}static _checkPolygonOffset(e,t){e.setPolygonOffset(1,t.polygonOffset)}destroy(){this.gl=null,this.checks.length=0}};Ge.extension={type:[n.Ag.WebGLSystem],name:"state"};let Ie=Ge;class Ce{constructor(e){this.target=y.TEXTURE_2D,this.texture=e,this.width=-1,this.height=-1,this.type=P.UNSIGNED_BYTE,this.internalFormat=U.RGBA,this.format=U.RGBA,this.samplerType=0}}const De={id:"buffer",upload(e,t,r){t.width===e.width||t.height===e.height?r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,t.format,t.type,e.resource):r.texImage2D(t.target,0,t.internalFormat,e.width,e.height,0,t.format,t.type,e.resource),t.width=e.width,t.height=e.height}},Oe={"bc1-rgba-unorm":!0,"bc1-rgba-unorm-srgb":!0,"bc2-rgba-unorm":!0,"bc2-rgba-unorm-srgb":!0,"bc3-rgba-unorm":!0,"bc3-rgba-unorm-srgb":!0,"bc4-r-unorm":!0,"bc4-r-snorm":!0,"bc5-rg-unorm":!0,"bc5-rg-snorm":!0,"bc6h-rgb-ufloat":!0,"bc6h-rgb-float":!0,"bc7-rgba-unorm":!0,"bc7-rgba-unorm-srgb":!0,"etc2-rgb8unorm":!0,"etc2-rgb8unorm-srgb":!0,"etc2-rgb8a1unorm":!0,"etc2-rgb8a1unorm-srgb":!0,"etc2-rgba8unorm":!0,"etc2-rgba8unorm-srgb":!0,"eac-r11unorm":!0,"eac-r11snorm":!0,"eac-rg11unorm":!0,"eac-rg11snorm":!0,"astc-4x4-unorm":!0,"astc-4x4-unorm-srgb":!0,"astc-5x4-unorm":!0,"astc-5x4-unorm-srgb":!0,"astc-5x5-unorm":!0,"astc-5x5-unorm-srgb":!0,"astc-6x5-unorm":!0,"astc-6x5-unorm-srgb":!0,"astc-6x6-unorm":!0,"astc-6x6-unorm-srgb":!0,"astc-8x5-unorm":!0,"astc-8x5-unorm-srgb":!0,"astc-8x6-unorm":!0,"astc-8x6-unorm-srgb":!0,"astc-8x8-unorm":!0,"astc-8x8-unorm-srgb":!0,"astc-10x5-unorm":!0,"astc-10x5-unorm-srgb":!0,"astc-10x6-unorm":!0,"astc-10x6-unorm-srgb":!0,"astc-10x8-unorm":!0,"astc-10x8-unorm-srgb":!0,"astc-10x10-unorm":!0,"astc-10x10-unorm-srgb":!0,"astc-12x10-unorm":!0,"astc-12x10-unorm-srgb":!0,"astc-12x12-unorm":!0,"astc-12x12-unorm-srgb":!0},Ue={id:"compressed",upload(e,t,r){r.pixelStorei(r.UNPACK_ALIGNMENT,4);let n=e.pixelWidth,s=e.pixelHeight;const i=!!Oe[e.format];for(let a=0;a<e.resource.length;a++){const o=e.resource[a];i?r.compressedTexImage2D(r.TEXTURE_2D,a,t.internalFormat,n,s,0,o):r.texImage2D(r.TEXTURE_2D,a,t.internalFormat,n,s,0,t.format,t.type,o),n=Math.max(n>>1,1),s=Math.max(s>>1,1)}}},ye={id:"image",upload(e,t,r,n){const s="premultiply-alpha-on-upload"===e.alphaMode;r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s);const i=t.width,a=t.height,o=e.pixelWidth,c=e.pixelHeight,u=e.resourceWidth,_=e.resourceHeight;u<o||_<c?(i===o&&a===c||r.texImage2D(t.target,0,t.internalFormat,o,c,0,t.format,t.type,null),2===n?r.texSubImage2D(r.TEXTURE_2D,0,0,0,u,_,t.format,t.type,e.resource):r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.format,t.type,e.resource)):i===o||a===c?r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.format,t.type,e.resource):2===n?r.texImage2D(t.target,0,t.internalFormat,o,c,0,t.format,t.type,e.resource):r.texImage2D(t.target,0,t.internalFormat,t.format,t.type,e.resource),t.width=o,t.height=c}},Pe={id:"video",upload(e,t,r,n){e.isValid?ye.upload(e,t,r,n):r.texImage2D(t.target,0,t.internalFormat,1,1,0,t.format,t.type,null)}},Fe={linear:9729,nearest:9728},Me={linear:{linear:9987,nearest:9985},nearest:{linear:9986,nearest:9984}},Le={"clamp-to-edge":33071,repeat:10497,"mirror-repeat":33648},He={never:512,less:513,equal:514,"less-equal":515,greater:516,"not-equal":517,"greater-equal":518,always:519};function we(e,t,r,n,s,i,a,o){const c=i;if(!o||"repeat"!==e.addressModeU||"repeat"!==e.addressModeV||"repeat"!==e.addressModeW){const r=Le[a?"clamp-to-edge":e.addressModeU],n=Le[a?"clamp-to-edge":e.addressModeV],i=Le[a?"clamp-to-edge":e.addressModeW];t[s](c,t.TEXTURE_WRAP_S,r),t[s](c,t.TEXTURE_WRAP_T,n),t.TEXTURE_WRAP_R&&t[s](c,t.TEXTURE_WRAP_R,i)}if(o&&"linear"===e.magFilter||t[s](c,t.TEXTURE_MAG_FILTER,Fe[e.magFilter]),r){if(!o||"linear"!==e.mipmapFilter){const r=Me[e.minFilter][e.mipmapFilter];t[s](c,t.TEXTURE_MIN_FILTER,r)}}else t[s](c,t.TEXTURE_MIN_FILTER,Fe[e.minFilter]);if(n&&e.maxAnisotropy>1){const r=Math.min(e.maxAnisotropy,t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT));t[s](c,n.TEXTURE_MAX_ANISOTROPY_EXT,r)}e.compare&&t[s](c,t.TEXTURE_COMPARE_FUNC,He[e.compare])}class Ve{constructor(e){this.managedTextures=[],this._glTextures=Object.create(null),this._glSamplers=Object.create(null),this._boundTextures=[],this._activeTextureLocation=-1,this._boundSamplers=Object.create(null),this._uploads={image:ye,buffer:De,video:Pe,compressed:Ue},this._useSeparateSamplers=!1,this._renderer=e}contextChange(e){this._gl=e,this._mapFormatToInternalFormat||(this._mapFormatToInternalFormat=function(e,t){let r={},n=e.RGBA;return e instanceof G.e.get().getWebGLRenderingContext()?t.srgb&&(r={"rgba8unorm-srgb":t.srgb.SRGB8_ALPHA8_EXT,"bgra8unorm-srgb":t.srgb.SRGB8_ALPHA8_EXT}):(r={"rgba8unorm-srgb":e.SRGB8_ALPHA8,"bgra8unorm-srgb":e.SRGB8_ALPHA8},n=e.RGBA8),{r8unorm:e.R8,r8snorm:e.R8_SNORM,r8uint:e.R8UI,r8sint:e.R8I,r16uint:e.R16UI,r16sint:e.R16I,r16float:e.R16F,rg8unorm:e.RG8,rg8snorm:e.RG8_SNORM,rg8uint:e.RG8UI,rg8sint:e.RG8I,r32uint:e.R32UI,r32sint:e.R32I,r32float:e.R32F,rg16uint:e.RG16UI,rg16sint:e.RG16I,rg16float:e.RG16F,rgba8unorm:e.RGBA,...r,rgba8snorm:e.RGBA8_SNORM,rgba8uint:e.RGBA8UI,rgba8sint:e.RGBA8I,bgra8unorm:n,rgb9e5ufloat:e.RGB9_E5,rgb10a2unorm:e.RGB10_A2,rg11b10ufloat:e.R11F_G11F_B10F,rg32uint:e.RG32UI,rg32sint:e.RG32I,rg32float:e.RG32F,rgba16uint:e.RGBA16UI,rgba16sint:e.RGBA16I,rgba16float:e.RGBA16F,rgba32uint:e.RGBA32UI,rgba32sint:e.RGBA32I,rgba32float:e.RGBA32F,stencil8:e.STENCIL_INDEX8,depth16unorm:e.DEPTH_COMPONENT16,depth24plus:e.DEPTH_COMPONENT24,"depth24plus-stencil8":e.DEPTH24_STENCIL8,depth32float:e.DEPTH_COMPONENT32F,"depth32float-stencil8":e.DEPTH32F_STENCIL8,...t.s3tc?{"bc1-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,"bc2-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,"bc3-rgba-unorm":t.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT}:{},...t.s3tc_sRGB?{"bc1-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,"bc2-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,"bc3-rgba-unorm-srgb":t.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}:{},...t.rgtc?{"bc4-r-unorm":t.rgtc.COMPRESSED_RED_RGTC1_EXT,"bc4-r-snorm":t.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,"bc5-rg-unorm":t.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,"bc5-rg-snorm":t.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}:{},...t.bptc?{"bc6h-rgb-float":t.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,"bc6h-rgb-ufloat":t.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,"bc7-rgba-unorm":t.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,"bc7-rgba-unorm-srgb":t.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT}:{},...t.etc?{"etc2-rgb8unorm":t.etc.COMPRESSED_RGB8_ETC2,"etc2-rgb8unorm-srgb":t.etc.COMPRESSED_SRGB8_ETC2,"etc2-rgb8a1unorm":t.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,"etc2-rgb8a1unorm-srgb":t.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,"etc2-rgba8unorm":t.etc.COMPRESSED_RGBA8_ETC2_EAC,"etc2-rgba8unorm-srgb":t.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,"eac-r11unorm":t.etc.COMPRESSED_R11_EAC,"eac-rg11unorm":t.etc.COMPRESSED_SIGNED_RG11_EAC}:{},...t.astc?{"astc-4x4-unorm":t.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,"astc-4x4-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,"astc-5x4-unorm":t.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,"astc-5x4-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,"astc-5x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,"astc-5x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,"astc-6x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,"astc-6x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,"astc-6x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,"astc-6x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,"astc-8x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,"astc-8x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,"astc-8x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,"astc-8x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,"astc-8x8-unorm":t.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,"astc-8x8-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,"astc-10x5-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,"astc-10x5-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,"astc-10x6-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,"astc-10x6-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,"astc-10x8-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,"astc-10x8-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,"astc-10x10-unorm":t.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,"astc-10x10-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,"astc-12x10-unorm":t.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,"astc-12x10-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,"astc-12x12-unorm":t.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,"astc-12x12-unorm-srgb":t.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR}:{}}}(e,this._renderer.context.extensions),this._mapFormatToType=function(e){return{r8unorm:e.UNSIGNED_BYTE,r8snorm:e.BYTE,r8uint:e.UNSIGNED_BYTE,r8sint:e.BYTE,r16uint:e.UNSIGNED_SHORT,r16sint:e.SHORT,r16float:e.HALF_FLOAT,rg8unorm:e.UNSIGNED_BYTE,rg8snorm:e.BYTE,rg8uint:e.UNSIGNED_BYTE,rg8sint:e.BYTE,r32uint:e.UNSIGNED_INT,r32sint:e.INT,r32float:e.FLOAT,rg16uint:e.UNSIGNED_SHORT,rg16sint:e.SHORT,rg16float:e.HALF_FLOAT,rgba8unorm:e.UNSIGNED_BYTE,"rgba8unorm-srgb":e.UNSIGNED_BYTE,rgba8snorm:e.BYTE,rgba8uint:e.UNSIGNED_BYTE,rgba8sint:e.BYTE,bgra8unorm:e.UNSIGNED_BYTE,"bgra8unorm-srgb":e.UNSIGNED_BYTE,rgb9e5ufloat:e.UNSIGNED_INT_5_9_9_9_REV,rgb10a2unorm:e.UNSIGNED_INT_2_10_10_10_REV,rg11b10ufloat:e.UNSIGNED_INT_10F_11F_11F_REV,rg32uint:e.UNSIGNED_INT,rg32sint:e.INT,rg32float:e.FLOAT,rgba16uint:e.UNSIGNED_SHORT,rgba16sint:e.SHORT,rgba16float:e.HALF_FLOAT,rgba32uint:e.UNSIGNED_INT,rgba32sint:e.INT,rgba32float:e.FLOAT,stencil8:e.UNSIGNED_BYTE,depth16unorm:e.UNSIGNED_SHORT,depth24plus:e.UNSIGNED_INT,"depth24plus-stencil8":e.UNSIGNED_INT_24_8,depth32float:e.FLOAT,"depth32float-stencil8":e.FLOAT_32_UNSIGNED_INT_24_8_REV}}(e),this._mapFormatToFormat=function(e){return{r8unorm:e.RED,r8snorm:e.RED,r8uint:e.RED,r8sint:e.RED,r16uint:e.RED,r16sint:e.RED,r16float:e.RED,rg8unorm:e.RG,rg8snorm:e.RG,rg8uint:e.RG,rg8sint:e.RG,r32uint:e.RED,r32sint:e.RED,r32float:e.RED,rg16uint:e.RG,rg16sint:e.RG,rg16float:e.RG,rgba8unorm:e.RGBA,"rgba8unorm-srgb":e.RGBA,rgba8snorm:e.RGBA,rgba8uint:e.RGBA,rgba8sint:e.RGBA,bgra8unorm:e.RGBA,"bgra8unorm-srgb":e.RGBA,rgb9e5ufloat:e.RGB,rgb10a2unorm:e.RGBA,rg11b10ufloat:e.RGB,rg32uint:e.RG,rg32sint:e.RG,rg32float:e.RG,rgba16uint:e.RGBA,rgba16sint:e.RGBA,rgba16float:e.RGBA,rgba32uint:e.RGBA,rgba32sint:e.RGBA,rgba32float:e.RGBA,stencil8:e.STENCIL_INDEX8,depth16unorm:e.DEPTH_COMPONENT,depth24plus:e.DEPTH_COMPONENT,"depth24plus-stencil8":e.DEPTH_STENCIL,depth32float:e.DEPTH_COMPONENT,"depth32float-stencil8":e.DEPTH_STENCIL}}(e)),this._glTextures=Object.create(null),this._glSamplers=Object.create(null),this._boundSamplers=Object.create(null);for(let e=0;e<16;e++)this.bind(m.g.EMPTY,e)}initSource(e){this.bind(e)}bind(e,t=0){const r=e.source;e?(this.bindSource(r,t),this._useSeparateSamplers&&this._bindSampler(r.style,t)):(this.bindSource(null,t),this._useSeparateSamplers&&this._bindSampler(null,t))}bindSource(e,t=0){const r=this._gl;if(e._touched=this._renderer.textureGC.count,this._boundTextures[t]!==e){this._boundTextures[t]=e,this._activateLocation(t),e=e||m.g.EMPTY.source;const n=this.getGlSource(e);r.bindTexture(n.target,n.texture)}}_bindSampler(e,t=0){const r=this._gl;if(!e)return this._boundSamplers[t]=null,void r.bindSampler(t,null);const n=this._getGlSampler(e);this._boundSamplers[t]!==n&&(this._boundSamplers[t]=n,r.bindSampler(t,n))}unbind(e){const t=e.source,r=this._boundTextures,n=this._gl;for(let e=0;e<r.length;e++)if(r[e]===t){this._activateLocation(e);const s=this.getGlSource(t);n.bindTexture(s.target,null),r[e]=null}}_activateLocation(e){this._activeTextureLocation!==e&&(this._activeTextureLocation=e,this._gl.activeTexture(this._gl.TEXTURE0+e))}_initSource(e){const t=this._gl,r=new Ce(t.createTexture());if(r.type=this._mapFormatToType[e.format],r.internalFormat=this._mapFormatToInternalFormat[e.format],r.format=this._mapFormatToFormat[e.format],e.autoGenerateMipmaps&&(this._renderer.context.supports.nonPowOf2mipmaps||e.isPowerOfTwo)){const t=Math.max(e.width,e.height);e.mipLevelCount=Math.floor(Math.log2(t))+1}return this._glTextures[e.uid]=r,this.managedTextures.includes(e)||(e.on("update",this.onSourceUpdate,this),e.on("resize",this.onSourceUpdate,this),e.on("styleChange",this.onStyleChange,this),e.on("destroy",this.onSourceDestroy,this),e.on("unload",this.onSourceUnload,this),e.on("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.push(e)),this.onSourceUpdate(e),this.updateStyle(e,!1),r}onStyleChange(e){this.updateStyle(e,!1)}updateStyle(e,t){const r=this._gl,n=this.getGlSource(e);r.bindTexture(r.TEXTURE_2D,n.texture),this._boundTextures[this._activeTextureLocation]=e,we(e.style,r,e.mipLevelCount>1,this._renderer.context.extensions.anisotropicFiltering,"texParameteri",r.TEXTURE_2D,!this._renderer.context.supports.nonPowOf2wrapping&&!e.isPowerOfTwo,t)}onSourceUnload(e){const t=this._glTextures[e.uid];t&&(this.unbind(e),this._glTextures[e.uid]=null,this._gl.deleteTexture(t.texture))}onSourceUpdate(e){const t=this._gl,r=this.getGlSource(e);t.bindTexture(t.TEXTURE_2D,r.texture),this._boundTextures[this._activeTextureLocation]=e,this._uploads[e.uploadMethodId]?this._uploads[e.uploadMethodId].upload(e,r,t,this._renderer.context.webGLVersion):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e.pixelWidth,e.pixelHeight,0,t.RGBA,t.UNSIGNED_BYTE,null),e.autoGenerateMipmaps&&e.mipLevelCount>1&&this.onUpdateMipmaps(e,!1)}onUpdateMipmaps(e,t=!0){t&&this.bindSource(e,0);const r=this.getGlSource(e);this._gl.generateMipmap(r.target)}onSourceDestroy(e){e.off("destroy",this.onSourceDestroy,this),e.off("update",this.onSourceUpdate,this),e.off("resize",this.onSourceUpdate,this),e.off("unload",this.onSourceUnload,this),e.off("styleChange",this.onStyleChange,this),e.off("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.splice(this.managedTextures.indexOf(e),1),this.onSourceUnload(e)}_initSampler(e){const t=this._gl,r=this._gl.createSampler();return this._glSamplers[e._resourceId]=r,we(e,t,this._boundTextures[this._activeTextureLocation].mipLevelCount>1,this._renderer.context.extensions.anisotropicFiltering,"samplerParameteri",r,!1,!0),this._glSamplers[e._resourceId]}_getGlSampler(e){return this._glSamplers[e._resourceId]||this._initSampler(e)}getGlSource(e){return this._glTextures[e.uid]||this._initSource(e)}generateCanvas(e){const{pixels:t,width:r,height:n}=this.getPixels(e),s=G.e.get().createCanvas();s.width=r,s.height=n;const i=s.getContext("2d");if(i){const e=i.createImageData(r,n);e.data.set(t),i.putImageData(e,0,0)}return s}getPixels(e){const t=e.source.resolution,r=e.frame,n=Math.max(Math.round(r.width*t),1),s=Math.max(Math.round(r.height*t),1),i=new Uint8Array(4*n*s),a=this._renderer,o=a.renderTarget.getRenderTarget(e),c=a.renderTarget.getGpuRenderTarget(o),u=a.gl;return u.bindFramebuffer(u.FRAMEBUFFER,c.resolveTargetFramebuffer),u.readPixels(Math.round(r.x*t),Math.round(r.y*t),n,s,u.RGBA,u.UNSIGNED_BYTE,i),{pixels:new Uint8ClampedArray(i.buffer),width:n,height:s}}destroy(){this.managedTextures.slice().forEach((e=>this.onSourceDestroy(e))),this.managedTextures=null,this._renderer=null}}Ve.extension={type:[n.Ag.WebGLSystem],name:"texture"};const ke=[...x.i,ne,W,C,B,Ve,_e,L,Be,pe,j,Ie,z,Y],Xe=[...x.f],We=[R,T,f],Ye=[],je=[],Ke=[];n.XO.handleByNamedList(n.Ag.WebGLSystem,Ye),n.XO.handleByNamedList(n.Ag.WebGLPipes,je),n.XO.handleByNamedList(n.Ag.WebGLPipesAdaptor,Ke),n.XO.add(...ke,...Xe,...We);class $e extends S.k{constructor(){super({name:"webgl",type:p.W.WEBGL,systems:Ye,renderPipes:je,renderPipeAdaptors:Ke})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QS9FLEVBQ0ExSixFQUNBaEksRUFDQWl3QixHQUNBL1QsR0FDQW5SLEVBQ0F1YyxHQUNBMUYsR0FDQTdQLEVBQ0FvYSxHQUNBN1osRUFDQVgsR0FFSW1yQixHQUFvQixJQUFJLEtBQ3hCQyxHQUF1QixDQUFDbitCLEVBQWdCbkIsRUFBZTFELEdBQ3ZEaWpDLEdBQVUsR0FDVkMsR0FBYyxHQUNkQyxHQUFxQixHQUMzQixLQUFXQyxrQkFBa0IsS0FBY3o2QixZQUFhczZCLElBQ3hELEtBQVdHLGtCQUFrQixLQUFjQyxXQUFZSCxJQUN2RCxLQUFXRSxrQkFBa0IsS0FBYzMvQixrQkFBbUIwL0IsSUFDOUQsS0FBVzc5QixPQUFPdTlCLE1BQXdCRSxNQUFzQkMsSUFDaEUsTUFBTU0sV0FBc0JDLEVBQUEsRUFDMUIsV0FBQXorQixHQVFFOFgsTUFQcUIsQ0FDbkIvYixLQUFNLFFBQ05OLEtBQU0sSUFBYWlqQyxNQUNuQlAsV0FDQUMsZUFDQUMsdUJBR0osRSIsInNvdXJjZXMiOlsid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9ncmFwaGljcy9nbC9HbEdyYXBoaWNzQWRhcHRvci5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL21lc2gvZ2wvR2xNZXNoQWRhcHRvci5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9iYXRjaGVyL2dsL0dsQmF0Y2hBZGFwdG9yLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9idWZmZXIvY29uc3QubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL2J1ZmZlci9HbEJ1ZmZlci5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvYnVmZmVyL0dsQnVmZmVyU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9jb250ZXh0L0dsQ29udGV4dFN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS9jb25zdC5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvZ2VvbWV0cnkvdXRpbHMvZ2V0R2xUeXBlRnJvbUZvcm1hdC5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvZ2VvbWV0cnkvR2xHZW9tZXRyeVN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvR2xCYWNrQnVmZmVyU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9HbENvbG9yTWFza1N5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvR2xFbmNvZGVyU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9HbFN0ZW5jaWxTeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci91dGlscy9jcmVhdGVVYm9FbGVtZW50c1NURDQwLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvdXRpbHMvZ2VuZXJhdGVBcnJheVN5bmNTVEQ0MC5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL3V0aWxzL2NyZWF0ZVVib1N5bmNTVEQ0MC5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvR2xVYm9TeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL0dsUmVuZGVyVGFyZ2V0Lm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9yZW5kZXJUYXJnZXQvR2xSZW5kZXJUYXJnZXRBZGFwdG9yLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9yZW5kZXJUYXJnZXQvR2xSZW5kZXJUYXJnZXRTeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9HbFByb2dyYW1EYXRhLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9jb21waWxlU2hhZGVyLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9kZWZhdWx0VmFsdWUubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL21hcFR5cGUubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2xvZ1Byb2dyYW1FcnJvci5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL0dsU2hhZGVyU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9nZW5lcmF0ZVByb2dyYW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2V4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL3Byb2dyYW0vZ2V0VW5pZm9ybURhdGEubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2dldFVib0RhdGEubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9HZW5lcmF0ZVNoYWRlclN5bmNDb2RlLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvdXRpbHMvZ2VuZXJhdGVVbmlmb3Jtc1N5bmNUeXBlcy5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL0dsVW5pZm9ybUdyb3VwU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvdXRpbHMvZ2VuZXJhdGVVbmlmb3Jtc1N5bmMubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3N0YXRlL0dsU3RhdGVTeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3N0YXRlL21hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS9HbFRleHR1cmUubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXBsb2FkZXJzL2dsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS91cGxvYWRlcnMvZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL3VwbG9hZGVycy9nbFVwbG9hZEltYWdlUmVzb3VyY2UubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXBsb2FkZXJzL2dsVXBsb2FkVmlkZW9SZXNvdXJjZS5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS91dGlscy9waXhpVG9HbE1hcHMubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXRpbHMvYXBwbHlTdHlsZVBhcmFtcy5tanMiLCJ3ZWJwYWNrOi8vbmV0c2ltLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS9HbFRleHR1cmVTeXN0ZW0ubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXRpbHMvbWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0Lm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL3V0aWxzL21hcEZvcm1hdFRvR2xUeXBlLm1qcyIsIndlYnBhY2s6Ly9uZXRzaW0vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL3V0aWxzL21hcEZvcm1hdFRvR2xGb3JtYXQubWpzIiwid2VicGFjazovL25ldHNpbS8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL1dlYkdMUmVuZGVyZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IGdldE1heFRleHR1cmVzUGVyQmF0Y2ggfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvYmF0Y2hlci9nbC91dGlscy9tYXhSZWNvbW1lbmRlZFRleHR1cmVzLm1qcyc7XG5pbXBvcnQgeyBjb21waWxlSGlnaFNoYWRlckdsUHJvZ3JhbSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9jb21waWxlSGlnaFNoYWRlclRvUHJvZ3JhbS5tanMnO1xuaW1wb3J0IHsgY29sb3JCaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9jb2xvckJpdC5tanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9nZW5lcmF0ZVRleHR1cmVCYXRjaEJpdC5tanMnO1xuaW1wb3J0IHsgbG9jYWxVbmlmb3JtQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvbG9jYWxVbmlmb3JtQml0Lm1qcyc7XG5pbXBvcnQgeyByb3VuZFBpeGVsc0JpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL3JvdW5kUGl4ZWxzQml0Lm1qcyc7XG5pbXBvcnQgeyBnZXRCYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvZ2V0QmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cC5tanMnO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1NoYWRlci5tanMnO1xuaW1wb3J0IHsgVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1VuaWZvcm1Hcm91cC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsR3JhcGhpY3NBZGFwdG9yIHtcbiAgaW5pdCgpIHtcbiAgICBjb25zdCB1bmlmb3JtcyA9IG5ldyBVbmlmb3JtR3JvdXAoe1xuICAgICAgdUNvbG9yOiB7IHZhbHVlOiBuZXcgRmxvYXQzMkFycmF5KFsxLCAxLCAxLCAxXSksIHR5cGU6IFwidmVjNDxmMzI+XCIgfSxcbiAgICAgIHVUcmFuc2Zvcm1NYXRyaXg6IHsgdmFsdWU6IG5ldyBNYXRyaXgoKSwgdHlwZTogXCJtYXQzeDM8ZjMyPlwiIH0sXG4gICAgICB1Um91bmQ6IHsgdmFsdWU6IDAsIHR5cGU6IFwiZjMyXCIgfVxuICAgIH0pO1xuICAgIGNvbnN0IG1heFRleHR1cmVzID0gZ2V0TWF4VGV4dHVyZXNQZXJCYXRjaCgpO1xuICAgIGNvbnN0IGdsUHJvZ3JhbSA9IGNvbXBpbGVIaWdoU2hhZGVyR2xQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwiZ3JhcGhpY3NcIixcbiAgICAgIGJpdHM6IFtcbiAgICAgICAgY29sb3JCaXRHbCxcbiAgICAgICAgZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXRHbChtYXhUZXh0dXJlcyksXG4gICAgICAgIGxvY2FsVW5pZm9ybUJpdEdsLFxuICAgICAgICByb3VuZFBpeGVsc0JpdEdsXG4gICAgICBdXG4gICAgfSk7XG4gICAgdGhpcy5zaGFkZXIgPSBuZXcgU2hhZGVyKHtcbiAgICAgIGdsUHJvZ3JhbSxcbiAgICAgIHJlc291cmNlczoge1xuICAgICAgICBsb2NhbFVuaWZvcm1zOiB1bmlmb3JtcyxcbiAgICAgICAgYmF0Y2hTYW1wbGVyczogZ2V0QmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cChtYXhUZXh0dXJlcylcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBleGVjdXRlKGdyYXBoaWNzUGlwZSwgcmVuZGVyYWJsZSkge1xuICAgIGNvbnN0IGNvbnRleHQgPSByZW5kZXJhYmxlLmNvbnRleHQ7XG4gICAgY29uc3Qgc2hhZGVyID0gY29udGV4dC5jdXN0b21TaGFkZXIgfHwgdGhpcy5zaGFkZXI7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBncmFwaGljc1BpcGUucmVuZGVyZXI7XG4gICAgY29uc3QgY29udGV4dFN5c3RlbSA9IHJlbmRlcmVyLmdyYXBoaWNzQ29udGV4dDtcbiAgICBjb25zdCB7XG4gICAgICBiYXRjaGVyLFxuICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgfSA9IGNvbnRleHRTeXN0ZW0uZ2V0Q29udGV4dFJlbmRlckRhdGEoY29udGV4dCk7XG4gICAgc2hhZGVyLmdyb3Vwc1swXSA9IHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLmJpbmRHcm91cDtcbiAgICByZW5kZXJlci5zdGF0ZS5zZXQoZ3JhcGhpY3NQaXBlLnN0YXRlKTtcbiAgICByZW5kZXJlci5zaGFkZXIuYmluZChzaGFkZXIpO1xuICAgIHJlbmRlcmVyLmdlb21ldHJ5LmJpbmQoYmF0Y2hlci5nZW9tZXRyeSwgc2hhZGVyLmdsUHJvZ3JhbSk7XG4gICAgY29uc3QgYmF0Y2hlcyA9IGluc3RydWN0aW9ucy5pbnN0cnVjdGlvbnM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0cnVjdGlvbnMuaW5zdHJ1Y3Rpb25TaXplOyBpKyspIHtcbiAgICAgIGNvbnN0IGJhdGNoID0gYmF0Y2hlc1tpXTtcbiAgICAgIGlmIChiYXRjaC5zaXplKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmF0Y2gudGV4dHVyZXMuY291bnQ7IGorKykge1xuICAgICAgICAgIHJlbmRlcmVyLnRleHR1cmUuYmluZChiYXRjaC50ZXh0dXJlcy50ZXh0dXJlc1tqXSwgaik7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyZXIuZ2VvbWV0cnkuZHJhdyhcInRyaWFuZ2xlLWxpc3RcIiwgYmF0Y2guc2l6ZSwgYmF0Y2guc3RhcnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuc2hhZGVyLmRlc3Ryb3kodHJ1ZSk7XG4gICAgdGhpcy5zaGFkZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xHcmFwaGljc0FkYXB0b3IuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzQWRhcHRvclxuICBdLFxuICBuYW1lOiBcImdyYXBoaWNzXCJcbn07XG5cbmV4cG9ydCB7IEdsR3JhcGhpY3NBZGFwdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbEdyYXBoaWNzQWRhcHRvci5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi8uLi8uLi9tYXRocy9tYXRyaXgvTWF0cml4Lm1qcyc7XG5pbXBvcnQgeyBjb21waWxlSGlnaFNoYWRlckdsUHJvZ3JhbSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9jb21waWxlSGlnaFNoYWRlclRvUHJvZ3JhbS5tanMnO1xuaW1wb3J0IHsgbG9jYWxVbmlmb3JtQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvbG9jYWxVbmlmb3JtQml0Lm1qcyc7XG5pbXBvcnQgeyByb3VuZFBpeGVsc0JpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL3JvdW5kUGl4ZWxzQml0Lm1qcyc7XG5pbXBvcnQgeyB0ZXh0dXJlQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvdGV4dHVyZUJpdC5tanMnO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1NoYWRlci5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsTWVzaEFkYXB0b3Ige1xuICBpbml0KCkge1xuICAgIGNvbnN0IGdsUHJvZ3JhbSA9IGNvbXBpbGVIaWdoU2hhZGVyR2xQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwibWVzaFwiLFxuICAgICAgYml0czogW1xuICAgICAgICBsb2NhbFVuaWZvcm1CaXRHbCxcbiAgICAgICAgdGV4dHVyZUJpdEdsLFxuICAgICAgICByb3VuZFBpeGVsc0JpdEdsXG4gICAgICBdXG4gICAgfSk7XG4gICAgdGhpcy5fc2hhZGVyID0gbmV3IFNoYWRlcih7XG4gICAgICBnbFByb2dyYW0sXG4gICAgICByZXNvdXJjZXM6IHtcbiAgICAgICAgdVRleHR1cmU6IFRleHR1cmUuRU1QVFkuc291cmNlLFxuICAgICAgICB0ZXh0dXJlVW5pZm9ybXM6IHtcbiAgICAgICAgICB1VGV4dHVyZU1hdHJpeDogeyB0eXBlOiBcIm1hdDN4MzxmMzI+XCIsIHZhbHVlOiBuZXcgTWF0cml4KCkgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZXhlY3V0ZShtZXNoUGlwZSwgbWVzaCkge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gbWVzaFBpcGUucmVuZGVyZXI7XG4gICAgbGV0IHNoYWRlciA9IG1lc2guX3NoYWRlcjtcbiAgICBpZiAoIXNoYWRlcikge1xuICAgICAgc2hhZGVyID0gdGhpcy5fc2hhZGVyO1xuICAgICAgY29uc3QgdGV4dHVyZSA9IG1lc2gudGV4dHVyZTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuICAgICAgc2hhZGVyLnJlc291cmNlcy51VGV4dHVyZSA9IHNvdXJjZTtcbiAgICAgIHNoYWRlci5yZXNvdXJjZXMudVNhbXBsZXIgPSBzb3VyY2Uuc3R5bGU7XG4gICAgICBzaGFkZXIucmVzb3VyY2VzLnRleHR1cmVVbmlmb3Jtcy51bmlmb3Jtcy51VGV4dHVyZU1hdHJpeCA9IHRleHR1cmUudGV4dHVyZU1hdHJpeC5tYXBDb29yZDtcbiAgICB9IGVsc2UgaWYgKCFzaGFkZXIuZ2xQcm9ncmFtKSB7XG4gICAgICB3YXJuKFwiTWVzaCBzaGFkZXIgaGFzIG5vIGdsUHJvZ3JhbVwiLCBtZXNoLnNoYWRlcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNoYWRlci5ncm91cHNbMTAwXSA9IHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLmJpbmRHcm91cDtcbiAgICBzaGFkZXIuZ3JvdXBzWzEwMV0gPSBtZXNoUGlwZS5sb2NhbFVuaWZvcm1zQmluZEdyb3VwO1xuICAgIHJlbmRlcmVyLmVuY29kZXIuZHJhdyh7XG4gICAgICBnZW9tZXRyeTogbWVzaC5fZ2VvbWV0cnksXG4gICAgICBzaGFkZXIsXG4gICAgICBzdGF0ZTogbWVzaC5zdGF0ZVxuICAgIH0pO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc2hhZGVyLmRlc3Ryb3kodHJ1ZSk7XG4gICAgdGhpcy5fc2hhZGVyID0gbnVsbDtcbiAgfVxufVxuR2xNZXNoQWRhcHRvci5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXNBZGFwdG9yXG4gIF0sXG4gIG5hbWU6IFwibWVzaFwiXG59O1xuXG5leHBvcnQgeyBHbE1lc2hBZGFwdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbE1lc2hBZGFwdG9yLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vLi4vcmVuZGVyZXJzL3NoYXJlZC9zdGF0ZS9TdGF0ZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsQmF0Y2hBZGFwdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZGlkVXBsb2FkID0gZmFsc2U7XG4gICAgdGhpcy5fdGVtcFN0YXRlID0gU3RhdGUuZm9yMmQoKTtcbiAgfVxuICBpbml0KGJhdGNoZXJQaXBlKSB7XG4gICAgYmF0Y2hlclBpcGUucmVuZGVyZXIucnVubmVycy5jb250ZXh0Q2hhbmdlLmFkZCh0aGlzKTtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKCkge1xuICAgIHRoaXMuX2RpZFVwbG9hZCA9IGZhbHNlO1xuICB9XG4gIHN0YXJ0KGJhdGNoUGlwZSwgZ2VvbWV0cnksIHNoYWRlcikge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gYmF0Y2hQaXBlLnJlbmRlcmVyO1xuICAgIHJlbmRlcmVyLnNoYWRlci5iaW5kKHNoYWRlciwgdGhpcy5fZGlkVXBsb2FkKTtcbiAgICByZW5kZXJlci5zaGFkZXIudXBkYXRlVW5pZm9ybUdyb3VwKHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLnVuaWZvcm1Hcm91cCk7XG4gICAgcmVuZGVyZXIuZ2VvbWV0cnkuYmluZChnZW9tZXRyeSwgc2hhZGVyLmdsUHJvZ3JhbSk7XG4gIH1cbiAgZXhlY3V0ZShiYXRjaFBpcGUsIGJhdGNoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBiYXRjaFBpcGUucmVuZGVyZXI7XG4gICAgdGhpcy5fZGlkVXBsb2FkID0gdHJ1ZTtcbiAgICB0aGlzLl90ZW1wU3RhdGUuYmxlbmRNb2RlID0gYmF0Y2guYmxlbmRNb2RlO1xuICAgIHJlbmRlcmVyLnN0YXRlLnNldCh0aGlzLl90ZW1wU3RhdGUpO1xuICAgIGNvbnN0IHRleHR1cmVzID0gYmF0Y2gudGV4dHVyZXMudGV4dHVyZXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXRjaC50ZXh0dXJlcy5jb3VudDsgaSsrKSB7XG4gICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmQodGV4dHVyZXNbaV0sIGkpO1xuICAgIH1cbiAgICByZW5kZXJlci5nZW9tZXRyeS5kcmF3KFwidHJpYW5nbGUtbGlzdFwiLCBiYXRjaC5zaXplLCBiYXRjaC5zdGFydCk7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbEJhdGNoQWRhcHRvci5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXNBZGFwdG9yXG4gIF0sXG4gIG5hbWU6IFwiYmF0Y2hcIlxufTtcblxuZXhwb3J0IHsgR2xCYXRjaEFkYXB0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsQmF0Y2hBZGFwdG9yLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIEJVRkZFUl9UWVBFID0gLyogQF9fUFVSRV9fICovICgoQlVGRkVSX1RZUEUyKSA9PiB7XG4gIEJVRkZFUl9UWVBFMltCVUZGRVJfVFlQRTJbXCJFTEVNRU5UX0FSUkFZX0JVRkZFUlwiXSA9IDM0OTYzXSA9IFwiRUxFTUVOVF9BUlJBWV9CVUZGRVJcIjtcbiAgQlVGRkVSX1RZUEUyW0JVRkZFUl9UWVBFMltcIkFSUkFZX0JVRkZFUlwiXSA9IDM0OTYyXSA9IFwiQVJSQVlfQlVGRkVSXCI7XG4gIEJVRkZFUl9UWVBFMltCVUZGRVJfVFlQRTJbXCJVTklGT1JNX0JVRkZFUlwiXSA9IDM1MzQ1XSA9IFwiVU5JRk9STV9CVUZGRVJcIjtcbiAgcmV0dXJuIEJVRkZFUl9UWVBFMjtcbn0pKEJVRkZFUl9UWVBFIHx8IHt9KTtcblxuZXhwb3J0IHsgQlVGRkVSX1RZUEUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xCdWZmZXIge1xuICBjb25zdHJ1Y3RvcihidWZmZXIsIHR5cGUpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlciB8fCBudWxsO1xuICAgIHRoaXMudXBkYXRlSUQgPSAtMTtcbiAgICB0aGlzLmJ5dGVMZW5ndGggPSAtMTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICB9XG59XG5cbmV4cG9ydCB7IEdsQnVmZmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbEJ1ZmZlci5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBCdWZmZXJVc2FnZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9idWZmZXIvY29uc3QubWpzJztcbmltcG9ydCB7IEJVRkZFUl9UWVBFIH0gZnJvbSAnLi9jb25zdC5tanMnO1xuaW1wb3J0IHsgR2xCdWZmZXIgfSBmcm9tICcuL0dsQnVmZmVyLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xCdWZmZXJTeXN0ZW0ge1xuICAvKipcbiAgICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIgdGhpcyBTeXN0ZW0gd29ya3MgZm9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9ncHVCdWZmZXJzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgLyoqIENhY2hlIGtlZXBpbmcgdHJhY2sgb2YgdGhlIGJhc2UgYm91bmQgYnVmZmVyIGJhc2VzICovXG4gICAgdGhpcy5fYm91bmRCdWZmZXJCYXNlcyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX2dsID0gbnVsbDtcbiAgICB0aGlzLl9ncHVCdWZmZXJzID0gbnVsbDtcbiAgICB0aGlzLl9ib3VuZEJ1ZmZlckJhc2VzID0gbnVsbDtcbiAgfVxuICAvKiogU2V0cyB1cCB0aGUgcmVuZGVyZXIgY29udGV4dCBhbmQgbmVjZXNzYXJ5IGJ1ZmZlcnMuICovXG4gIGNvbnRleHRDaGFuZ2UoKSB7XG4gICAgdGhpcy5fZ3B1QnVmZmVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2dsID0gdGhpcy5fcmVuZGVyZXIuZ2w7XG4gIH1cbiAgZ2V0R2xCdWZmZXIoYnVmZmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dwdUJ1ZmZlcnNbYnVmZmVyLnVpZF0gfHwgdGhpcy5jcmVhdGVHTEJ1ZmZlcihidWZmZXIpO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGJpbmRzIHNwZWNpZmllZCBidWZmZXIuIE9uIGZpcnN0IHJ1biwgaXQgd2lsbCBjcmVhdGUgdGhlIHdlYkdMIGJ1ZmZlcnMgZm9yIHRoZSBjb250ZXh0IHRvb1xuICAgKiBAcGFyYW0gYnVmZmVyIC0gdGhlIGJ1ZmZlciB0byBiaW5kIHRvIHRoZSByZW5kZXJlclxuICAgKi9cbiAgYmluZChidWZmZXIpIHtcbiAgICBjb25zdCB7IF9nbDogZ2wgfSA9IHRoaXM7XG4gICAgY29uc3QgZ2xCdWZmZXIgPSB0aGlzLmdldEdsQnVmZmVyKGJ1ZmZlcik7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbEJ1ZmZlci50eXBlLCBnbEJ1ZmZlci5idWZmZXIpO1xuICB9XG4gIC8qKlxuICAgKiBCaW5kcyBhbiB1bmlmb3JtIGJ1ZmZlciB0byBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAqXG4gICAqIEEgY2FjaGUgaXMgdXNlZCBzbyBhIGJ1ZmZlciB3aWxsIG5vdCBiZSBib3VuZCBhZ2FpbiBpZiBhbHJlYWR5IGJvdW5kLlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gdGhlIGJ1ZmZlciB0byBiaW5kXG4gICAqIEBwYXJhbSBpbmRleCAtIHRoZSBiYXNlIGluZGV4IHRvIGJpbmQgaXQgdG8uXG4gICAqL1xuICBiaW5kQnVmZmVyQmFzZShidWZmZXIsIGluZGV4KSB7XG4gICAgY29uc3QgeyBfZ2w6IGdsIH0gPSB0aGlzO1xuICAgIGlmICh0aGlzLl9ib3VuZEJ1ZmZlckJhc2VzW2luZGV4XSAhPT0gYnVmZmVyKSB7XG4gICAgICBjb25zdCBnbEJ1ZmZlciA9IHRoaXMuZ2V0R2xCdWZmZXIoYnVmZmVyKTtcbiAgICAgIHRoaXMuX2JvdW5kQnVmZmVyQmFzZXNbaW5kZXhdID0gYnVmZmVyO1xuICAgICAgZ2wuYmluZEJ1ZmZlckJhc2UoZ2wuVU5JRk9STV9CVUZGRVIsIGluZGV4LCBnbEJ1ZmZlci5idWZmZXIpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQmluZHMgYSBidWZmZXIgd2hpbHN0IGFsc28gYmluZGluZyBpdHMgcmFuZ2UuXG4gICAqIFRoaXMgd2lsbCBtYWtlIHRoZSBidWZmZXIgc3RhcnQgZnJvbSB0aGUgb2Zmc2V0IHN1cHBsaWVkIHJhdGhlciB0aGFuIDAgd2hlbiBpdCBpcyByZWFkLlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gdGhlIGJ1ZmZlciB0byBiaW5kXG4gICAqIEBwYXJhbSBpbmRleCAtIHRoZSBiYXNlIGluZGV4IHRvIGJpbmQgYXQsIGRlZmF1bHRzIHRvIDBcbiAgICogQHBhcmFtIG9mZnNldCAtIHRoZSBvZmZzZXQgdG8gYmluZCBhdCAodGhpcyBpcyBibG9ja3Mgb2YgMjU2KS4gMCA9IDAsIDEgPSAyNTYsIDIgPSA1MTIgZXRjXG4gICAqL1xuICBiaW5kQnVmZmVyUmFuZ2UoYnVmZmVyLCBpbmRleCwgb2Zmc2V0KSB7XG4gICAgY29uc3QgeyBfZ2w6IGdsIH0gPSB0aGlzO1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgIGNvbnN0IGdsQnVmZmVyID0gdGhpcy5nZXRHbEJ1ZmZlcihidWZmZXIpO1xuICAgIGdsLmJpbmRCdWZmZXJSYW5nZShnbC5VTklGT1JNX0JVRkZFUiwgaW5kZXggfHwgMCwgZ2xCdWZmZXIuYnVmZmVyLCBvZmZzZXQgKiAyNTYsIDI1Nik7XG4gIH1cbiAgLyoqXG4gICAqIFdpbGwgZW5zdXJlIHRoZSBkYXRhIGluIHRoZSBidWZmZXIgaXMgdXBsb2FkZWQgdG8gdGhlIEdQVS5cbiAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciAtIHRoZSBidWZmZXIgdG8gdXBkYXRlXG4gICAqL1xuICB1cGRhdGVCdWZmZXIoYnVmZmVyKSB7XG4gICAgY29uc3QgeyBfZ2w6IGdsIH0gPSB0aGlzO1xuICAgIGNvbnN0IGdsQnVmZmVyID0gdGhpcy5nZXRHbEJ1ZmZlcihidWZmZXIpO1xuICAgIGlmIChidWZmZXIuX3VwZGF0ZUlEID09PSBnbEJ1ZmZlci51cGRhdGVJRCkge1xuICAgICAgcmV0dXJuIGdsQnVmZmVyO1xuICAgIH1cbiAgICBnbEJ1ZmZlci51cGRhdGVJRCA9IGJ1ZmZlci5fdXBkYXRlSUQ7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbEJ1ZmZlci50eXBlLCBnbEJ1ZmZlci5idWZmZXIpO1xuICAgIGNvbnN0IGRhdGEgPSBidWZmZXIuZGF0YTtcbiAgICBpZiAoZ2xCdWZmZXIuYnl0ZUxlbmd0aCA+PSBidWZmZXIuZGF0YS5ieXRlTGVuZ3RoKSB7XG4gICAgICBnbC5idWZmZXJTdWJEYXRhKGdsQnVmZmVyLnR5cGUsIDAsIGRhdGEsIDAsIGJ1ZmZlci5fdXBkYXRlU2l6ZSAvIGRhdGEuQllURVNfUEVSX0VMRU1FTlQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkcmF3VHlwZSA9IGJ1ZmZlci5kZXNjcmlwdG9yLnVzYWdlICYgQnVmZmVyVXNhZ2UuU1RBVElDID8gZ2wuU1RBVElDX0RSQVcgOiBnbC5EWU5BTUlDX0RSQVc7XG4gICAgICBnbEJ1ZmZlci5ieXRlTGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgZ2wuYnVmZmVyRGF0YShnbEJ1ZmZlci50eXBlLCBkYXRhLCBkcmF3VHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBnbEJ1ZmZlcjtcbiAgfVxuICAvKiogZGlzcG9zZSBhbGwgV2ViR0wgcmVzb3VyY2VzIG9mIGFsbCBtYW5hZ2VkIGJ1ZmZlcnMgKi9cbiAgZGVzdHJveUFsbCgpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fZ3B1QnVmZmVycykge1xuICAgICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2dwdUJ1ZmZlcnNbaWRdLmJ1ZmZlcik7XG4gICAgfVxuICAgIHRoaXMuX2dwdUJ1ZmZlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZXMgYnVmZmVyXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgLSBidWZmZXIgd2l0aCBkYXRhXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbnRleHRMb3N0PWZhbHNlXSAtIElmIGNvbnRleHQgd2FzIGxvc3QsIHdlIHN1cHByZXNzIGRlbGV0ZVZlcnRleEFycmF5XG4gICAqL1xuICBvbkJ1ZmZlckRlc3Ryb3koYnVmZmVyLCBjb250ZXh0TG9zdCkge1xuICAgIGNvbnN0IGdsQnVmZmVyID0gdGhpcy5fZ3B1QnVmZmVyc1tidWZmZXIudWlkXTtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGlmICghY29udGV4dExvc3QpIHtcbiAgICAgIGdsLmRlbGV0ZUJ1ZmZlcihnbEJ1ZmZlci5idWZmZXIpO1xuICAgIH1cbiAgICB0aGlzLl9ncHVCdWZmZXJzW2J1ZmZlci51aWRdID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogY3JlYXRlcyBhbmQgYXR0YWNoZXMgYSBHTEJ1ZmZlciBvYmplY3QgdGllZCB0byB0aGUgY3VycmVudCBjb250ZXh0LlxuICAgKiBAcGFyYW0gYnVmZmVyXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGNyZWF0ZUdMQnVmZmVyKGJ1ZmZlcikge1xuICAgIGNvbnN0IHsgX2dsOiBnbCB9ID0gdGhpcztcbiAgICBsZXQgdHlwZSA9IEJVRkZFUl9UWVBFLkFSUkFZX0JVRkZFUjtcbiAgICBpZiAoYnVmZmVyLmRlc2NyaXB0b3IudXNhZ2UgJiBCdWZmZXJVc2FnZS5JTkRFWCkge1xuICAgICAgdHlwZSA9IEJVRkZFUl9UWVBFLkVMRU1FTlRfQVJSQVlfQlVGRkVSO1xuICAgIH0gZWxzZSBpZiAoYnVmZmVyLmRlc2NyaXB0b3IudXNhZ2UgJiBCdWZmZXJVc2FnZS5VTklGT1JNKSB7XG4gICAgICB0eXBlID0gQlVGRkVSX1RZUEUuVU5JRk9STV9CVUZGRVI7XG4gICAgfVxuICAgIGNvbnN0IGdsQnVmZmVyID0gbmV3IEdsQnVmZmVyKGdsLmNyZWF0ZUJ1ZmZlcigpLCB0eXBlKTtcbiAgICB0aGlzLl9ncHVCdWZmZXJzW2J1ZmZlci51aWRdID0gZ2xCdWZmZXI7XG4gICAgYnVmZmVyLm9uKFwiZGVzdHJveVwiLCB0aGlzLm9uQnVmZmVyRGVzdHJveSwgdGhpcyk7XG4gICAgcmV0dXJuIGdsQnVmZmVyO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xCdWZmZXJTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImJ1ZmZlclwiXG59O1xuXG5leHBvcnQgeyBHbEJ1ZmZlclN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xCdWZmZXJTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRE9NQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2Vudmlyb25tZW50L2FkYXB0ZXIubWpzJztcbmltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfR2xDb250ZXh0U3lzdGVtID0gY2xhc3MgX0dsQ29udGV4dFN5c3RlbSB7XG4gIC8qKiBAcGFyYW0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIgdGhpcyBTeXN0ZW0gd29ya3MgZm9yLiAqL1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIC8qKlxuICAgICAqIEZlYXR1cmVzIHN1cHBvcnRlZCBieSBjdXJyZW50IHJlbmRlcmVyLlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdGhpcy5zdXBwb3J0cyA9IHtcbiAgICAgIC8qKiBTdXBwb3J0IGZvciAzMi1iaXQgaW5kaWNlcyBidWZmZXIuICovXG4gICAgICB1aW50MzJJbmRpY2VzOiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIFVuaWZvcm1CdWZmZXJPYmplY3RzICovXG4gICAgICB1bmlmb3JtQnVmZmVyT2JqZWN0OiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIFZlcnRleEFycmF5T2JqZWN0cyAqL1xuICAgICAgdmVydGV4QXJyYXlPYmplY3Q6IHRydWUsXG4gICAgICAvKiogU3VwcG9ydCBmb3IgU1JHQiB0ZXh0dXJlIGZvcm1hdCAqL1xuICAgICAgc3JnYlRleHR1cmVzOiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIHdyYXBwaW5nIG1vZGVzIGlmIGEgdGV4dHVyZSBpcyBub24tcG93ZXIgb2YgdHdvICovXG4gICAgICBub25Qb3dPZjJ3cmFwcGluZzogdHJ1ZSxcbiAgICAgIC8qKiBTdXBwb3J0IGZvciBNU0FBIChhbnRpYWxpYXNpbmcgb2YgZHluYW1pYyB0ZXh0dXJlcykgKi9cbiAgICAgIG1zYWE6IHRydWUsXG4gICAgICAvKiogU3VwcG9ydCBmb3IgbWlwbWFwcyBpZiBhIHRleHR1cmUgaXMgbm9uLXBvd2VyIG9mIHR3byAqL1xuICAgICAgbm9uUG93T2YybWlwbWFwczogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmhhbmRsZUNvbnRleHRMb3N0ID0gdGhpcy5oYW5kbGVDb250ZXh0TG9zdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkID0gdGhpcy5oYW5kbGVDb250ZXh0UmVzdG9yZWQuYmluZCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogYHRydWVgIGlmIHRoZSBjb250ZXh0IGlzIGxvc3RcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgaXNMb3N0KCkge1xuICAgIHJldHVybiAhdGhpcy5nbCB8fCB0aGlzLmdsLmlzQ29udGV4dExvc3QoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgY29udGV4dCBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIE5ldyBXZWJHTCBjb250ZXh0LlxuICAgKi9cbiAgY29udGV4dENoYW5nZShnbCkge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLl9yZW5kZXJlci5nbCA9IGdsO1xuICB9XG4gIGluaXQob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7IC4uLl9HbENvbnRleHRTeXN0ZW0uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICBsZXQgbXVsdGlWaWV3ID0gdGhpcy5tdWx0aVZpZXcgPSBvcHRpb25zLm11bHRpVmlldztcbiAgICBpZiAob3B0aW9ucy5jb250ZXh0ICYmIG11bHRpVmlldykge1xuICAgICAgd2FybihcIlJlbmRlcmVyIGNyZWF0ZWQgd2l0aCBib3RoIGEgY29udGV4dCBhbmQgbXVsdGl2aWV3IGVuYWJsZWQuIERpc2FibGluZyBtdWx0aVZpZXcgYXMgYm90aCBjYW5ub3Qgd29yayB0b2dldGhlci5cIik7XG4gICAgICBtdWx0aVZpZXcgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG11bHRpVmlldykge1xuICAgICAgdGhpcy5jYW52YXMgPSBET01BZGFwdGVyLmdldCgpLmNyZWF0ZUNhbnZhcyh0aGlzLl9yZW5kZXJlci5jYW52YXMud2lkdGgsIHRoaXMuX3JlbmRlcmVyLmNhbnZhcy5oZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbnZhcyA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jb250ZXh0KSB7XG4gICAgICB0aGlzLmluaXRGcm9tQ29udGV4dChvcHRpb25zLmNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhbHBoYSA9IHRoaXMuX3JlbmRlcmVyLmJhY2tncm91bmQuYWxwaGEgPCAxO1xuICAgICAgY29uc3QgcHJlbXVsdGlwbGllZEFscGhhID0gb3B0aW9ucy5wcmVtdWx0aXBsaWVkQWxwaGEgPz8gdHJ1ZTtcbiAgICAgIGNvbnN0IGFudGlhbGlhcyA9IG9wdGlvbnMuYW50aWFsaWFzICYmICF0aGlzLl9yZW5kZXJlci5iYWNrQnVmZmVyLnVzZUJhY2tCdWZmZXI7XG4gICAgICB0aGlzLmNyZWF0ZUNvbnRleHQob3B0aW9ucy5wcmVmZXJXZWJHTFZlcnNpb24sIHtcbiAgICAgICAgYWxwaGEsXG4gICAgICAgIHByZW11bHRpcGxpZWRBbHBoYSxcbiAgICAgICAgYW50aWFsaWFzLFxuICAgICAgICBzdGVuY2lsOiB0cnVlLFxuICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IG9wdGlvbnMucHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuICAgICAgICBwb3dlclByZWZlcmVuY2U6IG9wdGlvbnMucG93ZXJQcmVmZXJlbmNlID8/IFwiZGVmYXVsdFwiXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZW5zdXJlQ2FudmFzU2l6ZSh0YXJnZXRDYW52YXMpIHtcbiAgICBpZiAoIXRoaXMubXVsdGlWaWV3KSB7XG4gICAgICBpZiAodGFyZ2V0Q2FudmFzICE9PSB0aGlzLmNhbnZhcykge1xuICAgICAgICB3YXJuKFwibXVsdGlWaWV3IGlzIGRpc2FibGVkLCBidXQgdGFyZ2V0Q2FudmFzIGlzIG5vdCB0aGUgbWFpbiBjYW52YXNcIik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgY2FudmFzIH0gPSB0aGlzO1xuICAgIGlmIChjYW52YXMud2lkdGggPCB0YXJnZXRDYW52YXMud2lkdGggfHwgY2FudmFzLmhlaWdodCA8IHRhcmdldENhbnZhcy5oZWlnaHQpIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IE1hdGgubWF4KHRhcmdldENhbnZhcy53aWR0aCwgdGFyZ2V0Q2FudmFzLndpZHRoKTtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBNYXRoLm1heCh0YXJnZXRDYW52YXMuaGVpZ2h0LCB0YXJnZXRDYW52YXMuaGVpZ2h0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb250ZXh0LlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFdlYkdMIGNvbnRleHRcbiAgICovXG4gIGluaXRGcm9tQ29udGV4dChnbCkge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLndlYkdMVmVyc2lvbiA9IGdsIGluc3RhbmNlb2YgRE9NQWRhcHRlci5nZXQoKS5nZXRXZWJHTFJlbmRlcmluZ0NvbnRleHQoKSA/IDEgOiAyO1xuICAgIHRoaXMuZ2V0RXh0ZW5zaW9ucygpO1xuICAgIHRoaXMudmFsaWRhdGVDb250ZXh0KGdsKTtcbiAgICB0aGlzLl9yZW5kZXJlci5ydW5uZXJzLmNvbnRleHRDaGFuZ2UuZW1pdChnbCk7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dGxvc3RcIiwgdGhpcy5oYW5kbGVDb250ZXh0TG9zdCwgZmFsc2UpO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkLCBmYWxzZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgZnJvbSBjb250ZXh0IG9wdGlvbnNcbiAgICogQHByb3RlY3RlZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQ2FudmFzRWxlbWVudC9nZXRDb250ZXh0XG4gICAqIEBwYXJhbSBwcmVmZXJXZWJHTFZlcnNpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBjb250ZXh0IGF0dHJpYnV0ZXNcbiAgICovXG4gIGNyZWF0ZUNvbnRleHQocHJlZmVyV2ViR0xWZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgbGV0IGdsO1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgIGlmIChwcmVmZXJXZWJHTFZlcnNpb24gPT09IDIpIHtcbiAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbDJcIiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmICghZ2wpIHtcbiAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiLCBvcHRpb25zKTtcbiAgICAgIGlmICghZ2wpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgV2ViR0wuIFRyeSB1c2luZyB0aGUgY2FudmFzIHJlbmRlcmVyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5pbml0RnJvbUNvbnRleHQodGhpcy5nbCk7XG4gIH1cbiAgLyoqIEF1dG8tcG9wdWxhdGUgdGhlIHtAbGluayBHbENvbnRleHRTeXN0ZW0uZXh0ZW5zaW9ucyBleHRlbnNpb25zfS4gKi9cbiAgZ2V0RXh0ZW5zaW9ucygpIHtcbiAgICBjb25zdCB7IGdsIH0gPSB0aGlzO1xuICAgIGNvbnN0IGNvbW1vbiA9IHtcbiAgICAgIGFuaXNvdHJvcGljRmlsdGVyaW5nOiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIiksXG4gICAgICBmbG9hdFRleHR1cmVMaW5lYXI6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKSxcbiAgICAgIHMzdGM6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpLFxuICAgICAgczN0Y19zUkdCOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y19zcmdiXCIpLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgIGV0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0Y1wiKSxcbiAgICAgIGV0YzE6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxXCIpLFxuICAgICAgcHZydGM6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1wiKSB8fCBnbC5nZXRFeHRlbnNpb24oXCJXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpLFxuICAgICAgYXRjOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXRjXCIpLFxuICAgICAgYXN0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGNcIiksXG4gICAgICBicHRjOiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjXCIpLFxuICAgICAgcmd0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfY29tcHJlc3Npb25fcmd0Y1wiKSxcbiAgICAgIGxvc2VDb250ZXh0OiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9sb3NlX2NvbnRleHRcIilcbiAgICB9O1xuICAgIGlmICh0aGlzLndlYkdMVmVyc2lvbiA9PT0gMSkge1xuICAgICAgdGhpcy5leHRlbnNpb25zID0ge1xuICAgICAgICAuLi5jb21tb24sXG4gICAgICAgIGRyYXdCdWZmZXJzOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9kcmF3X2J1ZmZlcnNcIiksXG4gICAgICAgIGRlcHRoVGV4dHVyZTogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfZGVwdGhfdGV4dHVyZVwiKSxcbiAgICAgICAgdmVydGV4QXJyYXlPYmplY3Q6IGdsLmdldEV4dGVuc2lvbihcIk9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0XCIpIHx8IGdsLmdldEV4dGVuc2lvbihcIk1PWl9PRVNfdmVydGV4X2FycmF5X29iamVjdFwiKSB8fCBnbC5nZXRFeHRlbnNpb24oXCJXRUJLSVRfT0VTX3ZlcnRleF9hcnJheV9vYmplY3RcIiksXG4gICAgICAgIHVpbnQzMkVsZW1lbnRJbmRleDogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX2VsZW1lbnRfaW5kZXhfdWludFwiKSxcbiAgICAgICAgLy8gRmxvYXRzIGFuZCBoYWxmLWZsb2F0c1xuICAgICAgICBmbG9hdFRleHR1cmU6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0XCIpLFxuICAgICAgICBmbG9hdFRleHR1cmVMaW5lYXI6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKSxcbiAgICAgICAgdGV4dHVyZUhhbGZGbG9hdDogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKSxcbiAgICAgICAgdGV4dHVyZUhhbGZGbG9hdExpbmVhcjogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXJcIiksXG4gICAgICAgIHZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRTogZ2wuZ2V0RXh0ZW5zaW9uKFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKSxcbiAgICAgICAgc3JnYjogZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX3NSR0JcIilcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgLi4uY29tbW9uLFxuICAgICAgICBjb2xvckJ1ZmZlckZsb2F0OiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2Zsb2F0XCIpXG4gICAgICB9O1xuICAgICAgY29uc3QgcHJvdm9rZUV4dCA9IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX3Byb3Zva2luZ192ZXJ0ZXhcIik7XG4gICAgICBpZiAocHJvdm9rZUV4dCkge1xuICAgICAgICBwcm92b2tlRXh0LnByb3Zva2luZ1ZlcnRleFdFQkdMKHByb3Zva2VFeHQuRklSU1RfVkVSVEVYX0NPTlZFTlRJT05fV0VCR0wpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBhIGxvc3Qgd2ViZ2wgY29udGV4dFxuICAgKiBAcGFyYW0ge1dlYkdMQ29udGV4dEV2ZW50fSBldmVudCAtIFRoZSBjb250ZXh0IGxvc3QgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVDb250ZXh0TG9zdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMuX2NvbnRleHRMb3NzRm9yY2VkKSB7XG4gICAgICB0aGlzLl9jb250ZXh0TG9zc0ZvcmNlZCA9IGZhbHNlO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmdsLmlzQ29udGV4dExvc3QoKSkge1xuICAgICAgICAgIHRoaXMuZXh0ZW5zaW9ucy5sb3NlQ29udGV4dD8ucmVzdG9yZUNvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG4gIC8qKiBIYW5kbGVzIGEgcmVzdG9yZWQgd2ViZ2wgY29udGV4dC4gKi9cbiAgaGFuZGxlQ29udGV4dFJlc3RvcmVkKCkge1xuICAgIHRoaXMuX3JlbmRlcmVyLnJ1bm5lcnMuY29udGV4dENoYW5nZS5lbWl0KHRoaXMuZ2wpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsIHRoaXMuaGFuZGxlQ29udGV4dExvc3QpO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkKTtcbiAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG4gICAgdGhpcy5leHRlbnNpb25zLmxvc2VDb250ZXh0Py5sb3NlQ29udGV4dCgpO1xuICB9XG4gIC8qKlxuICAgKiB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gZm9yY2UgYSB3ZWJHTCBjb250ZXh0IGxvc3NcbiAgICogdGhpcyB3aWxsIHJlbGVhc2UgYWxsIHJlc291cmNlcyBvbiB0aGUgR1BVLlxuICAgKiBVc2VmdWwgaWYgeW91IG5lZWQgdG8gcHV0IFBpeGkgdG8gc2xlZXAsIGFuZCBzYXZlIHNvbWUgR1BVIG1lbW9yeVxuICAgKlxuICAgKiBBcyBzb29uIGFzIHJlbmRlciBpcyBjYWxsZWQgLSBhbGwgcmVzb3VyY2VzIHdpbGwgYmUgY3JlYXRlZCBhZ2Fpbi5cbiAgICovXG4gIGZvcmNlQ29udGV4dExvc3MoKSB7XG4gICAgdGhpcy5leHRlbnNpb25zLmxvc2VDb250ZXh0Py5sb3NlQ29udGV4dCgpO1xuICAgIHRoaXMuX2NvbnRleHRMb3NzRm9yY2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogVmFsaWRhdGUgY29udGV4dC5cbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gUmVuZGVyIGNvbnRleHQuXG4gICAqL1xuICB2YWxpZGF0ZUNvbnRleHQoZ2wpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcbiAgICBpZiAoYXR0cmlidXRlcyAmJiAhYXR0cmlidXRlcy5zdGVuY2lsKSB7XG4gICAgICB3YXJuKFwiUHJvdmlkZWQgV2ViR0wgY29udGV4dCBkb2VzIG5vdCBoYXZlIGEgc3RlbmNpbCBidWZmZXIsIG1hc2tzIG1heSBub3QgcmVuZGVyIGNvcnJlY3RseVwiKTtcbiAgICB9XG4gICAgY29uc3Qgc3VwcG9ydHMgPSB0aGlzLnN1cHBvcnRzO1xuICAgIGNvbnN0IGlzV2ViR2wyID0gdGhpcy53ZWJHTFZlcnNpb24gPT09IDI7XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcbiAgICBzdXBwb3J0cy51aW50MzJJbmRpY2VzID0gaXNXZWJHbDIgfHwgISFleHRlbnNpb25zLnVpbnQzMkVsZW1lbnRJbmRleDtcbiAgICBzdXBwb3J0cy51bmlmb3JtQnVmZmVyT2JqZWN0ID0gaXNXZWJHbDI7XG4gICAgc3VwcG9ydHMudmVydGV4QXJyYXlPYmplY3QgPSBpc1dlYkdsMiB8fCAhIWV4dGVuc2lvbnMudmVydGV4QXJyYXlPYmplY3Q7XG4gICAgc3VwcG9ydHMuc3JnYlRleHR1cmVzID0gaXNXZWJHbDIgfHwgISFleHRlbnNpb25zLnNyZ2I7XG4gICAgc3VwcG9ydHMubm9uUG93T2Yyd3JhcHBpbmcgPSBpc1dlYkdsMjtcbiAgICBzdXBwb3J0cy5ub25Qb3dPZjJtaXBtYXBzID0gaXNXZWJHbDI7XG4gICAgc3VwcG9ydHMubXNhYSA9IGlzV2ViR2wyO1xuICAgIGlmICghc3VwcG9ydHMudWludDMySW5kaWNlcykge1xuICAgICAgd2FybihcIlByb3ZpZGVkIFdlYkdMIGNvbnRleHQgZG9lcyBub3Qgc3VwcG9ydCAzMiBpbmRleCBidWZmZXIsIGxhcmdlIHNjZW5lcyBtYXkgbm90IHJlbmRlciBjb3JyZWN0bHlcIik7XG4gICAgfVxuICB9XG59O1xuLyoqIEBpZ25vcmUgKi9cbl9HbENvbnRleHRTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImNvbnRleHRcIlxufTtcbi8qKiBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgc3lzdGVtLiAqL1xuX0dsQ29udGV4dFN5c3RlbS5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMuY29udGV4dH1cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgY29udGV4dDogbnVsbCxcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMucHJlbXVsdGlwbGllZEFscGhhfVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBwcmVtdWx0aXBsaWVkQWxwaGE6IHRydWUsXG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLnByZXNlcnZlRHJhd2luZ0J1ZmZlcn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLnBvd2VyUHJlZmVyZW5jZX1cbiAgICogQGRlZmF1bHQgZGVmYXVsdFxuICAgKi9cbiAgcG93ZXJQcmVmZXJlbmNlOiB2b2lkIDAsXG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLndlYkdMVmVyc2lvbn1cbiAgICogQGRlZmF1bHQgMlxuICAgKi9cbiAgcHJlZmVyV2ViR0xWZXJzaW9uOiAyLFxuICAvKipcbiAgICoge0BsaW5rIFdlYkdMT3B0aW9ucy5tdWx0aVZpZXd9XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aVZpZXc6IGZhbHNlXG59O1xubGV0IEdsQ29udGV4dFN5c3RlbSA9IF9HbENvbnRleHRTeXN0ZW07XG5cbmV4cG9ydCB7IEdsQ29udGV4dFN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xDb250ZXh0U3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIEdMX0ZPUk1BVFMgPSAvKiBAX19QVVJFX18gKi8gKChHTF9GT1JNQVRTMikgPT4ge1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIlJHQkFcIl0gPSA2NDA4XSA9IFwiUkdCQVwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIlJHQlwiXSA9IDY0MDddID0gXCJSR0JcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSR1wiXSA9IDMzMzE5XSA9IFwiUkdcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSRURcIl0gPSA2NDAzXSA9IFwiUkVEXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiUkdCQV9JTlRFR0VSXCJdID0gMzYyNDldID0gXCJSR0JBX0lOVEVHRVJcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSR0JfSU5URUdFUlwiXSA9IDM2MjQ4XSA9IFwiUkdCX0lOVEVHRVJcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSR19JTlRFR0VSXCJdID0gMzMzMjBdID0gXCJSR19JTlRFR0VSXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiUkVEX0lOVEVHRVJcIl0gPSAzNjI0NF0gPSBcIlJFRF9JTlRFR0VSXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiQUxQSEFcIl0gPSA2NDA2XSA9IFwiQUxQSEFcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJMVU1JTkFOQ0VcIl0gPSA2NDA5XSA9IFwiTFVNSU5BTkNFXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiTFVNSU5BTkNFX0FMUEhBXCJdID0gNjQxMF0gPSBcIkxVTUlOQU5DRV9BTFBIQVwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIkRFUFRIX0NPTVBPTkVOVFwiXSA9IDY0MDJdID0gXCJERVBUSF9DT01QT05FTlRcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJERVBUSF9TVEVOQ0lMXCJdID0gMzQwNDFdID0gXCJERVBUSF9TVEVOQ0lMXCI7XG4gIHJldHVybiBHTF9GT1JNQVRTMjtcbn0pKEdMX0ZPUk1BVFMgfHwge30pO1xudmFyIEdMX1RBUkdFVFMgPSAvKiBAX19QVVJFX18gKi8gKChHTF9UQVJHRVRTMikgPT4ge1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfMkRcIl0gPSAzNTUzXSA9IFwiVEVYVFVSRV8yRFwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfQ1VCRV9NQVBcIl0gPSAzNDA2N10gPSBcIlRFWFRVUkVfQ1VCRV9NQVBcIjtcbiAgR0xfVEFSR0VUUzJbR0xfVEFSR0VUUzJbXCJURVhUVVJFXzJEX0FSUkFZXCJdID0gMzU4NjZdID0gXCJURVhUVVJFXzJEX0FSUkFZXCI7XG4gIEdMX1RBUkdFVFMyW0dMX1RBUkdFVFMyW1wiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YXCJdID0gMzQwNjldID0gXCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1hcIjtcbiAgR0xfVEFSR0VUUzJbR0xfVEFSR0VUUzJbXCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1hcIl0gPSAzNDA3MF0gPSBcIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWFwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWVwiXSA9IDM0MDcxXSA9IFwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9ZXCI7XG4gIEdMX1RBUkdFVFMyW0dMX1RBUkdFVFMyW1wiVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZXCJdID0gMzQwNzJdID0gXCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1lcIjtcbiAgR0xfVEFSR0VUUzJbR0xfVEFSR0VUUzJbXCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1pcIl0gPSAzNDA3M10gPSBcIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWlwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWlwiXSA9IDM0MDc0XSA9IFwiVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9aXCI7XG4gIHJldHVybiBHTF9UQVJHRVRTMjtcbn0pKEdMX1RBUkdFVFMgfHwge30pO1xudmFyIEdMX1dSQVBfTU9ERVMgPSAvKiBAX19QVVJFX18gKi8gKChHTF9XUkFQX01PREVTMikgPT4ge1xuICBHTF9XUkFQX01PREVTMltHTF9XUkFQX01PREVTMltcIkNMQU1QXCJdID0gMzMwNzFdID0gXCJDTEFNUFwiO1xuICBHTF9XUkFQX01PREVTMltHTF9XUkFQX01PREVTMltcIlJFUEVBVFwiXSA9IDEwNDk3XSA9IFwiUkVQRUFUXCI7XG4gIEdMX1dSQVBfTU9ERVMyW0dMX1dSQVBfTU9ERVMyW1wiTUlSUk9SRURfUkVQRUFUXCJdID0gMzM2NDhdID0gXCJNSVJST1JFRF9SRVBFQVRcIjtcbiAgcmV0dXJuIEdMX1dSQVBfTU9ERVMyO1xufSkoR0xfV1JBUF9NT0RFUyB8fCB7fSk7XG52YXIgR0xfVFlQRVMgPSAvKiBAX19QVVJFX18gKi8gKChHTF9UWVBFUzIpID0+IHtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIlVOU0lHTkVEX0JZVEVcIl0gPSA1MTIxXSA9IFwiVU5TSUdORURfQllURVwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfU0hPUlRcIl0gPSA1MTIzXSA9IFwiVU5TSUdORURfU0hPUlRcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIlVOU0lHTkVEX1NIT1JUXzVfNl81XCJdID0gMzM2MzVdID0gXCJVTlNJR05FRF9TSE9SVF81XzZfNVwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfU0hPUlRfNF80XzRfNFwiXSA9IDMyODE5XSA9IFwiVU5TSUdORURfU0hPUlRfNF80XzRfNFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfU0hPUlRfNV81XzVfMVwiXSA9IDMyODIwXSA9IFwiVU5TSUdORURfU0hPUlRfNV81XzVfMVwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXCJdID0gNTEyNV0gPSBcIlVOU0lHTkVEX0lOVFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXzEwRl8xMUZfMTFGX1JFVlwiXSA9IDM1ODk5XSA9IFwiVU5TSUdORURfSU5UXzEwRl8xMUZfMTFGX1JFVlwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXzJfMTBfMTBfMTBfUkVWXCJdID0gMzM2NDBdID0gXCJVTlNJR05FRF9JTlRfMl8xMF8xMF8xMF9SRVZcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIlVOU0lHTkVEX0lOVF8yNF84XCJdID0gMzQwNDJdID0gXCJVTlNJR05FRF9JTlRfMjRfOFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXzVfOV85XzlfUkVWXCJdID0gMzU5MDJdID0gXCJVTlNJR05FRF9JTlRfNV85XzlfOV9SRVZcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIkJZVEVcIl0gPSA1MTIwXSA9IFwiQllURVwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiU0hPUlRcIl0gPSA1MTIyXSA9IFwiU0hPUlRcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIklOVFwiXSA9IDUxMjRdID0gXCJJTlRcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIkZMT0FUXCJdID0gNTEyNl0gPSBcIkZMT0FUXCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJGTE9BVF8zMl9VTlNJR05FRF9JTlRfMjRfOF9SRVZcIl0gPSAzNjI2OV0gPSBcIkZMT0FUXzMyX1VOU0lHTkVEX0lOVF8yNF84X1JFVlwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiSEFMRl9GTE9BVFwiXSA9IDM2MTkzXSA9IFwiSEFMRl9GTE9BVFwiO1xuICByZXR1cm4gR0xfVFlQRVMyO1xufSkoR0xfVFlQRVMgfHwge30pO1xuXG5leHBvcnQgeyBHTF9GT1JNQVRTLCBHTF9UQVJHRVRTLCBHTF9UWVBFUywgR0xfV1JBUF9NT0RFUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3QubWpzLm1hcFxuIiwiaW1wb3J0IHsgR0xfVFlQRVMgfSBmcm9tICcuLi8uLi90ZXh0dXJlL2NvbnN0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgaW5mb01hcCA9IHtcbiAgdWludDh4MjogR0xfVFlQRVMuVU5TSUdORURfQllURSxcbiAgdWludDh4NDogR0xfVFlQRVMuVU5TSUdORURfQllURSxcbiAgc2ludDh4MjogR0xfVFlQRVMuQllURSxcbiAgc2ludDh4NDogR0xfVFlQRVMuQllURSxcbiAgdW5vcm04eDI6IEdMX1RZUEVTLlVOU0lHTkVEX0JZVEUsXG4gIHVub3JtOHg0OiBHTF9UWVBFUy5VTlNJR05FRF9CWVRFLFxuICBzbm9ybTh4MjogR0xfVFlQRVMuQllURSxcbiAgc25vcm04eDQ6IEdMX1RZUEVTLkJZVEUsXG4gIHVpbnQxNngyOiBHTF9UWVBFUy5VTlNJR05FRF9TSE9SVCxcbiAgdWludDE2eDQ6IEdMX1RZUEVTLlVOU0lHTkVEX1NIT1JULFxuICBzaW50MTZ4MjogR0xfVFlQRVMuU0hPUlQsXG4gIHNpbnQxNng0OiBHTF9UWVBFUy5TSE9SVCxcbiAgdW5vcm0xNngyOiBHTF9UWVBFUy5VTlNJR05FRF9TSE9SVCxcbiAgdW5vcm0xNng0OiBHTF9UWVBFUy5VTlNJR05FRF9TSE9SVCxcbiAgc25vcm0xNngyOiBHTF9UWVBFUy5TSE9SVCxcbiAgc25vcm0xNng0OiBHTF9UWVBFUy5TSE9SVCxcbiAgZmxvYXQxNngyOiBHTF9UWVBFUy5IQUxGX0ZMT0FULFxuICBmbG9hdDE2eDQ6IEdMX1RZUEVTLkhBTEZfRkxPQVQsXG4gIGZsb2F0MzI6IEdMX1RZUEVTLkZMT0FULFxuICBmbG9hdDMyeDI6IEdMX1RZUEVTLkZMT0FULFxuICBmbG9hdDMyeDM6IEdMX1RZUEVTLkZMT0FULFxuICBmbG9hdDMyeDQ6IEdMX1RZUEVTLkZMT0FULFxuICB1aW50MzI6IEdMX1RZUEVTLlVOU0lHTkVEX0lOVCxcbiAgdWludDMyeDI6IEdMX1RZUEVTLlVOU0lHTkVEX0lOVCxcbiAgdWludDMyeDM6IEdMX1RZUEVTLlVOU0lHTkVEX0lOVCxcbiAgdWludDMyeDQ6IEdMX1RZUEVTLlVOU0lHTkVEX0lOVCxcbiAgc2ludDMyOiBHTF9UWVBFUy5JTlQsXG4gIHNpbnQzMngyOiBHTF9UWVBFUy5JTlQsXG4gIHNpbnQzMngzOiBHTF9UWVBFUy5JTlQsXG4gIHNpbnQzMng0OiBHTF9UWVBFUy5JTlRcbn07XG5mdW5jdGlvbiBnZXRHbFR5cGVGcm9tRm9ybWF0KGZvcm1hdCkge1xuICByZXR1cm4gaW5mb01hcFtmb3JtYXRdID8/IGluZm9NYXAuZmxvYXQzMjtcbn1cblxuZXhwb3J0IHsgZ2V0R2xUeXBlRnJvbUZvcm1hdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0R2xUeXBlRnJvbUZvcm1hdC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdCB9IGZyb20gJy4uLy4uL3NoYXJlZC9nZW9tZXRyeS91dGlscy9nZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdC5tanMnO1xuaW1wb3J0IHsgZW5zdXJlQXR0cmlidXRlcyB9IGZyb20gJy4uL3NoYWRlci9wcm9ncmFtL2Vuc3VyZUF0dHJpYnV0ZXMubWpzJztcbmltcG9ydCB7IGdldEdsVHlwZUZyb21Gb3JtYXQgfSBmcm9tICcuL3V0aWxzL2dldEdsVHlwZUZyb21Gb3JtYXQubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0b3BvbG9neVRvR2xNYXAgPSB7XG4gIFwicG9pbnQtbGlzdFwiOiAwLFxuICBcImxpbmUtbGlzdFwiOiAxLFxuICBcImxpbmUtc3RyaXBcIjogMyxcbiAgXCJ0cmlhbmdsZS1saXN0XCI6IDQsXG4gIFwidHJpYW5nbGUtc3RyaXBcIjogNVxufTtcbmNsYXNzIEdsR2VvbWV0cnlTeXN0ZW0ge1xuICAvKiogQHBhcmFtIHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyIHRoaXMgU3lzdGVtIHdvcmtzIGZvci4gKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9nZW9tZXRyeVZhb0hhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gbnVsbDtcbiAgICB0aGlzLl9hY3RpdmVWYW8gPSBudWxsO1xuICAgIHRoaXMuaGFzVmFvID0gdHJ1ZTtcbiAgICB0aGlzLmhhc0luc3RhbmNlID0gdHJ1ZTtcbiAgfVxuICAvKiogU2V0cyB1cCB0aGUgcmVuZGVyZXIgY29udGV4dCBhbmQgbmVjZXNzYXJ5IGJ1ZmZlcnMuICovXG4gIGNvbnRleHRDaGFuZ2UoKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsID0gdGhpcy5fcmVuZGVyZXIuZ2w7XG4gICAgaWYgKCF0aGlzLl9yZW5kZXJlci5jb250ZXh0LnN1cHBvcnRzLnZlcnRleEFycmF5T2JqZWN0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbUGl4aUpTXSBWZXJ0ZXggQXJyYXkgT2JqZWN0cyBhcmUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZVwiKTtcbiAgICB9XG4gICAgY29uc3QgbmF0aXZlVmFvRXh0ZW5zaW9uID0gdGhpcy5fcmVuZGVyZXIuY29udGV4dC5leHRlbnNpb25zLnZlcnRleEFycmF5T2JqZWN0O1xuICAgIGlmIChuYXRpdmVWYW9FeHRlbnNpb24pIHtcbiAgICAgIGdsLmNyZWF0ZVZlcnRleEFycmF5ID0gKCkgPT4gbmF0aXZlVmFvRXh0ZW5zaW9uLmNyZWF0ZVZlcnRleEFycmF5T0VTKCk7XG4gICAgICBnbC5iaW5kVmVydGV4QXJyYXkgPSAodmFvKSA9PiBuYXRpdmVWYW9FeHRlbnNpb24uYmluZFZlcnRleEFycmF5T0VTKHZhbyk7XG4gICAgICBnbC5kZWxldGVWZXJ0ZXhBcnJheSA9ICh2YW8pID0+IG5hdGl2ZVZhb0V4dGVuc2lvbi5kZWxldGVWZXJ0ZXhBcnJheU9FUyh2YW8pO1xuICAgIH1cbiAgICBjb25zdCBuYXRpdmVJbnN0YW5jZWRFeHRlbnNpb24gPSB0aGlzLl9yZW5kZXJlci5jb250ZXh0LmV4dGVuc2lvbnMudmVydGV4QXR0cmliRGl2aXNvckFOR0xFO1xuICAgIGlmIChuYXRpdmVJbnN0YW5jZWRFeHRlbnNpb24pIHtcbiAgICAgIGdsLmRyYXdBcnJheXNJbnN0YW5jZWQgPSAoYSwgYiwgYywgZCkgPT4ge1xuICAgICAgICBuYXRpdmVJbnN0YW5jZWRFeHRlbnNpb24uZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFKGEsIGIsIGMsIGQpO1xuICAgICAgfTtcbiAgICAgIGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZCA9IChhLCBiLCBjLCBkLCBlKSA9PiB7XG4gICAgICAgIG5hdGl2ZUluc3RhbmNlZEV4dGVuc2lvbi5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRShhLCBiLCBjLCBkLCBlKTtcbiAgICAgIH07XG4gICAgICBnbC52ZXJ0ZXhBdHRyaWJEaXZpc29yID0gKGEsIGIpID0+IG5hdGl2ZUluc3RhbmNlZEV4dGVuc2lvbi52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoYSwgYik7XG4gICAgfVxuICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gbnVsbDtcbiAgICB0aGlzLl9hY3RpdmVWYW8gPSBudWxsO1xuICAgIHRoaXMuX2dlb21ldHJ5VmFvSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIC8qKlxuICAgKiBCaW5kcyBnZW9tZXRyeSBzbyB0aGF0IGlzIGNhbiBiZSBkcmF3bi4gQ3JlYXRpbmcgYSBWYW8gaWYgcmVxdWlyZWRcbiAgICogQHBhcmFtIGdlb21ldHJ5IC0gSW5zdGFuY2Ugb2YgZ2VvbWV0cnkgdG8gYmluZC5cbiAgICogQHBhcmFtIHByb2dyYW0gLSBJbnN0YW5jZSBvZiBwcm9ncmFtIHRvIHVzZSB2YW8gZm9yLlxuICAgKi9cbiAgYmluZChnZW9tZXRyeSwgcHJvZ3JhbSkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICB0aGlzLl9hY3RpdmVHZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgIGNvbnN0IHZhbyA9IHRoaXMuZ2V0VmFvKGdlb21ldHJ5LCBwcm9ncmFtKTtcbiAgICBpZiAodGhpcy5fYWN0aXZlVmFvICE9PSB2YW8pIHtcbiAgICAgIHRoaXMuX2FjdGl2ZVZhbyA9IHZhbztcbiAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh2YW8pO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUJ1ZmZlcnMoKTtcbiAgfVxuICAvKiogUmVzZXQgYW5kIHVuYmluZCBhbnkgYWN0aXZlIFZBTyBhbmQgZ2VvbWV0cnkuICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMudW5iaW5kKCk7XG4gIH1cbiAgLyoqIFVwZGF0ZSBidWZmZXJzIG9mIHRoZSBjdXJyZW50bHkgYm91bmQgZ2VvbWV0cnkuICovXG4gIHVwZGF0ZUJ1ZmZlcnMoKSB7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSB0aGlzLl9hY3RpdmVHZW9tZXRyeTtcbiAgICBjb25zdCBidWZmZXJTeXN0ZW0gPSB0aGlzLl9yZW5kZXJlci5idWZmZXI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnZW9tZXRyeS5idWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBnZW9tZXRyeS5idWZmZXJzW2ldO1xuICAgICAgYnVmZmVyU3lzdGVtLnVwZGF0ZUJ1ZmZlcihidWZmZXIpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgY29tcGF0aWJpbGl0eSBiZXR3ZWVuIGEgZ2VvbWV0cnkgYW5kIGEgcHJvZ3JhbVxuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSBHZW9tZXRyeSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHByb2dyYW0gLSBQcm9ncmFtIGluc3RhbmNlLlxuICAgKi9cbiAgY2hlY2tDb21wYXRpYmlsaXR5KGdlb21ldHJ5LCBwcm9ncmFtKSB7XG4gICAgY29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcbiAgICBjb25zdCBzaGFkZXJBdHRyaWJ1dGVzID0gcHJvZ3JhbS5fYXR0cmlidXRlRGF0YTtcbiAgICBmb3IgKGNvbnN0IGogaW4gc2hhZGVyQXR0cmlidXRlcykge1xuICAgICAgaWYgKCFnZW9tZXRyeUF0dHJpYnV0ZXNbal0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzaGFkZXIgYW5kIGdlb21ldHJ5IGluY29tcGF0aWJsZSwgZ2VvbWV0cnkgbWlzc2luZyB0aGUgXCIke2p9XCIgYXR0cmlidXRlYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUYWtlcyBhIGdlb21ldHJ5IGFuZCBwcm9ncmFtIGFuZCBnZW5lcmF0ZXMgYSB1bmlxdWUgc2lnbmF0dXJlIGZvciB0aGVtLlxuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSBUbyBnZXQgc2lnbmF0dXJlIGZyb20uXG4gICAqIEBwYXJhbSBwcm9ncmFtIC0gVG8gdGVzdCBnZW9tZXRyeSBhZ2FpbnN0LlxuICAgKiBAcmV0dXJucyAtIFVuaXF1ZSBzaWduYXR1cmUgb2YgdGhlIGdlb21ldHJ5IGFuZCBwcm9ncmFtXG4gICAqL1xuICBnZXRTaWduYXR1cmUoZ2VvbWV0cnksIHByb2dyYW0pIHtcbiAgICBjb25zdCBhdHRyaWJzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcbiAgICBjb25zdCBzaGFkZXJBdHRyaWJ1dGVzID0gcHJvZ3JhbS5fYXR0cmlidXRlRGF0YTtcbiAgICBjb25zdCBzdHJpbmdzID0gW1wiZ1wiLCBnZW9tZXRyeS51aWRdO1xuICAgIGZvciAoY29uc3QgaSBpbiBhdHRyaWJzKSB7XG4gICAgICBpZiAoc2hhZGVyQXR0cmlidXRlc1tpXSkge1xuICAgICAgICBzdHJpbmdzLnB1c2goaSwgc2hhZGVyQXR0cmlidXRlc1tpXS5sb2NhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdzLmpvaW4oXCItXCIpO1xuICB9XG4gIGdldFZhbyhnZW9tZXRyeSwgcHJvZ3JhbSkge1xuICAgIHJldHVybiB0aGlzLl9nZW9tZXRyeVZhb0hhc2hbZ2VvbWV0cnkudWlkXT8uW3Byb2dyYW0uX2tleV0gfHwgdGhpcy5pbml0R2VvbWV0cnlWYW8oZ2VvbWV0cnksIHByb2dyYW0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIG9yIGdldHMgVmFvIHdpdGggdGhlIHNhbWUgc3RydWN0dXJlIGFzIHRoZSBnZW9tZXRyeSBhbmQgc3RvcmVzIGl0IG9uIHRoZSBnZW9tZXRyeS5cbiAgICogSWYgdmFvIGlzIGNyZWF0ZWQsIGl0IGlzIGJvdW5kIGF1dG9tYXRpY2FsbHkuIFdlIHVzZSBhIHNoYWRlciB0byBpbmZlciB3aGF0IGFuZCBob3cgdG8gc2V0IHVwIHRoZVxuICAgKiBhdHRyaWJ1dGUgbG9jYXRpb25zLlxuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSBJbnN0YW5jZSBvZiBnZW9tZXRyeSB0byB0byBnZW5lcmF0ZSBWYW8gZm9yLlxuICAgKiBAcGFyYW0gcHJvZ3JhbVxuICAgKiBAcGFyYW0gX2luY1JlZkNvdW50IC0gSW5jcmVtZW50IHJlZkNvdW50IG9mIGFsbCBnZW9tZXRyeSBidWZmZXJzLlxuICAgKi9cbiAgaW5pdEdlb21ldHJ5VmFvKGdlb21ldHJ5LCBwcm9ncmFtLCBfaW5jUmVmQ291bnQgPSB0cnVlKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBjb25zdCBidWZmZXJTeXN0ZW0gPSB0aGlzLl9yZW5kZXJlci5idWZmZXI7XG4gICAgdGhpcy5fcmVuZGVyZXIuc2hhZGVyLl9nZXRQcm9ncmFtRGF0YShwcm9ncmFtKTtcbiAgICB0aGlzLmNoZWNrQ29tcGF0aWJpbGl0eShnZW9tZXRyeSwgcHJvZ3JhbSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gdGhpcy5nZXRTaWduYXR1cmUoZ2VvbWV0cnksIHByb2dyYW0pO1xuICAgIGlmICghdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2dlb21ldHJ5LnVpZF0pIHtcbiAgICAgIHRoaXMuX2dlb21ldHJ5VmFvSGFzaFtnZW9tZXRyeS51aWRdID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBnZW9tZXRyeS5vbihcImRlc3Ryb3lcIiwgdGhpcy5vbkdlb21ldHJ5RGVzdHJveSwgdGhpcyk7XG4gICAgfVxuICAgIGNvbnN0IHZhb09iamVjdEhhc2ggPSB0aGlzLl9nZW9tZXRyeVZhb0hhc2hbZ2VvbWV0cnkudWlkXTtcbiAgICBsZXQgdmFvID0gdmFvT2JqZWN0SGFzaFtzaWduYXR1cmVdO1xuICAgIGlmICh2YW8pIHtcbiAgICAgIHZhb09iamVjdEhhc2hbcHJvZ3JhbS5fa2V5XSA9IHZhbztcbiAgICAgIHJldHVybiB2YW87XG4gICAgfVxuICAgIGVuc3VyZUF0dHJpYnV0ZXMoZ2VvbWV0cnksIHByb2dyYW0uX2F0dHJpYnV0ZURhdGEpO1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBnZW9tZXRyeS5idWZmZXJzO1xuICAgIHZhbyA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XG4gICAgZ2wuYmluZFZlcnRleEFycmF5KHZhbyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBidWZmZXJzW2ldO1xuICAgICAgYnVmZmVyU3lzdGVtLmJpbmQoYnVmZmVyKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmF0ZVZhbyhnZW9tZXRyeSwgcHJvZ3JhbSk7XG4gICAgdmFvT2JqZWN0SGFzaFtwcm9ncmFtLl9rZXldID0gdmFvO1xuICAgIHZhb09iamVjdEhhc2hbc2lnbmF0dXJlXSA9IHZhbztcbiAgICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XG4gICAgcmV0dXJuIHZhbztcbiAgfVxuICAvKipcbiAgICogRGlzcG9zZXMgZ2VvbWV0cnkuXG4gICAqIEBwYXJhbSBnZW9tZXRyeSAtIEdlb21ldHJ5IHdpdGggYnVmZmVycy4gT25seSBWQU8gd2lsbCBiZSBkaXNwb3NlZFxuICAgKiBAcGFyYW0gW2NvbnRleHRMb3N0PWZhbHNlXSAtIElmIGNvbnRleHQgd2FzIGxvc3QsIHdlIHN1cHByZXNzIGRlbGV0ZVZlcnRleEFycmF5XG4gICAqL1xuICBvbkdlb21ldHJ5RGVzdHJveShnZW9tZXRyeSwgY29udGV4dExvc3QpIHtcbiAgICBjb25zdCB2YW9PYmplY3RIYXNoID0gdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2dlb21ldHJ5LnVpZF07XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgIGlmICh2YW9PYmplY3RIYXNoKSB7XG4gICAgICBpZiAoY29udGV4dExvc3QpIHtcbiAgICAgICAgZm9yIChjb25zdCBpIGluIHZhb09iamVjdEhhc2gpIHtcbiAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlVmFvICE9PSB2YW9PYmplY3RIYXNoW2ldKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBnbC5kZWxldGVWZXJ0ZXhBcnJheSh2YW9PYmplY3RIYXNoW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2dlb21ldHJ5LnVpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGlzcG9zZSBhbGwgV2ViR0wgcmVzb3VyY2VzIG9mIGFsbCBtYW5hZ2VkIGdlb21ldHJpZXMuXG4gICAqIEBwYXJhbSBbY29udGV4dExvc3Q9ZmFsc2VdIC0gSWYgY29udGV4dCB3YXMgbG9zdCwgd2Ugc3VwcHJlc3MgYGdsLmRlbGV0ZWAgY2FsbHNcbiAgICovXG4gIGRlc3Ryb3lBbGwoY29udGV4dExvc3QgPSBmYWxzZSkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fZ2VvbWV0cnlWYW9IYXNoKSB7XG4gICAgICBpZiAoY29udGV4dExvc3QpIHtcbiAgICAgICAgZm9yIChjb25zdCBqIGluIHRoaXMuX2dlb21ldHJ5VmFvSGFzaFtpXSkge1xuICAgICAgICAgIGNvbnN0IHZhb09iamVjdEhhc2ggPSB0aGlzLl9nZW9tZXRyeVZhb0hhc2hbaV07XG4gICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVZhbyAhPT0gdmFvT2JqZWN0SGFzaCkge1xuICAgICAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ2wuZGVsZXRlVmVydGV4QXJyYXkodmFvT2JqZWN0SGFzaFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2dlb21ldHJ5VmFvSGFzaFtpXSA9IG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZSB2ZXJ0ZXggYXJyYXkgb2JqZWN0LlxuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSBHZW9tZXRyeSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHByb2dyYW0gLSBTaGFkZXIgcHJvZ3JhbSBpbnN0YW5jZS5cbiAgICovXG4gIGFjdGl2YXRlVmFvKGdlb21ldHJ5LCBwcm9ncmFtKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBjb25zdCBidWZmZXJTeXN0ZW0gPSB0aGlzLl9yZW5kZXJlci5idWZmZXI7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG4gICAgaWYgKGdlb21ldHJ5LmluZGV4QnVmZmVyKSB7XG4gICAgICBidWZmZXJTeXN0ZW0uYmluZChnZW9tZXRyeS5pbmRleEJ1ZmZlcik7XG4gICAgfVxuICAgIGxldCBsYXN0QnVmZmVyID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGogaW4gYXR0cmlidXRlcykge1xuICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1tqXTtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGF0dHJpYnV0ZS5idWZmZXI7XG4gICAgICBjb25zdCBnbEJ1ZmZlciA9IGJ1ZmZlclN5c3RlbS5nZXRHbEJ1ZmZlcihidWZmZXIpO1xuICAgICAgY29uc3QgcHJvZ3JhbUF0dHJpYiA9IHByb2dyYW0uX2F0dHJpYnV0ZURhdGFbal07XG4gICAgICBpZiAocHJvZ3JhbUF0dHJpYikge1xuICAgICAgICBpZiAobGFzdEJ1ZmZlciAhPT0gZ2xCdWZmZXIpIHtcbiAgICAgICAgICBidWZmZXJTeXN0ZW0uYmluZChidWZmZXIpO1xuICAgICAgICAgIGxhc3RCdWZmZXIgPSBnbEJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHByb2dyYW1BdHRyaWIubG9jYXRpb247XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uKTtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlSW5mbyA9IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0KGF0dHJpYnV0ZS5mb3JtYXQpO1xuICAgICAgICBjb25zdCB0eXBlID0gZ2V0R2xUeXBlRnJvbUZvcm1hdChhdHRyaWJ1dGUuZm9ybWF0KTtcbiAgICAgICAgaWYgKHByb2dyYW1BdHRyaWIuZm9ybWF0Py5zdWJzdHJpbmcoMSwgNCkgPT09IFwiaW50XCIpIHtcbiAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJJUG9pbnRlcihcbiAgICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgICAgYXR0cmlidXRlSW5mby5zaXplLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5zdHJpZGUsXG4gICAgICAgICAgICBhdHRyaWJ1dGUub2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICBhdHRyaWJ1dGVJbmZvLnNpemUsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgYXR0cmlidXRlSW5mby5ub3JtYWxpc2VkLFxuICAgICAgICAgICAgYXR0cmlidXRlLnN0cmlkZSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5vZmZzZXRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyaWJ1dGUuaW5zdGFuY2UpIHtcbiAgICAgICAgICBpZiAodGhpcy5oYXNJbnN0YW5jZSkge1xuICAgICAgICAgICAgY29uc3QgZGl2aXNvciA9IGF0dHJpYnV0ZS5kaXZpc29yID8/IDE7XG4gICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJEaXZpc29yKGxvY2F0aW9uLCBkaXZpc29yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZ2VvbWV0cnkgZXJyb3IsIEdQVSBJbnN0YW5jaW5nIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2VcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgY3VycmVudGx5IGJvdW5kIGdlb21ldHJ5LlxuICAgKiBAcGFyYW0gdG9wb2xvZ3kgLSBUaGUgdHlwZSBwcmltaXRpdmUgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0gc2l6ZSAtIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gYmUgcmVuZGVyZWQuIElmIG5vdCBzcGVjaWZpZWQsIGFsbCB2ZXJ0aWNlcyBhZnRlciB0aGVcbiAgICogIHN0YXJ0aW5nIHZlcnRleCB3aWxsIGJlIGRyYXduLlxuICAgKiBAcGFyYW0gc3RhcnQgLSBUaGUgc3RhcnRpbmcgdmVydGV4IGluIHRoZSBnZW9tZXRyeSB0byBzdGFydCBkcmF3aW5nIGZyb20uIElmIG5vdCBzcGVjaWZpZWQsXG4gICAqICBkcmF3aW5nIHdpbGwgc3RhcnQgZnJvbSB0aGUgZmlyc3QgdmVydGV4LlxuICAgKiBAcGFyYW0gaW5zdGFuY2VDb3VudCAtIFRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIG9mIHRoZSBzZXQgb2YgZWxlbWVudHMgdG8gZXhlY3V0ZS4gSWYgbm90IHNwZWNpZmllZCxcbiAgICogIGFsbCBpbnN0YW5jZXMgd2lsbCBiZSBkcmF3bi5cbiAgICovXG4gIGRyYXcodG9wb2xvZ3ksIHNpemUsIHN0YXJ0LCBpbnN0YW5jZUNvdW50KSB7XG4gICAgY29uc3QgeyBnbCB9ID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSB0aGlzLl9hY3RpdmVHZW9tZXRyeTtcbiAgICBjb25zdCBnbFRvcG9sb2d5ID0gdG9wb2xvZ3lUb0dsTWFwW2dlb21ldHJ5LnRvcG9sb2d5IHx8IHRvcG9sb2d5XTtcbiAgICBpbnN0YW5jZUNvdW50IHx8IChpbnN0YW5jZUNvdW50ID0gZ2VvbWV0cnkuaW5zdGFuY2VDb3VudCk7XG4gICAgaWYgKGdlb21ldHJ5LmluZGV4QnVmZmVyKSB7XG4gICAgICBjb25zdCBieXRlU2l6ZSA9IGdlb21ldHJ5LmluZGV4QnVmZmVyLmRhdGEuQllURVNfUEVSX0VMRU1FTlQ7XG4gICAgICBjb25zdCBnbFR5cGUgPSBieXRlU2l6ZSA9PT0gMiA/IGdsLlVOU0lHTkVEX1NIT1JUIDogZ2wuVU5TSUdORURfSU5UO1xuICAgICAgaWYgKGluc3RhbmNlQ291bnQgPiAxKSB7XG4gICAgICAgIGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZChnbFRvcG9sb2d5LCBzaXplIHx8IGdlb21ldHJ5LmluZGV4QnVmZmVyLmRhdGEubGVuZ3RoLCBnbFR5cGUsIChzdGFydCB8fCAwKSAqIGJ5dGVTaXplLCBpbnN0YW5jZUNvdW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLmRyYXdFbGVtZW50cyhnbFRvcG9sb2d5LCBzaXplIHx8IGdlb21ldHJ5LmluZGV4QnVmZmVyLmRhdGEubGVuZ3RoLCBnbFR5cGUsIChzdGFydCB8fCAwKSAqIGJ5dGVTaXplKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlQ291bnQgPiAxKSB7XG4gICAgICBnbC5kcmF3QXJyYXlzSW5zdGFuY2VkKGdsVG9wb2xvZ3ksIHN0YXJ0IHx8IDAsIHNpemUgfHwgZ2VvbWV0cnkuZ2V0U2l6ZSgpLCBpbnN0YW5jZUNvdW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wuZHJhd0FycmF5cyhnbFRvcG9sb2d5LCBzdGFydCB8fCAwLCBzaXplIHx8IGdlb21ldHJ5LmdldFNpemUoKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKiBVbmJpbmQvcmVzZXQgZXZlcnl0aGluZy4gKi9cbiAgdW5iaW5kKCkge1xuICAgIHRoaXMuZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xuICAgIHRoaXMuX2FjdGl2ZVZhbyA9IG51bGw7XG4gICAgdGhpcy5fYWN0aXZlR2VvbWV0cnkgPSBudWxsO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuZ2wgPSBudWxsO1xuICAgIHRoaXMuX2FjdGl2ZVZhbyA9IG51bGw7XG4gICAgdGhpcy5fYWN0aXZlR2VvbWV0cnkgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xHZW9tZXRyeVN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwiZ2VvbWV0cnlcIlxufTtcblxuZXhwb3J0IHsgR2xHZW9tZXRyeVN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xHZW9tZXRyeVN5c3RlbS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy93YXJuLm1qcyc7XG5pbXBvcnQgeyBHZW9tZXRyeSB9IGZyb20gJy4uL3NoYXJlZC9nZW9tZXRyeS9HZW9tZXRyeS5tanMnO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSAnLi4vc2hhcmVkL3NoYWRlci9TaGFkZXIubWpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vc2hhcmVkL3N0YXRlL1N0YXRlLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlU291cmNlIH0gZnJvbSAnLi4vc2hhcmVkL3RleHR1cmUvc291cmNlcy9UZXh0dXJlU291cmNlLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgR2xQcm9ncmFtIH0gZnJvbSAnLi9zaGFkZXIvR2xQcm9ncmFtLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgYmlnVHJpYW5nbGVHZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSh7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBhUG9zaXRpb246IFtcbiAgICAgIC0xLFxuICAgICAgLTEsXG4gICAgICAvLyBCb3R0b20gbGVmdCBjb3JuZXJcbiAgICAgIDMsXG4gICAgICAtMSxcbiAgICAgIC8vIEJvdHRvbSByaWdodCBjb3JuZXIsIGV4dGVuZGluZyBiZXlvbmQgcmlnaHQgZWRnZVxuICAgICAgLTEsXG4gICAgICAzXG4gICAgICAvLyBUb3AgbGVmdCBjb3JuZXIsIGV4dGVuZGluZyBiZXlvbmQgdG9wIGVkZ2VcbiAgICBdXG4gIH1cbn0pO1xuY29uc3QgX0dsQmFja0J1ZmZlclN5c3RlbSA9IGNsYXNzIF9HbEJhY2tCdWZmZXJTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIC8qKiBpZiB0cnVlLCB0aGUgYmFjayBidWZmZXIgaXMgdXNlZCAqL1xuICAgIHRoaXMudXNlQmFja0J1ZmZlciA9IGZhbHNlO1xuICAgIHRoaXMuX3VzZUJhY2tCdWZmZXJUaGlzUmVuZGVyID0gZmFsc2U7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBpbml0KG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgdXNlQmFja0J1ZmZlciwgYW50aWFsaWFzIH0gPSB7IC4uLl9HbEJhY2tCdWZmZXJTeXN0ZW0uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICB0aGlzLnVzZUJhY2tCdWZmZXIgPSB1c2VCYWNrQnVmZmVyO1xuICAgIHRoaXMuX2FudGlhbGlhcyA9IGFudGlhbGlhcztcbiAgICBpZiAoIXRoaXMuX3JlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMubXNhYSkge1xuICAgICAgd2FybihcImFudGlhbGlhc2luZywgaXMgbm90IHN1cHBvcnRlZCBvbiB3aGVuIHVzaW5nIHRoZSBiYWNrIGJ1ZmZlclwiKTtcbiAgICAgIHRoaXMuX2FudGlhbGlhcyA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9zdGF0ZSA9IFN0YXRlLmZvcjJkKCk7XG4gICAgY29uc3QgYmlnVHJpYW5nbGVQcm9ncmFtID0gbmV3IEdsUHJvZ3JhbSh7XG4gICAgICB2ZXJ0ZXg6IGBcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgdmVjMiBhUG9zaXRpb247XG4gICAgICAgICAgICAgICAgb3V0IHZlYzIgdlV2O1xuXG4gICAgICAgICAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoYVBvc2l0aW9uLCAwLjAsIDEuMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdlV2ID0gKGFQb3NpdGlvbiArIDEuMCkgLyAyLjA7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZmxpcCBkZW0gVVZzXG4gICAgICAgICAgICAgICAgICAgIHZVdi55ID0gMS4wIC0gdlV2Lnk7XG4gICAgICAgICAgICAgICAgfWAsXG4gICAgICBmcmFnbWVudDogYFxuICAgICAgICAgICAgICAgIGluIHZlYzIgdlV2O1xuICAgICAgICAgICAgICAgIG91dCB2ZWM0IGZpbmFsQ29sb3I7XG5cbiAgICAgICAgICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcblxuICAgICAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxDb2xvciA9IHRleHR1cmUodVRleHR1cmUsIHZVdik7XG4gICAgICAgICAgICAgICAgfWAsXG4gICAgICBuYW1lOiBcImJpZy10cmlhbmdsZVwiXG4gICAgfSk7XG4gICAgdGhpcy5fYmlnVHJpYW5nbGVTaGFkZXIgPSBuZXcgU2hhZGVyKHtcbiAgICAgIGdsUHJvZ3JhbTogYmlnVHJpYW5nbGVQcm9ncmFtLFxuICAgICAgcmVzb3VyY2VzOiB7XG4gICAgICAgIHVUZXh0dXJlOiBUZXh0dXJlLldISVRFLnNvdXJjZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGlzIGNhbGxlZCBiZWZvcmUgdGhlIFJlbmRlclRhcmdldFN5c3RlbSBpcyBzdGFydGVkLiBUaGlzIGlzIHdoZXJlXG4gICAqIHdlIHJlcGxhY2UgdGhlIHRhcmdldCB3aXRoIHRoZSBiYWNrIGJ1ZmZlciBpZiByZXF1aXJlZC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhpcyByZW5kZXIuXG4gICAqL1xuICByZW5kZXJTdGFydChvcHRpb25zKSB7XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0ID0gdGhpcy5fcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmdldFJlbmRlclRhcmdldChvcHRpb25zLnRhcmdldCk7XG4gICAgdGhpcy5fdXNlQmFja0J1ZmZlclRoaXNSZW5kZXIgPSB0aGlzLnVzZUJhY2tCdWZmZXIgJiYgISFyZW5kZXJUYXJnZXQuaXNSb290O1xuICAgIGlmICh0aGlzLl91c2VCYWNrQnVmZmVyVGhpc1JlbmRlcikge1xuICAgICAgY29uc3QgcmVuZGVyVGFyZ2V0MiA9IHRoaXMuX3JlbmRlcmVyLnJlbmRlclRhcmdldC5nZXRSZW5kZXJUYXJnZXQob3B0aW9ucy50YXJnZXQpO1xuICAgICAgdGhpcy5fdGFyZ2V0VGV4dHVyZSA9IHJlbmRlclRhcmdldDIuY29sb3JUZXh0dXJlO1xuICAgICAgb3B0aW9ucy50YXJnZXQgPSB0aGlzLl9nZXRCYWNrQnVmZmVyVGV4dHVyZShyZW5kZXJUYXJnZXQyLmNvbG9yVGV4dHVyZSk7XG4gICAgfVxuICB9XG4gIHJlbmRlckVuZCgpIHtcbiAgICB0aGlzLl9wcmVzZW50QmFja0J1ZmZlcigpO1xuICB9XG4gIF9wcmVzZW50QmFja0J1ZmZlcigpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIHJlbmRlcmVyLnJlbmRlclRhcmdldC5maW5pc2hSZW5kZXJQYXNzKCk7XG4gICAgaWYgKCF0aGlzLl91c2VCYWNrQnVmZmVyVGhpc1JlbmRlcilcbiAgICAgIHJldHVybjtcbiAgICByZW5kZXJlci5yZW5kZXJUYXJnZXQuYmluZCh0aGlzLl90YXJnZXRUZXh0dXJlLCBmYWxzZSk7XG4gICAgdGhpcy5fYmlnVHJpYW5nbGVTaGFkZXIucmVzb3VyY2VzLnVUZXh0dXJlID0gdGhpcy5fYmFja0J1ZmZlclRleHR1cmUuc291cmNlO1xuICAgIHJlbmRlcmVyLmVuY29kZXIuZHJhdyh7XG4gICAgICBnZW9tZXRyeTogYmlnVHJpYW5nbGVHZW9tZXRyeSxcbiAgICAgIHNoYWRlcjogdGhpcy5fYmlnVHJpYW5nbGVTaGFkZXIsXG4gICAgICBzdGF0ZTogdGhpcy5fc3RhdGVcbiAgICB9KTtcbiAgfVxuICBfZ2V0QmFja0J1ZmZlclRleHR1cmUodGFyZ2V0U291cmNlVGV4dHVyZSkge1xuICAgIHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlID0gdGhpcy5fYmFja0J1ZmZlclRleHR1cmUgfHwgbmV3IFRleHR1cmUoe1xuICAgICAgc291cmNlOiBuZXcgVGV4dHVyZVNvdXJjZSh7XG4gICAgICAgIHdpZHRoOiB0YXJnZXRTb3VyY2VUZXh0dXJlLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRhcmdldFNvdXJjZVRleHR1cmUuaGVpZ2h0LFxuICAgICAgICByZXNvbHV0aW9uOiB0YXJnZXRTb3VyY2VUZXh0dXJlLl9yZXNvbHV0aW9uLFxuICAgICAgICBhbnRpYWxpYXM6IHRoaXMuX2FudGlhbGlhc1xuICAgICAgfSlcbiAgICB9KTtcbiAgICB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZS5zb3VyY2UucmVzaXplKFxuICAgICAgdGFyZ2V0U291cmNlVGV4dHVyZS53aWR0aCxcbiAgICAgIHRhcmdldFNvdXJjZVRleHR1cmUuaGVpZ2h0LFxuICAgICAgdGFyZ2V0U291cmNlVGV4dHVyZS5fcmVzb2x1dGlvblxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlO1xuICB9XG4gIC8qKiBkZXN0cm95cyB0aGUgYmFjayBidWZmZXIgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5fYmFja0J1ZmZlclRleHR1cmUpIHtcbiAgICAgIHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlID0gbnVsbDtcbiAgICB9XG4gIH1cbn07XG4vKiogQGlnbm9yZSAqL1xuX0dsQmFja0J1ZmZlclN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwiYmFja0J1ZmZlclwiLFxuICBwcmlvcml0eTogMVxufTtcbi8qKiBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBiYWNrIGJ1ZmZlciBzeXN0ZW0gKi9cbl9HbEJhY2tCdWZmZXJTeXN0ZW0uZGVmYXVsdE9wdGlvbnMgPSB7XG4gIC8qKiBpZiB0cnVlIHdpbGwgdXNlIHRoZSBiYWNrIGJ1ZmZlciB3aGVyZSByZXF1aXJlZCAqL1xuICB1c2VCYWNrQnVmZmVyOiBmYWxzZVxufTtcbmxldCBHbEJhY2tCdWZmZXJTeXN0ZW0gPSBfR2xCYWNrQnVmZmVyU3lzdGVtO1xuXG5leHBvcnQgeyBHbEJhY2tCdWZmZXJTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsQmFja0J1ZmZlclN5c3RlbS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xDb2xvck1hc2tTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX2NvbG9yTWFza0NhY2hlID0gMTU7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBzZXRNYXNrKGNvbG9yTWFzaykge1xuICAgIGlmICh0aGlzLl9jb2xvck1hc2tDYWNoZSA9PT0gY29sb3JNYXNrKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2NvbG9yTWFza0NhY2hlID0gY29sb3JNYXNrO1xuICAgIHRoaXMuX3JlbmRlcmVyLmdsLmNvbG9yTWFzayhcbiAgICAgICEhKGNvbG9yTWFzayAmIDgpLFxuICAgICAgISEoY29sb3JNYXNrICYgNCksXG4gICAgICAhIShjb2xvck1hc2sgJiAyKSxcbiAgICAgICEhKGNvbG9yTWFzayAmIDEpXG4gICAgKTtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsQ29sb3JNYXNrU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJjb2xvck1hc2tcIlxufTtcblxuZXhwb3J0IHsgR2xDb2xvck1hc2tTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsQ29sb3JNYXNrU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbEVuY29kZXJTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuY29tbWFuZEZpbmlzaGVkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBzZXRHZW9tZXRyeShnZW9tZXRyeSwgc2hhZGVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuZ2VvbWV0cnkuYmluZChnZW9tZXRyeSwgc2hhZGVyLmdsUHJvZ3JhbSk7XG4gIH1cbiAgZmluaXNoUmVuZGVyUGFzcygpIHtcbiAgfVxuICBkcmF3KG9wdGlvbnMpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGNvbnN0IHsgZ2VvbWV0cnksIHNoYWRlciwgc3RhdGUsIHNraXBTeW5jLCB0b3BvbG9neTogdHlwZSwgc2l6ZSwgc3RhcnQsIGluc3RhbmNlQ291bnQgfSA9IG9wdGlvbnM7XG4gICAgcmVuZGVyZXIuc2hhZGVyLmJpbmQoc2hhZGVyLCBza2lwU3luYyk7XG4gICAgcmVuZGVyZXIuZ2VvbWV0cnkuYmluZChnZW9tZXRyeSwgcmVuZGVyZXIuc2hhZGVyLl9hY3RpdmVQcm9ncmFtKTtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIHJlbmRlcmVyLnN0YXRlLnNldChzdGF0ZSk7XG4gICAgfVxuICAgIHJlbmRlcmVyLmdlb21ldHJ5LmRyYXcodHlwZSwgc2l6ZSwgc3RhcnQsIGluc3RhbmNlQ291bnQgPz8gZ2VvbWV0cnkuaW5zdGFuY2VDb3VudCk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbEVuY29kZXJTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImVuY29kZXJcIlxufTtcblxuZXhwb3J0IHsgR2xFbmNvZGVyU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbEVuY29kZXJTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgR3B1U3RlbmNpbE1vZGVzVG9QaXhpIH0gZnJvbSAnLi4vZ3B1L3N0YXRlL0dwdVN0ZW5jaWxNb2Rlc1RvUGl4aS5tanMnO1xuaW1wb3J0IHsgU1RFTkNJTF9NT0RFUyB9IGZyb20gJy4uL3NoYXJlZC9zdGF0ZS9jb25zdC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsU3RlbmNpbFN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fc3RlbmNpbENhY2hlID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBzdGVuY2lsUmVmZXJlbmNlOiAwLFxuICAgICAgc3RlbmNpbE1vZGU6IFNURU5DSUxfTU9ERVMuTk9ORVxuICAgIH07XG4gICAgdGhpcy5fcmVuZGVyVGFyZ2V0U3RlbmNpbFN0YXRlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0Lm9uUmVuZGVyVGFyZ2V0Q2hhbmdlLmFkZCh0aGlzKTtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKGdsKSB7XG4gICAgdGhpcy5fZ2wgPSBnbDtcbiAgICB0aGlzLl9jb21wYXJpc29uRnVuY01hcHBpbmcgPSB7XG4gICAgICBhbHdheXM6IGdsLkFMV0FZUyxcbiAgICAgIG5ldmVyOiBnbC5ORVZFUixcbiAgICAgIGVxdWFsOiBnbC5FUVVBTCxcbiAgICAgIFwibm90LWVxdWFsXCI6IGdsLk5PVEVRVUFMLFxuICAgICAgbGVzczogZ2wuTEVTUyxcbiAgICAgIFwibGVzcy1lcXVhbFwiOiBnbC5MRVFVQUwsXG4gICAgICBncmVhdGVyOiBnbC5HUkVBVEVSLFxuICAgICAgXCJncmVhdGVyLWVxdWFsXCI6IGdsLkdFUVVBTFxuICAgIH07XG4gICAgdGhpcy5fc3RlbmNpbE9wc01hcHBpbmcgPSB7XG4gICAgICBrZWVwOiBnbC5LRUVQLFxuICAgICAgemVybzogZ2wuWkVSTyxcbiAgICAgIHJlcGxhY2U6IGdsLlJFUExBQ0UsXG4gICAgICBpbnZlcnQ6IGdsLklOVkVSVCxcbiAgICAgIFwiaW5jcmVtZW50LWNsYW1wXCI6IGdsLklOQ1IsXG4gICAgICBcImRlY3JlbWVudC1jbGFtcFwiOiBnbC5ERUNSLFxuICAgICAgXCJpbmNyZW1lbnQtd3JhcFwiOiBnbC5JTkNSX1dSQVAsXG4gICAgICBcImRlY3JlbWVudC13cmFwXCI6IGdsLkRFQ1JfV1JBUFxuICAgIH07XG4gICAgdGhpcy5fc3RlbmNpbENhY2hlLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9zdGVuY2lsQ2FjaGUuc3RlbmNpbE1vZGUgPSBTVEVOQ0lMX01PREVTLk5PTkU7XG4gICAgdGhpcy5fc3RlbmNpbENhY2hlLnN0ZW5jaWxSZWZlcmVuY2UgPSAwO1xuICB9XG4gIG9uUmVuZGVyVGFyZ2V0Q2hhbmdlKHJlbmRlclRhcmdldCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQgPT09IHJlbmRlclRhcmdldClcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG4gICAgbGV0IHN0ZW5jaWxTdGF0ZSA9IHRoaXMuX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZVtyZW5kZXJUYXJnZXQudWlkXTtcbiAgICBpZiAoIXN0ZW5jaWxTdGF0ZSkge1xuICAgICAgc3RlbmNpbFN0YXRlID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3RlbmNpbFN0YXRlW3JlbmRlclRhcmdldC51aWRdID0ge1xuICAgICAgICBzdGVuY2lsTW9kZTogU1RFTkNJTF9NT0RFUy5ESVNBQkxFRCxcbiAgICAgICAgc3RlbmNpbFJlZmVyZW5jZTogMFxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGVuY2lsTW9kZShzdGVuY2lsU3RhdGUuc3RlbmNpbE1vZGUsIHN0ZW5jaWxTdGF0ZS5zdGVuY2lsUmVmZXJlbmNlKTtcbiAgfVxuICBzZXRTdGVuY2lsTW9kZShzdGVuY2lsTW9kZSwgc3RlbmNpbFJlZmVyZW5jZSkge1xuICAgIGNvbnN0IHN0ZW5jaWxTdGF0ZSA9IHRoaXMuX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZVt0aGlzLl9hY3RpdmVSZW5kZXJUYXJnZXQudWlkXTtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IG1vZGUgPSBHcHVTdGVuY2lsTW9kZXNUb1BpeGlbc3RlbmNpbE1vZGVdO1xuICAgIGNvbnN0IF9zdGVuY2lsQ2FjaGUgPSB0aGlzLl9zdGVuY2lsQ2FjaGU7XG4gICAgc3RlbmNpbFN0YXRlLnN0ZW5jaWxNb2RlID0gc3RlbmNpbE1vZGU7XG4gICAgc3RlbmNpbFN0YXRlLnN0ZW5jaWxSZWZlcmVuY2UgPSBzdGVuY2lsUmVmZXJlbmNlO1xuICAgIGlmIChzdGVuY2lsTW9kZSA9PT0gU1RFTkNJTF9NT0RFUy5ESVNBQkxFRCkge1xuICAgICAgaWYgKHRoaXMuX3N0ZW5jaWxDYWNoZS5lbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX3N0ZW5jaWxDYWNoZS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGdsLmRpc2FibGUoZ2wuU1RFTkNJTF9URVNUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9zdGVuY2lsQ2FjaGUuZW5hYmxlZCkge1xuICAgICAgdGhpcy5fc3RlbmNpbENhY2hlLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgZ2wuZW5hYmxlKGdsLlNURU5DSUxfVEVTVCk7XG4gICAgfVxuICAgIGlmIChzdGVuY2lsTW9kZSAhPT0gX3N0ZW5jaWxDYWNoZS5zdGVuY2lsTW9kZSB8fCBfc3RlbmNpbENhY2hlLnN0ZW5jaWxSZWZlcmVuY2UgIT09IHN0ZW5jaWxSZWZlcmVuY2UpIHtcbiAgICAgIF9zdGVuY2lsQ2FjaGUuc3RlbmNpbE1vZGUgPSBzdGVuY2lsTW9kZTtcbiAgICAgIF9zdGVuY2lsQ2FjaGUuc3RlbmNpbFJlZmVyZW5jZSA9IHN0ZW5jaWxSZWZlcmVuY2U7XG4gICAgICBnbC5zdGVuY2lsRnVuYyh0aGlzLl9jb21wYXJpc29uRnVuY01hcHBpbmdbbW9kZS5zdGVuY2lsQmFjay5jb21wYXJlXSwgc3RlbmNpbFJlZmVyZW5jZSwgMjU1KTtcbiAgICAgIGdsLnN0ZW5jaWxPcChnbC5LRUVQLCBnbC5LRUVQLCB0aGlzLl9zdGVuY2lsT3BzTWFwcGluZ1ttb2RlLnN0ZW5jaWxCYWNrLnBhc3NPcF0pO1xuICAgIH1cbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsU3RlbmNpbFN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwic3RlbmNpbFwiXG59O1xuXG5leHBvcnQgeyBHbFN0ZW5jaWxTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsU3RlbmNpbFN5c3RlbS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFdHU0xfVE9fU1RENDBfU0laRSA9IHtcbiAgZjMyOiA0LFxuICBcInZlYzI8ZjMyPlwiOiA4LFxuICBcInZlYzM8ZjMyPlwiOiAxMixcbiAgXCJ2ZWM0PGYzMj5cIjogMTYsXG4gIFwibWF0MngyPGYzMj5cIjogMTYgKiAyLFxuICBcIm1hdDN4MzxmMzI+XCI6IDE2ICogMyxcbiAgXCJtYXQ0eDQ8ZjMyPlwiOiAxNiAqIDRcbiAgLy8gVE9ETyAtIG5vdCBlc3NlbnRpYWwgZm9yIG5vdyBidXQgc3VwcG9ydCB0aGVzZSBpbiB0aGUgZnV0dXJlXG4gIC8vIGludDogICAgICA0LFxuICAvLyBpdmVjMjogICAgOCxcbiAgLy8gaXZlYzM6ICAgIDEyLFxuICAvLyBpdmVjNDogICAgMTYsXG4gIC8vIHVpbnQ6ICAgICA0LFxuICAvLyB1dmVjMjogICAgOCxcbiAgLy8gdXZlYzM6ICAgIDEyLFxuICAvLyB1dmVjNDogICAgMTYsXG4gIC8vIGJvb2w6ICAgICA0LFxuICAvLyBidmVjMjogICAgOCxcbiAgLy8gYnZlYzM6ICAgIDEyLFxuICAvLyBidmVjNDogICAgMTYsXG4gIC8vIG1hdDI6ICAgICAxNiAqIDIsXG4gIC8vIG1hdDM6ICAgICAxNiAqIDMsXG4gIC8vIG1hdDQ6ICAgICAxNiAqIDQsXG59O1xuZnVuY3Rpb24gY3JlYXRlVWJvRWxlbWVudHNTVEQ0MCh1bmlmb3JtRGF0YSkge1xuICBjb25zdCB1Ym9FbGVtZW50cyA9IHVuaWZvcm1EYXRhLm1hcCgoZGF0YSkgPT4gKHtcbiAgICBkYXRhLFxuICAgIG9mZnNldDogMCxcbiAgICBzaXplOiAwXG4gIH0pKTtcbiAgbGV0IHNpemUgPSAwO1xuICBsZXQgY2h1bmtTaXplID0gMDtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdWJvRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB1Ym9FbGVtZW50ID0gdWJvRWxlbWVudHNbaV07XG4gICAgc2l6ZSA9IFdHU0xfVE9fU1RENDBfU0laRVt1Ym9FbGVtZW50LmRhdGEudHlwZV07XG4gICAgaWYgKCFzaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZSAke3Vib0VsZW1lbnQuZGF0YS50eXBlfWApO1xuICAgIH1cbiAgICBpZiAodWJvRWxlbWVudC5kYXRhLnNpemUgPiAxKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoc2l6ZSwgMTYpICogdWJvRWxlbWVudC5kYXRhLnNpemU7XG4gICAgfVxuICAgIHVib0VsZW1lbnQuc2l6ZSA9IHNpemU7XG4gICAgaWYgKGNodW5rU2l6ZSAlIHNpemUgIT09IDAgJiYgY2h1bmtTaXplIDwgMTYpIHtcbiAgICAgIGNvbnN0IGxpbmVVcFZhbHVlID0gY2h1bmtTaXplICUgc2l6ZSAlIDE2O1xuICAgICAgY2h1bmtTaXplICs9IGxpbmVVcFZhbHVlO1xuICAgICAgb2Zmc2V0ICs9IGxpbmVVcFZhbHVlO1xuICAgIH1cbiAgICBpZiAoY2h1bmtTaXplICsgc2l6ZSA+IDE2KSB7XG4gICAgICBvZmZzZXQgPSBNYXRoLmNlaWwob2Zmc2V0IC8gMTYpICogMTY7XG4gICAgICB1Ym9FbGVtZW50Lm9mZnNldCA9IG9mZnNldDtcbiAgICAgIG9mZnNldCArPSBzaXplO1xuICAgICAgY2h1bmtTaXplID0gc2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdWJvRWxlbWVudC5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICBjaHVua1NpemUgKz0gc2l6ZTtcbiAgICAgIG9mZnNldCArPSBzaXplO1xuICAgIH1cbiAgfVxuICBvZmZzZXQgPSBNYXRoLmNlaWwob2Zmc2V0IC8gMTYpICogMTY7XG4gIHJldHVybiB7IHVib0VsZW1lbnRzLCBzaXplOiBvZmZzZXQgfTtcbn1cblxuZXhwb3J0IHsgV0dTTF9UT19TVEQ0MF9TSVpFLCBjcmVhdGVVYm9FbGVtZW50c1NURDQwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVVYm9FbGVtZW50c1NURDQwLm1qcy5tYXBcbiIsImltcG9ydCB7IFdHU0xfVE9fU1RENDBfU0laRSB9IGZyb20gJy4vY3JlYXRlVWJvRWxlbWVudHNTVEQ0MC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdlbmVyYXRlQXJyYXlTeW5jU1RENDAodWJvRWxlbWVudCwgb2Zmc2V0VG9BZGQpIHtcbiAgY29uc3Qgcm93U2l6ZSA9IE1hdGgubWF4KFdHU0xfVE9fU1RENDBfU0laRVt1Ym9FbGVtZW50LmRhdGEudHlwZV0gLyAxNiwgMSk7XG4gIGNvbnN0IGVsZW1lbnRTaXplID0gdWJvRWxlbWVudC5kYXRhLnZhbHVlLmxlbmd0aCAvIHVib0VsZW1lbnQuZGF0YS5zaXplO1xuICBjb25zdCByZW1haW5kZXIgPSAoNCAtIGVsZW1lbnRTaXplICUgNCkgJSA0O1xuICByZXR1cm4gYFxuICAgICAgICB2ID0gdXYuJHt1Ym9FbGVtZW50LmRhdGEubmFtZX07XG4gICAgICAgIG9mZnNldCArPSAke29mZnNldFRvQWRkfTtcblxuICAgICAgICBhcnJheU9mZnNldCA9IG9mZnNldDtcblxuICAgICAgICB0ID0gMDtcblxuICAgICAgICBmb3IodmFyIGk9MDsgaSA8ICR7dWJvRWxlbWVudC5kYXRhLnNpemUgKiByb3dTaXplfTsgaSsrKVxuICAgICAgICB7XG4gICAgICAgICAgICBmb3IodmFyIGogPSAwOyBqIDwgJHtlbGVtZW50U2l6ZX07IGorKylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkYXRhW2FycmF5T2Zmc2V0KytdID0gdlt0KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtyZW1haW5kZXIgIT09IDAgPyBgYXJyYXlPZmZzZXQgKz0gJHtyZW1haW5kZXJ9O2AgOiBcIlwifVxuICAgICAgICB9XG4gICAgYDtcbn1cblxuZXhwb3J0IHsgZ2VuZXJhdGVBcnJheVN5bmNTVEQ0MCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJhdGVBcnJheVN5bmNTVEQ0MC5tanMubWFwXG4iLCJpbXBvcnQgeyBjcmVhdGVVYm9TeW5jRnVuY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvc2hhZGVyL3V0aWxzL2NyZWF0ZVVib1N5bmNGdW5jdGlvbi5tanMnO1xuaW1wb3J0IHsgdWJvU3luY0Z1bmN0aW9uc1NURDQwIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3NoYWRlci91dGlscy91Ym9TeW5jRnVuY3Rpb25zLm1qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZUFycmF5U3luY1NURDQwIH0gZnJvbSAnLi9nZW5lcmF0ZUFycmF5U3luY1NURDQwLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gY3JlYXRlVWJvU3luY0Z1bmN0aW9uU1RENDAodWJvRWxlbWVudHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVVib1N5bmNGdW5jdGlvbihcbiAgICB1Ym9FbGVtZW50cyxcbiAgICBcInVib1N0ZDQwXCIsXG4gICAgZ2VuZXJhdGVBcnJheVN5bmNTVEQ0MCxcbiAgICB1Ym9TeW5jRnVuY3Rpb25zU1RENDBcbiAgKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlVWJvU3luY0Z1bmN0aW9uU1RENDAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVVib1N5bmNTVEQ0MC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBVYm9TeXN0ZW0gfSBmcm9tICcuLi9zaGFyZWQvc2hhZGVyL1Vib1N5c3RlbS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlVWJvRWxlbWVudHNTVEQ0MCB9IGZyb20gJy4vc2hhZGVyL3V0aWxzL2NyZWF0ZVVib0VsZW1lbnRzU1RENDAubWpzJztcbmltcG9ydCB7IGNyZWF0ZVVib1N5bmNGdW5jdGlvblNURDQwIH0gZnJvbSAnLi9zaGFkZXIvdXRpbHMvY3JlYXRlVWJvU3luY1NURDQwLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xVYm9TeXN0ZW0gZXh0ZW5kcyBVYm9TeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBjcmVhdGVVYm9FbGVtZW50czogY3JlYXRlVWJvRWxlbWVudHNTVEQ0MCxcbiAgICAgIGdlbmVyYXRlVWJvU3luYzogY3JlYXRlVWJvU3luY0Z1bmN0aW9uU1RENDBcbiAgICB9KTtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsVWJvU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW0V4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1dLFxuICBuYW1lOiBcInVib1wiXG59O1xuXG5leHBvcnQgeyBHbFVib1N5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xVYm9TeXN0ZW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbFJlbmRlclRhcmdldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMud2lkdGggPSAtMTtcbiAgICB0aGlzLmhlaWdodCA9IC0xO1xuICAgIHRoaXMubXNhYSA9IGZhbHNlO1xuICAgIHRoaXMubXNhYVJlbmRlckJ1ZmZlciA9IFtdO1xuICB9XG59XG5cbmV4cG9ydCB7IEdsUmVuZGVyVGFyZ2V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFJlbmRlclRhcmdldC5tanMubWFwXG4iLCJpbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9tYXRocy9zaGFwZXMvUmVjdGFuZ2xlLm1qcyc7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy93YXJuLm1qcyc7XG5pbXBvcnQgeyBDYW52YXNTb3VyY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvdGV4dHVyZS9zb3VyY2VzL0NhbnZhc1NvdXJjZS5tanMnO1xuaW1wb3J0IHsgQ0xFQVIgfSBmcm9tICcuLi9jb25zdC5tanMnO1xuaW1wb3J0IHsgR2xSZW5kZXJUYXJnZXQgfSBmcm9tICcuLi9HbFJlbmRlclRhcmdldC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsUmVuZGVyVGFyZ2V0QWRhcHRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2NsZWFyQ29sb3JDYWNoZSA9IFswLCAwLCAwLCAwXTtcbiAgICB0aGlzLl92aWV3UG9ydENhY2hlID0gbmV3IFJlY3RhbmdsZSgpO1xuICB9XG4gIGluaXQocmVuZGVyZXIsIHJlbmRlclRhcmdldFN5c3RlbSkge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtID0gcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIHJlbmRlcmVyLnJ1bm5lcnMuY29udGV4dENoYW5nZS5hZGQodGhpcyk7XG4gIH1cbiAgY29udGV4dENoYW5nZSgpIHtcbiAgICB0aGlzLl9jbGVhckNvbG9yQ2FjaGUgPSBbMCwgMCwgMCwgMF07XG4gICAgdGhpcy5fdmlld1BvcnRDYWNoZSA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgfVxuICBjb3B5VG9UZXh0dXJlKHNvdXJjZVJlbmRlclN1cmZhY2VUZXh0dXJlLCBkZXN0aW5hdGlvblRleHR1cmUsIG9yaWdpblNyYywgc2l6ZSwgb3JpZ2luRGVzdCkge1xuICAgIGNvbnN0IHJlbmRlclRhcmdldFN5c3RlbSA9IHRoaXMuX3JlbmRlclRhcmdldFN5c3RlbTtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGNvbnN0IGdsUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0U3lzdGVtLmdldEdwdVJlbmRlclRhcmdldChzb3VyY2VSZW5kZXJTdXJmYWNlVGV4dHVyZSk7XG4gICAgY29uc3QgZ2wgPSByZW5kZXJlci5nbDtcbiAgICB0aGlzLmZpbmlzaFJlbmRlclBhc3Moc291cmNlUmVuZGVyU3VyZmFjZVRleHR1cmUpO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2xSZW5kZXJUYXJnZXQucmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyKTtcbiAgICByZW5kZXJlci50ZXh0dXJlLmJpbmQoZGVzdGluYXRpb25UZXh0dXJlLCAwKTtcbiAgICBnbC5jb3B5VGV4U3ViSW1hZ2UyRChcbiAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAwLFxuICAgICAgb3JpZ2luRGVzdC54LFxuICAgICAgb3JpZ2luRGVzdC55LFxuICAgICAgb3JpZ2luU3JjLngsXG4gICAgICBvcmlnaW5TcmMueSxcbiAgICAgIHNpemUud2lkdGgsXG4gICAgICBzaXplLmhlaWdodFxuICAgICk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uVGV4dHVyZTtcbiAgfVxuICBzdGFydFJlbmRlclBhc3MocmVuZGVyVGFyZ2V0LCBjbGVhciA9IHRydWUsIGNsZWFyQ29sb3IsIHZpZXdwb3J0KSB7XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0U3lzdGVtID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIGNvbnN0IHNvdXJjZSA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmU7XG4gICAgY29uc3QgZ3B1UmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0U3lzdGVtLmdldEdwdVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xuICAgIGxldCB2aWV3UG9ydFkgPSB2aWV3cG9ydC55O1xuICAgIGlmIChyZW5kZXJUYXJnZXQuaXNSb290KSB7XG4gICAgICB2aWV3UG9ydFkgPSBzb3VyY2UucGl4ZWxIZWlnaHQgLSB2aWV3cG9ydC5oZWlnaHQ7XG4gICAgfVxuICAgIHJlbmRlclRhcmdldC5jb2xvclRleHR1cmVzLmZvckVhY2goKHRleHR1cmUpID0+IHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnRleHR1cmUudW5iaW5kKHRleHR1cmUpO1xuICAgIH0pO1xuICAgIGNvbnN0IGdsID0gdGhpcy5fcmVuZGVyZXIuZ2w7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBncHVSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIpO1xuICAgIGNvbnN0IHZpZXdQb3J0Q2FjaGUgPSB0aGlzLl92aWV3UG9ydENhY2hlO1xuICAgIGlmICh2aWV3UG9ydENhY2hlLnggIT09IHZpZXdwb3J0LnggfHwgdmlld1BvcnRDYWNoZS55ICE9PSB2aWV3UG9ydFkgfHwgdmlld1BvcnRDYWNoZS53aWR0aCAhPT0gdmlld3BvcnQud2lkdGggfHwgdmlld1BvcnRDYWNoZS5oZWlnaHQgIT09IHZpZXdwb3J0LmhlaWdodCkge1xuICAgICAgdmlld1BvcnRDYWNoZS54ID0gdmlld3BvcnQueDtcbiAgICAgIHZpZXdQb3J0Q2FjaGUueSA9IHZpZXdQb3J0WTtcbiAgICAgIHZpZXdQb3J0Q2FjaGUud2lkdGggPSB2aWV3cG9ydC53aWR0aDtcbiAgICAgIHZpZXdQb3J0Q2FjaGUuaGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0O1xuICAgICAgZ2wudmlld3BvcnQoXG4gICAgICAgIHZpZXdwb3J0LngsXG4gICAgICAgIHZpZXdQb3J0WSxcbiAgICAgICAgdmlld3BvcnQud2lkdGgsXG4gICAgICAgIHZpZXdwb3J0LmhlaWdodFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFncHVSZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsUmVuZGVyQnVmZmVyICYmIChyZW5kZXJUYXJnZXQuc3RlbmNpbCB8fCByZW5kZXJUYXJnZXQuZGVwdGgpKSB7XG4gICAgICB0aGlzLl9pbml0U3RlbmNpbChncHVSZW5kZXJUYXJnZXQpO1xuICAgIH1cbiAgICB0aGlzLmNsZWFyKHJlbmRlclRhcmdldCwgY2xlYXIsIGNsZWFyQ29sb3IpO1xuICB9XG4gIGZpbmlzaFJlbmRlclBhc3MocmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0U3lzdGVtID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIGNvbnN0IGdsUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0U3lzdGVtLmdldEdwdVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xuICAgIGlmICghZ2xSZW5kZXJUYXJnZXQubXNhYSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2xSZW5kZXJUYXJnZXQucmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyKTtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuUkVBRF9GUkFNRUJVRkZFUiwgZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIpO1xuICAgIGdsLmJsaXRGcmFtZWJ1ZmZlcihcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgZ2xSZW5kZXJUYXJnZXQud2lkdGgsXG4gICAgICBnbFJlbmRlclRhcmdldC5oZWlnaHQsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIGdsUmVuZGVyVGFyZ2V0LndpZHRoLFxuICAgICAgZ2xSZW5kZXJUYXJnZXQuaGVpZ2h0LFxuICAgICAgZ2wuQ09MT1JfQlVGRkVSX0JJVCxcbiAgICAgIGdsLk5FQVJFU1RcbiAgICApO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIpO1xuICB9XG4gIGluaXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuICAgIGNvbnN0IGdsUmVuZGVyVGFyZ2V0ID0gbmV3IEdsUmVuZGVyVGFyZ2V0KCk7XG4gICAgY29uc3QgY29sb3JUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZTtcbiAgICBpZiAoQ2FudmFzU291cmNlLnRlc3QoY29sb3JUZXh0dXJlLnJlc291cmNlKSkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuY29udGV4dC5lbnN1cmVDYW52YXNTaXplKHJlbmRlclRhcmdldC5jb2xvclRleHR1cmUucmVzb3VyY2UpO1xuICAgICAgZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPSBudWxsO1xuICAgICAgcmV0dXJuIGdsUmVuZGVyVGFyZ2V0O1xuICAgIH1cbiAgICB0aGlzLl9pbml0Q29sb3IocmVuZGVyVGFyZ2V0LCBnbFJlbmRlclRhcmdldCk7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcbiAgICByZXR1cm4gZ2xSZW5kZXJUYXJnZXQ7XG4gIH1cbiAgZGVzdHJveUdwdVJlbmRlclRhcmdldChncHVSZW5kZXJUYXJnZXQpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGlmIChncHVSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIpIHtcbiAgICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKGdwdVJlbmRlclRhcmdldC5mcmFtZWJ1ZmZlcik7XG4gICAgICBncHVSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZ3B1UmVuZGVyVGFyZ2V0LnJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlcikge1xuICAgICAgZ2wuZGVsZXRlRnJhbWVidWZmZXIoZ3B1UmVuZGVyVGFyZ2V0LnJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlcik7XG4gICAgICBncHVSZW5kZXJUYXJnZXQucmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGdwdVJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIpIHtcbiAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihncHVSZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsUmVuZGVyQnVmZmVyKTtcbiAgICAgIGdwdVJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIgPSBudWxsO1xuICAgIH1cbiAgICBncHVSZW5kZXJUYXJnZXQubXNhYVJlbmRlckJ1ZmZlci5mb3JFYWNoKChyZW5kZXJCdWZmZXIpID0+IHtcbiAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihyZW5kZXJCdWZmZXIpO1xuICAgIH0pO1xuICAgIGdwdVJlbmRlclRhcmdldC5tc2FhUmVuZGVyQnVmZmVyID0gbnVsbDtcbiAgfVxuICBjbGVhcihfcmVuZGVyVGFyZ2V0LCBjbGVhciwgY2xlYXJDb2xvcikge1xuICAgIGlmICghY2xlYXIpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0U3lzdGVtID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIGlmICh0eXBlb2YgY2xlYXIgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBjbGVhciA9IGNsZWFyID8gQ0xFQVIuQUxMIDogQ0xFQVIuTk9ORTtcbiAgICB9XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBpZiAoY2xlYXIgJiBDTEVBUi5DT0xPUikge1xuICAgICAgY2xlYXJDb2xvciA/PyAoY2xlYXJDb2xvciA9IHJlbmRlclRhcmdldFN5c3RlbS5kZWZhdWx0Q2xlYXJDb2xvcik7XG4gICAgICBjb25zdCBjbGVhckNvbG9yQ2FjaGUgPSB0aGlzLl9jbGVhckNvbG9yQ2FjaGU7XG4gICAgICBjb25zdCBjbGVhckNvbG9yQXJyYXkgPSBjbGVhckNvbG9yO1xuICAgICAgaWYgKGNsZWFyQ29sb3JDYWNoZVswXSAhPT0gY2xlYXJDb2xvckFycmF5WzBdIHx8IGNsZWFyQ29sb3JDYWNoZVsxXSAhPT0gY2xlYXJDb2xvckFycmF5WzFdIHx8IGNsZWFyQ29sb3JDYWNoZVsyXSAhPT0gY2xlYXJDb2xvckFycmF5WzJdIHx8IGNsZWFyQ29sb3JDYWNoZVszXSAhPT0gY2xlYXJDb2xvckFycmF5WzNdKSB7XG4gICAgICAgIGNsZWFyQ29sb3JDYWNoZVswXSA9IGNsZWFyQ29sb3JBcnJheVswXTtcbiAgICAgICAgY2xlYXJDb2xvckNhY2hlWzFdID0gY2xlYXJDb2xvckFycmF5WzFdO1xuICAgICAgICBjbGVhckNvbG9yQ2FjaGVbMl0gPSBjbGVhckNvbG9yQXJyYXlbMl07XG4gICAgICAgIGNsZWFyQ29sb3JDYWNoZVszXSA9IGNsZWFyQ29sb3JBcnJheVszXTtcbiAgICAgICAgZ2wuY2xlYXJDb2xvcihjbGVhckNvbG9yQXJyYXlbMF0sIGNsZWFyQ29sb3JBcnJheVsxXSwgY2xlYXJDb2xvckFycmF5WzJdLCBjbGVhckNvbG9yQXJyYXlbM10pO1xuICAgICAgfVxuICAgIH1cbiAgICBnbC5jbGVhcihjbGVhcik7XG4gIH1cbiAgcmVzaXplR3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCkge1xuICAgIGlmIChyZW5kZXJUYXJnZXQuaXNSb290KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHJlbmRlclRhcmdldFN5c3RlbSA9IHRoaXMuX3JlbmRlclRhcmdldFN5c3RlbTtcbiAgICBjb25zdCBnbFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldFN5c3RlbS5nZXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcbiAgICB0aGlzLl9yZXNpemVDb2xvcihyZW5kZXJUYXJnZXQsIGdsUmVuZGVyVGFyZ2V0KTtcbiAgICBpZiAocmVuZGVyVGFyZ2V0LnN0ZW5jaWwgfHwgcmVuZGVyVGFyZ2V0LmRlcHRoKSB7XG4gICAgICB0aGlzLl9yZXNpemVTdGVuY2lsKGdsUmVuZGVyVGFyZ2V0KTtcbiAgICB9XG4gIH1cbiAgX2luaXRDb2xvcihyZW5kZXJUYXJnZXQsIGdsUmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuICAgIGNvbnN0IHJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG4gICAgZ2xSZW5kZXJUYXJnZXQucmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyID0gcmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgcmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyKTtcbiAgICBnbFJlbmRlclRhcmdldC53aWR0aCA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmUuc291cmNlLnBpeGVsV2lkdGg7XG4gICAgZ2xSZW5kZXJUYXJnZXQuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZS5zb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgoY29sb3JUZXh0dXJlLCBpKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBjb2xvclRleHR1cmUuc291cmNlO1xuICAgICAgaWYgKHNvdXJjZS5hbnRpYWxpYXMpIHtcbiAgICAgICAgaWYgKHJlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMubXNhYSkge1xuICAgICAgICAgIGdsUmVuZGVyVGFyZ2V0Lm1zYWEgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oXCJbUmVuZGVyVGV4dHVyZV0gQW50aWFsaWFzaW5nIG9uIHRleHR1cmVzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gV2ViR0wxXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmRTb3VyY2Uoc291cmNlLCAwKTtcbiAgICAgIGNvbnN0IGdsU291cmNlID0gcmVuZGVyZXIudGV4dHVyZS5nZXRHbFNvdXJjZShzb3VyY2UpO1xuICAgICAgY29uc3QgZ2xUZXh0dXJlID0gZ2xTb3VyY2UudGV4dHVyZTtcbiAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxuICAgICAgICBnbC5GUkFNRUJVRkZFUixcbiAgICAgICAgZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLFxuICAgICAgICAzNTUzLFxuICAgICAgICAvLyB0ZXh0dXJlLnRhcmdldCxcbiAgICAgICAgZ2xUZXh0dXJlLFxuICAgICAgICAwXG4gICAgICApO1xuICAgIH0pO1xuICAgIGlmIChnbFJlbmRlclRhcmdldC5tc2FhKSB7XG4gICAgICBjb25zdCB2aWV3RnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgICAgZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPSB2aWV3RnJhbWVidWZmZXI7XG4gICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHZpZXdGcmFtZWJ1ZmZlcik7XG4gICAgICByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlcy5mb3JFYWNoKChfLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IG1zYWFSZW5kZXJCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcbiAgICAgICAgZ2xSZW5kZXJUYXJnZXQubXNhYVJlbmRlckJ1ZmZlcltpXSA9IG1zYWFSZW5kZXJCdWZmZXI7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPSByZXNvbHZlVGFyZ2V0RnJhbWVidWZmZXI7XG4gICAgfVxuICAgIHRoaXMuX3Jlc2l6ZUNvbG9yKHJlbmRlclRhcmdldCwgZ2xSZW5kZXJUYXJnZXQpO1xuICB9XG4gIF9yZXNpemVDb2xvcihyZW5kZXJUYXJnZXQsIGdsUmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3Qgc291cmNlID0gcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZS5zb3VyY2U7XG4gICAgZ2xSZW5kZXJUYXJnZXQud2lkdGggPSBzb3VyY2UucGl4ZWxXaWR0aDtcbiAgICBnbFJlbmRlclRhcmdldC5oZWlnaHQgPSBzb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgoY29sb3JUZXh0dXJlLCBpKSA9PiB7XG4gICAgICBpZiAoaSA9PT0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29sb3JUZXh0dXJlLnNvdXJjZS5yZXNpemUoc291cmNlLndpZHRoLCBzb3VyY2UuaGVpZ2h0LCBzb3VyY2UuX3Jlc29sdXRpb24pO1xuICAgIH0pO1xuICAgIGlmIChnbFJlbmRlclRhcmdldC5tc2FhKSB7XG4gICAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgICAgY29uc3QgZ2wgPSByZW5kZXJlci5nbDtcbiAgICAgIGNvbnN0IHZpZXdGcmFtZWJ1ZmZlciA9IGdsUmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyO1xuICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB2aWV3RnJhbWVidWZmZXIpO1xuICAgICAgcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgoY29sb3JUZXh0dXJlLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHNvdXJjZTIgPSBjb2xvclRleHR1cmUuc291cmNlO1xuICAgICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmRTb3VyY2Uoc291cmNlMiwgMCk7XG4gICAgICAgIGNvbnN0IGdsU291cmNlID0gcmVuZGVyZXIudGV4dHVyZS5nZXRHbFNvdXJjZShzb3VyY2UyKTtcbiAgICAgICAgY29uc3QgZ2xJbnRlcm5hbEZvcm1hdCA9IGdsU291cmNlLmludGVybmFsRm9ybWF0O1xuICAgICAgICBjb25zdCBtc2FhUmVuZGVyQnVmZmVyID0gZ2xSZW5kZXJUYXJnZXQubXNhYVJlbmRlckJ1ZmZlcltpXTtcbiAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihcbiAgICAgICAgICBnbC5SRU5ERVJCVUZGRVIsXG4gICAgICAgICAgbXNhYVJlbmRlckJ1ZmZlclxuICAgICAgICApO1xuICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoXG4gICAgICAgICAgZ2wuUkVOREVSQlVGRkVSLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgZ2xJbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICBzb3VyY2UyLnBpeGVsV2lkdGgsXG4gICAgICAgICAgc291cmNlMi5waXhlbEhlaWdodFxuICAgICAgICApO1xuICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihcbiAgICAgICAgICBnbC5GUkFNRUJVRkZFUixcbiAgICAgICAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksXG4gICAgICAgICAgZ2wuUkVOREVSQlVGRkVSLFxuICAgICAgICAgIG1zYWFSZW5kZXJCdWZmZXJcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBfaW5pdFN0ZW5jaWwoZ2xSZW5kZXJUYXJnZXQpIHtcbiAgICBpZiAoZ2xSZW5kZXJUYXJnZXQuZnJhbWVidWZmZXIgPT09IG51bGwpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBjb25zdCBkZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcbiAgICBnbFJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIgPSBkZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXI7XG4gICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihcbiAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgIGRlcHRoU3RlbmNpbFJlbmRlckJ1ZmZlclxuICAgICk7XG4gICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoXG4gICAgICBnbC5GUkFNRUJVRkZFUixcbiAgICAgIGdsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCxcbiAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgIGRlcHRoU3RlbmNpbFJlbmRlckJ1ZmZlclxuICAgICk7XG4gICAgdGhpcy5fcmVzaXplU3RlbmNpbChnbFJlbmRlclRhcmdldCk7XG4gIH1cbiAgX3Jlc2l6ZVN0ZW5jaWwoZ2xSZW5kZXJUYXJnZXQpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoXG4gICAgICBnbC5SRU5ERVJCVUZGRVIsXG4gICAgICBnbFJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXJcbiAgICApO1xuICAgIGlmIChnbFJlbmRlclRhcmdldC5tc2FhKSB7XG4gICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoXG4gICAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgICAgNCxcbiAgICAgICAgZ2wuREVQVEgyNF9TVEVOQ0lMOCxcbiAgICAgICAgZ2xSZW5kZXJUYXJnZXQud2lkdGgsXG4gICAgICAgIGdsUmVuZGVyVGFyZ2V0LmhlaWdodFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShcbiAgICAgICAgZ2wuUkVOREVSQlVGRkVSLFxuICAgICAgICB0aGlzLl9yZW5kZXJlci5jb250ZXh0LndlYkdMVmVyc2lvbiA9PT0gMiA/IGdsLkRFUFRIMjRfU1RFTkNJTDggOiBnbC5ERVBUSF9TVEVOQ0lMLFxuICAgICAgICBnbFJlbmRlclRhcmdldC53aWR0aCxcbiAgICAgICAgZ2xSZW5kZXJUYXJnZXQuaGVpZ2h0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICBwb3N0cmVuZGVyKHJlbmRlclRhcmdldCkge1xuICAgIGlmICghdGhpcy5fcmVuZGVyZXIuY29udGV4dC5tdWx0aVZpZXcpXG4gICAgICByZXR1cm47XG4gICAgaWYgKENhbnZhc1NvdXJjZS50ZXN0KHJlbmRlclRhcmdldC5jb2xvclRleHR1cmUucmVzb3VyY2UpKSB7XG4gICAgICBjb25zdCBjb250ZXh0Q2FudmFzID0gdGhpcy5fcmVuZGVyZXIuY29udGV4dC5jYW52YXM7XG4gICAgICBjb25zdCBjYW52YXNTb3VyY2UgPSByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlO1xuICAgICAgY2FudmFzU291cmNlLmNvbnRleHQyRC5kcmF3SW1hZ2UoXG4gICAgICAgIGNvbnRleHRDYW52YXMsXG4gICAgICAgIDAsXG4gICAgICAgIGNhbnZhc1NvdXJjZS5waXhlbEhlaWdodCAtIGNvbnRleHRDYW52YXMuaGVpZ2h0XG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBHbFJlbmRlclRhcmdldEFkYXB0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsUmVuZGVyVGFyZ2V0QWRhcHRvci5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBSZW5kZXJUYXJnZXRTeXN0ZW0gfSBmcm9tICcuLi8uLi9zaGFyZWQvcmVuZGVyVGFyZ2V0L1JlbmRlclRhcmdldFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xSZW5kZXJUYXJnZXRBZGFwdG9yIH0gZnJvbSAnLi9HbFJlbmRlclRhcmdldEFkYXB0b3IubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbFJlbmRlclRhcmdldFN5c3RlbSBleHRlbmRzIFJlbmRlclRhcmdldFN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgc3VwZXIocmVuZGVyZXIpO1xuICAgIHRoaXMuYWRhcHRvciA9IG5ldyBHbFJlbmRlclRhcmdldEFkYXB0b3IoKTtcbiAgICB0aGlzLmFkYXB0b3IuaW5pdChyZW5kZXJlciwgdGhpcyk7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbFJlbmRlclRhcmdldFN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXSxcbiAgbmFtZTogXCJyZW5kZXJUYXJnZXRcIlxufTtcblxuZXhwb3J0IHsgR2xSZW5kZXJUYXJnZXRTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsUmVuZGVyVGFyZ2V0U3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgSUdMVW5pZm9ybURhdGEge1xufVxuY2xhc3MgR2xQcm9ncmFtRGF0YSB7XG4gIC8qKlxuICAgKiBNYWtlcyBhIG5ldyBQaXhpIHByb2dyYW0uXG4gICAqIEBwYXJhbSBwcm9ncmFtIC0gd2ViZ2wgcHJvZ3JhbVxuICAgKiBAcGFyYW0gdW5pZm9ybURhdGEgLSB1bmlmb3Jtc1xuICAgKi9cbiAgY29uc3RydWN0b3IocHJvZ3JhbSwgdW5pZm9ybURhdGEpIHtcbiAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgIHRoaXMudW5pZm9ybURhdGEgPSB1bmlmb3JtRGF0YTtcbiAgICB0aGlzLnVuaWZvcm1Hcm91cHMgPSB7fTtcbiAgICB0aGlzLnVuaWZvcm1EaXJ0eUdyb3VwcyA9IHt9O1xuICAgIHRoaXMudW5pZm9ybUJsb2NrQmluZGluZ3MgPSB7fTtcbiAgfVxuICAvKiogRGVzdHJveXMgdGhpcyBwcm9ncmFtLiAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMudW5pZm9ybURhdGEgPSBudWxsO1xuICAgIHRoaXMudW5pZm9ybUdyb3VwcyA9IG51bGw7XG4gICAgdGhpcy51bmlmb3JtRGlydHlHcm91cHMgPSBudWxsO1xuICAgIHRoaXMudW5pZm9ybUJsb2NrQmluZGluZ3MgPSBudWxsO1xuICAgIHRoaXMucHJvZ3JhbSA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgR2xQcm9ncmFtRGF0YSwgSUdMVW5pZm9ybURhdGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsUHJvZ3JhbURhdGEubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBjb21waWxlU2hhZGVyKGdsLCB0eXBlLCBzcmMpIHtcbiAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xuICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzcmMpO1xuICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG4gIHJldHVybiBzaGFkZXI7XG59XG5cbmV4cG9ydCB7IGNvbXBpbGVTaGFkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBpbGVTaGFkZXIubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBib29sZWFuQXJyYXkoc2l6ZSkge1xuICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShzaXplKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGFycmF5W2ldID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gZGVmYXVsdFZhbHVlKHR5cGUsIHNpemUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImZsb2F0XCI6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlIFwidmVjMlwiOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMiAqIHNpemUpO1xuICAgIGNhc2UgXCJ2ZWMzXCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgzICogc2l6ZSk7XG4gICAgY2FzZSBcInZlYzRcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDQgKiBzaXplKTtcbiAgICBjYXNlIFwiaW50XCI6XG4gICAgY2FzZSBcInVpbnRcIjpcbiAgICBjYXNlIFwic2FtcGxlcjJEXCI6XG4gICAgY2FzZSBcInNhbXBsZXIyREFycmF5XCI6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlIFwiaXZlYzJcIjpcbiAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheSgyICogc2l6ZSk7XG4gICAgY2FzZSBcIml2ZWMzXCI6XG4gICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkoMyAqIHNpemUpO1xuICAgIGNhc2UgXCJpdmVjNFwiOlxuICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDQgKiBzaXplKTtcbiAgICBjYXNlIFwidXZlYzJcIjpcbiAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkoMiAqIHNpemUpO1xuICAgIGNhc2UgXCJ1dmVjM1wiOlxuICAgICAgcmV0dXJuIG5ldyBVaW50MzJBcnJheSgzICogc2l6ZSk7XG4gICAgY2FzZSBcInV2ZWM0XCI6XG4gICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KDQgKiBzaXplKTtcbiAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJidmVjMlwiOlxuICAgICAgcmV0dXJuIGJvb2xlYW5BcnJheSgyICogc2l6ZSk7XG4gICAgY2FzZSBcImJ2ZWMzXCI6XG4gICAgICByZXR1cm4gYm9vbGVhbkFycmF5KDMgKiBzaXplKTtcbiAgICBjYXNlIFwiYnZlYzRcIjpcbiAgICAgIHJldHVybiBib29sZWFuQXJyYXkoNCAqIHNpemUpO1xuICAgIGNhc2UgXCJtYXQyXCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDFcbiAgICAgIF0pO1xuICAgIGNhc2UgXCJtYXQzXCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDFcbiAgICAgIF0pO1xuICAgIGNhc2UgXCJtYXQ0XCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDFcbiAgICAgIF0pO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBkZWZhdWx0VmFsdWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRWYWx1ZS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmxldCBHTF9UQUJMRSA9IG51bGw7XG5jb25zdCBHTF9UT19HTFNMX1RZUEVTID0ge1xuICBGTE9BVDogXCJmbG9hdFwiLFxuICBGTE9BVF9WRUMyOiBcInZlYzJcIixcbiAgRkxPQVRfVkVDMzogXCJ2ZWMzXCIsXG4gIEZMT0FUX1ZFQzQ6IFwidmVjNFwiLFxuICBJTlQ6IFwiaW50XCIsXG4gIElOVF9WRUMyOiBcIml2ZWMyXCIsXG4gIElOVF9WRUMzOiBcIml2ZWMzXCIsXG4gIElOVF9WRUM0OiBcIml2ZWM0XCIsXG4gIFVOU0lHTkVEX0lOVDogXCJ1aW50XCIsXG4gIFVOU0lHTkVEX0lOVF9WRUMyOiBcInV2ZWMyXCIsXG4gIFVOU0lHTkVEX0lOVF9WRUMzOiBcInV2ZWMzXCIsXG4gIFVOU0lHTkVEX0lOVF9WRUM0OiBcInV2ZWM0XCIsXG4gIEJPT0w6IFwiYm9vbFwiLFxuICBCT09MX1ZFQzI6IFwiYnZlYzJcIixcbiAgQk9PTF9WRUMzOiBcImJ2ZWMzXCIsXG4gIEJPT0xfVkVDNDogXCJidmVjNFwiLFxuICBGTE9BVF9NQVQyOiBcIm1hdDJcIixcbiAgRkxPQVRfTUFUMzogXCJtYXQzXCIsXG4gIEZMT0FUX01BVDQ6IFwibWF0NFwiLFxuICBTQU1QTEVSXzJEOiBcInNhbXBsZXIyRFwiLFxuICBJTlRfU0FNUExFUl8yRDogXCJzYW1wbGVyMkRcIixcbiAgVU5TSUdORURfSU5UX1NBTVBMRVJfMkQ6IFwic2FtcGxlcjJEXCIsXG4gIFNBTVBMRVJfQ1VCRTogXCJzYW1wbGVyQ3ViZVwiLFxuICBJTlRfU0FNUExFUl9DVUJFOiBcInNhbXBsZXJDdWJlXCIsXG4gIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkU6IFwic2FtcGxlckN1YmVcIixcbiAgU0FNUExFUl8yRF9BUlJBWTogXCJzYW1wbGVyMkRBcnJheVwiLFxuICBJTlRfU0FNUExFUl8yRF9BUlJBWTogXCJzYW1wbGVyMkRBcnJheVwiLFxuICBVTlNJR05FRF9JTlRfU0FNUExFUl8yRF9BUlJBWTogXCJzYW1wbGVyMkRBcnJheVwiXG59O1xuY29uc3QgR0xTTF9UT19WRVJURVhfVFlQRVMgPSB7XG4gIGZsb2F0OiBcImZsb2F0MzJcIixcbiAgdmVjMjogXCJmbG9hdDMyeDJcIixcbiAgdmVjMzogXCJmbG9hdDMyeDNcIixcbiAgdmVjNDogXCJmbG9hdDMyeDRcIixcbiAgaW50OiBcInNpbnQzMlwiLFxuICBpdmVjMjogXCJzaW50MzJ4MlwiLFxuICBpdmVjMzogXCJzaW50MzJ4M1wiLFxuICBpdmVjNDogXCJzaW50MzJ4NFwiLFxuICB1aW50OiBcInVpbnQzMlwiLFxuICB1dmVjMjogXCJ1aW50MzJ4MlwiLFxuICB1dmVjMzogXCJ1aW50MzJ4M1wiLFxuICB1dmVjNDogXCJ1aW50MzJ4NFwiLFxuICBib29sOiBcInVpbnQzMlwiLFxuICBidmVjMjogXCJ1aW50MzJ4MlwiLFxuICBidmVjMzogXCJ1aW50MzJ4M1wiLFxuICBidmVjNDogXCJ1aW50MzJ4NFwiXG59O1xuZnVuY3Rpb24gbWFwVHlwZShnbCwgdHlwZSkge1xuICBpZiAoIUdMX1RBQkxFKSB7XG4gICAgY29uc3QgdHlwZU5hbWVzID0gT2JqZWN0LmtleXMoR0xfVE9fR0xTTF9UWVBFUyk7XG4gICAgR0xfVEFCTEUgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVOYW1lcy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgdG4gPSB0eXBlTmFtZXNbaV07XG4gICAgICBHTF9UQUJMRVtnbFt0bl1dID0gR0xfVE9fR0xTTF9UWVBFU1t0bl07XG4gICAgfVxuICB9XG4gIHJldHVybiBHTF9UQUJMRVt0eXBlXTtcbn1cbmZ1bmN0aW9uIG1hcEdsVG9WZXJ0ZXhGb3JtYXQoZ2wsIHR5cGUpIHtcbiAgY29uc3QgdHlwZVZhbHVlID0gbWFwVHlwZShnbCwgdHlwZSk7XG4gIHJldHVybiBHTFNMX1RPX1ZFUlRFWF9UWVBFU1t0eXBlVmFsdWVdIHx8IFwiZmxvYXQzMlwiO1xufVxuXG5leHBvcnQgeyBtYXBHbFRvVmVydGV4Rm9ybWF0LCBtYXBUeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBUeXBlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbG9nUHJldHR5U2hhZGVyRXJyb3IoZ2wsIHNoYWRlcikge1xuICBjb25zdCBzaGFkZXJTcmMgPSBnbC5nZXRTaGFkZXJTb3VyY2Uoc2hhZGVyKS5zcGxpdChcIlxcblwiKS5tYXAoKGxpbmUsIGluZGV4KSA9PiBgJHtpbmRleH06ICR7bGluZX1gKTtcbiAgY29uc3Qgc2hhZGVyTG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xuICBjb25zdCBzcGxpdFNoYWRlciA9IHNoYWRlckxvZy5zcGxpdChcIlxcblwiKTtcbiAgY29uc3QgZGVkdXBlID0ge307XG4gIGNvbnN0IGxpbmVOdW1iZXJzID0gc3BsaXRTaGFkZXIubWFwKChsaW5lKSA9PiBwYXJzZUZsb2F0KGxpbmUucmVwbGFjZSgvXkVSUk9SXFw6IDBcXDooW1xcZF0rKVxcOi4qJC8sIFwiJDFcIikpKS5maWx0ZXIoKG4pID0+IHtcbiAgICBpZiAobiAmJiAhZGVkdXBlW25dKSB7XG4gICAgICBkZWR1cGVbbl0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gIGNvbnN0IGxvZ0FyZ3MgPSBbXCJcIl07XG4gIGxpbmVOdW1iZXJzLmZvckVhY2goKG51bWJlcikgPT4ge1xuICAgIHNoYWRlclNyY1tudW1iZXIgLSAxXSA9IGAlYyR7c2hhZGVyU3JjW251bWJlciAtIDFdfSVjYDtcbiAgICBsb2dBcmdzLnB1c2goXCJiYWNrZ3JvdW5kOiAjRkYwMDAwOyBjb2xvcjojRkZGRkZGOyBmb250LXNpemU6IDEwcHhcIiwgXCJmb250LXNpemU6IDEwcHhcIik7XG4gIH0pO1xuICBjb25zdCBmcmFnbWVudFNvdXJjZVRvTG9nID0gc2hhZGVyU3JjLmpvaW4oXCJcXG5cIik7XG4gIGxvZ0FyZ3NbMF0gPSBmcmFnbWVudFNvdXJjZVRvTG9nO1xuICBjb25zb2xlLmVycm9yKHNoYWRlckxvZyk7XG4gIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXCJjbGljayB0byB2aWV3IGZ1bGwgc2hhZGVyIGNvZGVcIik7XG4gIGNvbnNvbGUud2FybiguLi5sb2dBcmdzKTtcbiAgY29uc29sZS5ncm91cEVuZCgpO1xufVxuZnVuY3Rpb24gbG9nUHJvZ3JhbUVycm9yKGdsLCBwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyKSB7XG4gIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcih2ZXJ0ZXhTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgbG9nUHJldHR5U2hhZGVyRXJyb3IoZ2wsIHZlcnRleFNoYWRlcik7XG4gICAgfVxuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKGZyYWdtZW50U2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgIGxvZ1ByZXR0eVNoYWRlckVycm9yKGdsLCBmcmFnbWVudFNoYWRlcik7XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoXCJQaXhpSlMgRXJyb3I6IENvdWxkIG5vdCBpbml0aWFsaXplIHNoYWRlci5cIik7XG4gICAgaWYgKGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pICE9PSBcIlwiKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJQaXhpSlMgV2FybmluZzogZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coKVwiLCBnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IGxvZ1Byb2dyYW1FcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nUHJvZ3JhbUVycm9yLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IGdldE1heFRleHR1cmVzUGVyQmF0Y2ggfSBmcm9tICcuLi8uLi8uLi9iYXRjaGVyL2dsL3V0aWxzL21heFJlY29tbWVuZGVkVGV4dHVyZXMubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlU2hhZGVyU3luY0NvZGUgfSBmcm9tICcuL0dlbmVyYXRlU2hhZGVyU3luY0NvZGUubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlUHJvZ3JhbSB9IGZyb20gJy4vcHJvZ3JhbS9nZW5lcmF0ZVByb2dyYW0ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBkZWZhdWx0U3luY0RhdGEgPSB7XG4gIHRleHR1cmVDb3VudDogMCxcbiAgYmxvY2tJbmRleDogMFxufTtcbmNsYXNzIEdsU2hhZGVyU3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2FjdGl2ZVByb2dyYW0gPSBudWxsO1xuICAgIHRoaXMuX3Byb2dyYW1EYXRhSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX25leHRJbmRleCA9IDA7XG4gICAgdGhpcy5fYm91bmRVbmlmb3Jtc0lkc1RvSW5kZXhIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fYm91bmRJbmRleFRvVW5pZm9ybXNIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fc2hhZGVyU3luY0Z1bmN0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgY29udGV4dENoYW5nZShnbCkge1xuICAgIHRoaXMuX2dsID0gZ2w7XG4gICAgdGhpcy5fbWF4QmluZGluZ3MgPSBnbC5NQVhfVU5JRk9STV9CVUZGRVJfQklORElOR1MgPyBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTKSA6IDA7XG4gICAgdGhpcy5fcHJvZ3JhbURhdGFIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fYm91bmRVbmlmb3Jtc0lkc1RvSW5kZXhIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fYm91bmRJbmRleFRvVW5pZm9ybXNIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fc2hhZGVyU3luY0Z1bmN0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2FjdGl2ZVByb2dyYW0gPSBudWxsO1xuICAgIHRoaXMubWF4VGV4dHVyZXMgPSBnZXRNYXhUZXh0dXJlc1BlckJhdGNoKCk7XG4gIH1cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIGN1cnJlbnQgc2hhZGVyIHRvIHRoZSBvbmUgZ2l2ZW4gaW4gcGFyYW1ldGVyLlxuICAgKiBAcGFyYW0gc2hhZGVyIC0gdGhlIG5ldyBzaGFkZXJcbiAgICogQHBhcmFtIHNraXBTeW5jIC0gZmFsc2UgaWYgdGhlIHNoYWRlciBzaG91bGQgYXV0b21hdGljYWxseSBzeW5jIGl0cyB1bmlmb3Jtcy5cbiAgICogQHJldHVybnMgdGhlIGdsUHJvZ3JhbSB0aGF0IGJlbG9uZ3MgdG8gdGhlIHNoYWRlci5cbiAgICovXG4gIGJpbmQoc2hhZGVyLCBza2lwU3luYykge1xuICAgIHRoaXMuX3NldFByb2dyYW0oc2hhZGVyLmdsUHJvZ3JhbSk7XG4gICAgaWYgKHNraXBTeW5jKVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHRTeW5jRGF0YS50ZXh0dXJlQ291bnQgPSAwO1xuICAgIGRlZmF1bHRTeW5jRGF0YS5ibG9ja0luZGV4ID0gMDtcbiAgICBsZXQgc3luY0Z1bmN0aW9uID0gdGhpcy5fc2hhZGVyU3luY0Z1bmN0aW9uc1tzaGFkZXIuZ2xQcm9ncmFtLl9rZXldO1xuICAgIGlmICghc3luY0Z1bmN0aW9uKSB7XG4gICAgICBzeW5jRnVuY3Rpb24gPSB0aGlzLl9zaGFkZXJTeW5jRnVuY3Rpb25zW3NoYWRlci5nbFByb2dyYW0uX2tleV0gPSB0aGlzLl9nZW5lcmF0ZVNoYWRlclN5bmMoc2hhZGVyLCB0aGlzKTtcbiAgICB9XG4gICAgc3luY0Z1bmN0aW9uKHRoaXMuX3JlbmRlcmVyLCBzaGFkZXIsIGRlZmF1bHRTeW5jRGF0YSk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHVuaWZvcm0gZ3JvdXAuXG4gICAqIEBwYXJhbSB1bmlmb3JtR3JvdXAgLSB0aGUgdW5pZm9ybSBncm91cCB0byB1cGRhdGVcbiAgICovXG4gIHVwZGF0ZVVuaWZvcm1Hcm91cCh1bmlmb3JtR3JvdXApIHtcbiAgICB0aGlzLl9yZW5kZXJlci51bmlmb3JtR3JvdXAudXBkYXRlVW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCwgdGhpcy5fYWN0aXZlUHJvZ3JhbSwgZGVmYXVsdFN5bmNEYXRhKTtcbiAgfVxuICAvKipcbiAgICogQmluZHMgYSB1bmlmb3JtIGJsb2NrIHRvIHRoZSBzaGFkZXIuXG4gICAqIEBwYXJhbSB1bmlmb3JtR3JvdXAgLSB0aGUgdW5pZm9ybSBncm91cCB0byBiaW5kXG4gICAqIEBwYXJhbSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHVuaWZvcm0gYmxvY2tcbiAgICogQHBhcmFtIGluZGV4IC0gdGhlIGluZGV4IG9mIHRoZSB1bmlmb3JtIGJsb2NrXG4gICAqL1xuICBiaW5kVW5pZm9ybUJsb2NrKHVuaWZvcm1Hcm91cCwgbmFtZSwgaW5kZXggPSAwKSB7XG4gICAgY29uc3QgYnVmZmVyU3lzdGVtID0gdGhpcy5fcmVuZGVyZXIuYnVmZmVyO1xuICAgIGNvbnN0IHByb2dyYW1EYXRhID0gdGhpcy5fZ2V0UHJvZ3JhbURhdGEodGhpcy5fYWN0aXZlUHJvZ3JhbSk7XG4gICAgY29uc3QgaXNCdWZmZXJSZXNvdXJjZSA9IHVuaWZvcm1Hcm91cC5fYnVmZmVyUmVzb3VyY2U7XG4gICAgaWYgKGlzQnVmZmVyUmVzb3VyY2UpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnViby51cGRhdGVVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwKTtcbiAgICB9XG4gICAgYnVmZmVyU3lzdGVtLnVwZGF0ZUJ1ZmZlcih1bmlmb3JtR3JvdXAuYnVmZmVyKTtcbiAgICBsZXQgYm91bmRJbmRleCA9IHRoaXMuX2JvdW5kVW5pZm9ybXNJZHNUb0luZGV4SGFzaFt1bmlmb3JtR3JvdXAudWlkXTtcbiAgICBpZiAoYm91bmRJbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCBuZXh0SW5kZXggPSB0aGlzLl9uZXh0SW5kZXgrKyAlIHRoaXMuX21heEJpbmRpbmdzO1xuICAgICAgY29uc3QgY3VycmVudEJvdW5kVW5pZm9ybUdyb3VwID0gdGhpcy5fYm91bmRJbmRleFRvVW5pZm9ybXNIYXNoW25leHRJbmRleF07XG4gICAgICBpZiAoY3VycmVudEJvdW5kVW5pZm9ybUdyb3VwKSB7XG4gICAgICAgIHRoaXMuX2JvdW5kVW5pZm9ybXNJZHNUb0luZGV4SGFzaFtjdXJyZW50Qm91bmRVbmlmb3JtR3JvdXAudWlkXSA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGJvdW5kSW5kZXggPSB0aGlzLl9ib3VuZFVuaWZvcm1zSWRzVG9JbmRleEhhc2hbdW5pZm9ybUdyb3VwLnVpZF0gPSBuZXh0SW5kZXg7XG4gICAgICB0aGlzLl9ib3VuZEluZGV4VG9Vbmlmb3Jtc0hhc2hbbmV4dEluZGV4XSA9IHVuaWZvcm1Hcm91cDtcbiAgICAgIGlmIChpc0J1ZmZlclJlc291cmNlKSB7XG4gICAgICAgIGJ1ZmZlclN5c3RlbS5iaW5kQnVmZmVyUmFuZ2UodW5pZm9ybUdyb3VwLmJ1ZmZlciwgbmV4dEluZGV4LCB1bmlmb3JtR3JvdXAub2Zmc2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZmZlclN5c3RlbS5iaW5kQnVmZmVyQmFzZSh1bmlmb3JtR3JvdXAuYnVmZmVyLCBuZXh0SW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IHVuaWZvcm1CbG9ja0luZGV4ID0gdGhpcy5fYWN0aXZlUHJvZ3JhbS5fdW5pZm9ybUJsb2NrRGF0YVtuYW1lXS5pbmRleDtcbiAgICBpZiAocHJvZ3JhbURhdGEudW5pZm9ybUJsb2NrQmluZGluZ3NbaW5kZXhdID09PSBib3VuZEluZGV4KVxuICAgICAgcmV0dXJuO1xuICAgIHByb2dyYW1EYXRhLnVuaWZvcm1CbG9ja0JpbmRpbmdzW2luZGV4XSA9IGJvdW5kSW5kZXg7XG4gICAgZ2wudW5pZm9ybUJsb2NrQmluZGluZyhwcm9ncmFtRGF0YS5wcm9ncmFtLCB1bmlmb3JtQmxvY2tJbmRleCwgYm91bmRJbmRleCk7XG4gIH1cbiAgX3NldFByb2dyYW0ocHJvZ3JhbSkge1xuICAgIGlmICh0aGlzLl9hY3RpdmVQcm9ncmFtID09PSBwcm9ncmFtKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2FjdGl2ZVByb2dyYW0gPSBwcm9ncmFtO1xuICAgIGNvbnN0IHByb2dyYW1EYXRhID0gdGhpcy5fZ2V0UHJvZ3JhbURhdGEocHJvZ3JhbSk7XG4gICAgdGhpcy5fZ2wudXNlUHJvZ3JhbShwcm9ncmFtRGF0YS5wcm9ncmFtKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHByb2dyYW0gLSB0aGUgcHJvZ3JhbSB0byBnZXQgdGhlIGRhdGEgZm9yXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFByb2dyYW1EYXRhKHByb2dyYW0pIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvZ3JhbURhdGFIYXNoW3Byb2dyYW0uX2tleV0gfHwgdGhpcy5fY3JlYXRlUHJvZ3JhbURhdGEocHJvZ3JhbSk7XG4gIH1cbiAgX2NyZWF0ZVByb2dyYW1EYXRhKHByb2dyYW0pIHtcbiAgICBjb25zdCBrZXkgPSBwcm9ncmFtLl9rZXk7XG4gICAgdGhpcy5fcHJvZ3JhbURhdGFIYXNoW2tleV0gPSBnZW5lcmF0ZVByb2dyYW0odGhpcy5fZ2wsIHByb2dyYW0pO1xuICAgIHJldHVybiB0aGlzLl9wcm9ncmFtRGF0YUhhc2hba2V5XTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuX3Byb2dyYW1EYXRhSGFzaCkpIHtcbiAgICAgIGNvbnN0IHByb2dyYW1EYXRhID0gdGhpcy5fcHJvZ3JhbURhdGFIYXNoW2tleV07XG4gICAgICBwcm9ncmFtRGF0YS5kZXN0cm95KCk7XG4gICAgICB0aGlzLl9wcm9ncmFtRGF0YUhhc2hba2V5XSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuX3Byb2dyYW1EYXRhSGFzaCA9IG51bGw7XG4gICAgdGhpcy5fYm91bmRVbmlmb3Jtc0lkc1RvSW5kZXhIYXNoID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGV4ZWN1dGVkIHRoYXQgd2lsbCBzeW5jIHRoZSBzaGFkZXIgYXMgZWZmaWNpZW50bHkgYXMgcG9zc2libGUuXG4gICAqIE92ZXJyaWRkZW4gYnkgdGhlIHVuc2FmZSBldmFsIHBhY2thZ2UgaWYgeW91IGRvbid0IHdhbnQgZXZhbCB1c2VkIGluIHlvdXIgcHJvamVjdC5cbiAgICogQHBhcmFtIHNoYWRlciAtIHRoZSBzaGFkZXIgdG8gZ2VuZXJhdGUgdGhlIHN5bmMgZnVuY3Rpb24gZm9yXG4gICAqIEBwYXJhbSBzaGFkZXJTeXN0ZW0gLSB0aGUgc2hhZGVyIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybnMgLSB0aGUgZ2VuZXJhdGVkIHN5bmMgZnVuY3Rpb25cbiAgICogQGlnbm9yZVxuICAgKi9cbiAgX2dlbmVyYXRlU2hhZGVyU3luYyhzaGFkZXIsIHNoYWRlclN5c3RlbSkge1xuICAgIHJldHVybiBnZW5lcmF0ZVNoYWRlclN5bmNDb2RlKHNoYWRlciwgc2hhZGVyU3lzdGVtKTtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsU2hhZGVyU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJzaGFkZXJcIlxufTtcblxuZXhwb3J0IHsgR2xTaGFkZXJTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsU2hhZGVyU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcbmltcG9ydCB7IEdsUHJvZ3JhbURhdGEgfSBmcm9tICcuLi9HbFByb2dyYW1EYXRhLm1qcyc7XG5pbXBvcnQgeyBjb21waWxlU2hhZGVyIH0gZnJvbSAnLi9jb21waWxlU2hhZGVyLm1qcyc7XG5pbXBvcnQgeyBkZWZhdWx0VmFsdWUgfSBmcm9tICcuL2RlZmF1bHRWYWx1ZS5tanMnO1xuaW1wb3J0IHsgZXh0cmFjdEF0dHJpYnV0ZXNGcm9tR2xQcm9ncmFtIH0gZnJvbSAnLi9leHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0ubWpzJztcbmltcG9ydCB7IGdldFVib0RhdGEgfSBmcm9tICcuL2dldFVib0RhdGEubWpzJztcbmltcG9ydCB7IGdldFVuaWZvcm1EYXRhIH0gZnJvbSAnLi9nZXRVbmlmb3JtRGF0YS5tanMnO1xuaW1wb3J0IHsgbG9nUHJvZ3JhbUVycm9yIH0gZnJvbSAnLi9sb2dQcm9ncmFtRXJyb3IubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZW5lcmF0ZVByb2dyYW0oZ2wsIHByb2dyYW0pIHtcbiAgY29uc3QgZ2xWZXJ0U2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgcHJvZ3JhbS52ZXJ0ZXgpO1xuICBjb25zdCBnbEZyYWdTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHByb2dyYW0uZnJhZ21lbnQpO1xuICBjb25zdCB3ZWJHTFByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gIGdsLmF0dGFjaFNoYWRlcih3ZWJHTFByb2dyYW0sIGdsVmVydFNoYWRlcik7XG4gIGdsLmF0dGFjaFNoYWRlcih3ZWJHTFByb2dyYW0sIGdsRnJhZ1NoYWRlcik7XG4gIGNvbnN0IHRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MgPSBwcm9ncmFtLnRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3M7XG4gIGlmICh0cmFuc2Zvcm1GZWVkYmFja1ZhcnlpbmdzKSB7XG4gICAgaWYgKHR5cGVvZiBnbC50cmFuc2Zvcm1GZWVkYmFja1ZhcnlpbmdzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHdhcm4oYFRyYW5zZm9ybUZlZWRiYWNrIGlzIG5vdCBzdXBwb3J0ZWQgYnV0IFRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MgYXJlIGdpdmVuLmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbC50cmFuc2Zvcm1GZWVkYmFja1ZhcnlpbmdzKFxuICAgICAgICB3ZWJHTFByb2dyYW0sXG4gICAgICAgIHRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MubmFtZXMsXG4gICAgICAgIHRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MuYnVmZmVyTW9kZSA9PT0gXCJzZXBhcmF0ZVwiID8gZ2wuU0VQQVJBVEVfQVRUUklCUyA6IGdsLklOVEVSTEVBVkVEX0FUVFJJQlNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGdsLmxpbmtQcm9ncmFtKHdlYkdMUHJvZ3JhbSk7XG4gIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih3ZWJHTFByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgIGxvZ1Byb2dyYW1FcnJvcihnbCwgd2ViR0xQcm9ncmFtLCBnbFZlcnRTaGFkZXIsIGdsRnJhZ1NoYWRlcik7XG4gIH1cbiAgcHJvZ3JhbS5fYXR0cmlidXRlRGF0YSA9IGV4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbShcbiAgICB3ZWJHTFByb2dyYW0sXG4gICAgZ2wsXG4gICAgIS9eWyBcXHRdKiNbIFxcdF0qdmVyc2lvblsgXFx0XSszMDBbIFxcdF0rZXNbIFxcdF0qJC9tLnRlc3QocHJvZ3JhbS52ZXJ0ZXgpXG4gICk7XG4gIHByb2dyYW0uX3VuaWZvcm1EYXRhID0gZ2V0VW5pZm9ybURhdGEod2ViR0xQcm9ncmFtLCBnbCk7XG4gIHByb2dyYW0uX3VuaWZvcm1CbG9ja0RhdGEgPSBnZXRVYm9EYXRhKHdlYkdMUHJvZ3JhbSwgZ2wpO1xuICBnbC5kZWxldGVTaGFkZXIoZ2xWZXJ0U2hhZGVyKTtcbiAgZ2wuZGVsZXRlU2hhZGVyKGdsRnJhZ1NoYWRlcik7XG4gIGNvbnN0IHVuaWZvcm1EYXRhID0ge307XG4gIGZvciAoY29uc3QgaSBpbiBwcm9ncmFtLl91bmlmb3JtRGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSBwcm9ncmFtLl91bmlmb3JtRGF0YVtpXTtcbiAgICB1bmlmb3JtRGF0YVtpXSA9IHtcbiAgICAgIGxvY2F0aW9uOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24od2ViR0xQcm9ncmFtLCBpKSxcbiAgICAgIHZhbHVlOiBkZWZhdWx0VmFsdWUoZGF0YS50eXBlLCBkYXRhLnNpemUpXG4gICAgfTtcbiAgfVxuICBjb25zdCBnbFByb2dyYW0gPSBuZXcgR2xQcm9ncmFtRGF0YSh3ZWJHTFByb2dyYW0sIHVuaWZvcm1EYXRhKTtcbiAgcmV0dXJuIGdsUHJvZ3JhbTtcbn1cblxuZXhwb3J0IHsgZ2VuZXJhdGVQcm9ncmFtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZVByb2dyYW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvZ2VvbWV0cnkvdXRpbHMvZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQubWpzJztcbmltcG9ydCB7IG1hcEdsVG9WZXJ0ZXhGb3JtYXQgfSBmcm9tICcuL21hcFR5cGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBleHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0ocHJvZ3JhbSwgZ2wsIHNvcnRBdHRyaWJ1dGVzID0gZmFsc2UpIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xuICBjb25zdCB0b3RhbEF0dHJpYnV0ZXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbEF0dHJpYnV0ZXM7IGkrKykge1xuICAgIGNvbnN0IGF0dHJpYkRhdGEgPSBnbC5nZXRBY3RpdmVBdHRyaWIocHJvZ3JhbSwgaSk7XG4gICAgaWYgKGF0dHJpYkRhdGEubmFtZS5zdGFydHNXaXRoKFwiZ2xfXCIpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgZm9ybWF0ID0gbWFwR2xUb1ZlcnRleEZvcm1hdChnbCwgYXR0cmliRGF0YS50eXBlKTtcbiAgICBhdHRyaWJ1dGVzW2F0dHJpYkRhdGEubmFtZV0gPSB7XG4gICAgICBsb2NhdGlvbjogMCxcbiAgICAgIC8vIHNldCBmdXJ0aGVyIGRvd24uLlxuICAgICAgZm9ybWF0LFxuICAgICAgc3RyaWRlOiBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdChmb3JtYXQpLnN0cmlkZSxcbiAgICAgIG9mZnNldDogMCxcbiAgICAgIGluc3RhbmNlOiBmYWxzZSxcbiAgICAgIHN0YXJ0OiAwXG4gICAgfTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcyk7XG4gIGlmIChzb3J0QXR0cmlidXRlcykge1xuICAgIGtleXMuc29ydCgoYSwgYikgPT4gYSA+IGIgPyAxIDogLTEpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXR0cmlidXRlc1trZXlzW2ldXS5sb2NhdGlvbiA9IGk7XG4gICAgICBnbC5iaW5kQXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgaSwga2V5c1tpXSk7XG4gICAgfVxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXR0cmlidXRlc1trZXlzW2ldXS5sb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIGtleXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXR0cmlidXRlcztcbn1cblxuZXhwb3J0IHsgZXh0cmFjdEF0dHJpYnV0ZXNGcm9tR2xQcm9ncmFtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmYXVsdFZhbHVlIH0gZnJvbSAnLi9kZWZhdWx0VmFsdWUubWpzJztcbmltcG9ydCB7IG1hcFR5cGUgfSBmcm9tICcuL21hcFR5cGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZXRVbmlmb3JtRGF0YShwcm9ncmFtLCBnbCkge1xuICBjb25zdCB1bmlmb3JtcyA9IHt9O1xuICBjb25zdCB0b3RhbFVuaWZvcm1zID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsVW5pZm9ybXM7IGkrKykge1xuICAgIGNvbnN0IHVuaWZvcm1EYXRhID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybShwcm9ncmFtLCBpKTtcbiAgICBjb25zdCBuYW1lID0gdW5pZm9ybURhdGEubmFtZS5yZXBsYWNlKC9cXFsuKj9cXF0kLywgXCJcIik7XG4gICAgY29uc3QgaXNBcnJheSA9ICEhdW5pZm9ybURhdGEubmFtZS5tYXRjaCgvXFxbLio/XFxdJC8pO1xuICAgIGNvbnN0IHR5cGUgPSBtYXBUeXBlKGdsLCB1bmlmb3JtRGF0YS50eXBlKTtcbiAgICB1bmlmb3Jtc1tuYW1lXSA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBpbmRleDogaSxcbiAgICAgIHR5cGUsXG4gICAgICBzaXplOiB1bmlmb3JtRGF0YS5zaXplLFxuICAgICAgaXNBcnJheSxcbiAgICAgIHZhbHVlOiBkZWZhdWx0VmFsdWUodHlwZSwgdW5pZm9ybURhdGEuc2l6ZSlcbiAgICB9O1xuICB9XG4gIHJldHVybiB1bmlmb3Jtcztcbn1cblxuZXhwb3J0IHsgZ2V0VW5pZm9ybURhdGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFVuaWZvcm1EYXRhLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2V0VWJvRGF0YShwcm9ncmFtLCBnbCkge1xuICBpZiAoIWdsLkFDVElWRV9VTklGT1JNX0JMT0NLUylcbiAgICByZXR1cm4ge307XG4gIGNvbnN0IHVuaWZvcm1CbG9ja3MgPSB7fTtcbiAgY29uc3QgdG90YWxVbmlmb3Jtc0Jsb2NrcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1fQkxPQ0tTKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbFVuaWZvcm1zQmxvY2tzOyBpKyspIHtcbiAgICBjb25zdCBuYW1lID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybUJsb2NrTmFtZShwcm9ncmFtLCBpKTtcbiAgICBjb25zdCB1bmlmb3JtQmxvY2tJbmRleCA9IGdsLmdldFVuaWZvcm1CbG9ja0luZGV4KHByb2dyYW0sIG5hbWUpO1xuICAgIGNvbnN0IHNpemUgPSBnbC5nZXRBY3RpdmVVbmlmb3JtQmxvY2tQYXJhbWV0ZXIocHJvZ3JhbSwgaSwgZ2wuVU5JRk9STV9CTE9DS19EQVRBX1NJWkUpO1xuICAgIHVuaWZvcm1CbG9ja3NbbmFtZV0gPSB7XG4gICAgICBuYW1lLFxuICAgICAgaW5kZXg6IHVuaWZvcm1CbG9ja0luZGV4LFxuICAgICAgc2l6ZVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHVuaWZvcm1CbG9ja3M7XG59XG5cbmV4cG9ydCB7IGdldFVib0RhdGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFVib0RhdGEubWpzLm1hcFxuIiwiaW1wb3J0IHsgQnVmZmVyUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvYnVmZmVyL0J1ZmZlclJlc291cmNlLm1qcyc7XG5pbXBvcnQgeyBVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi9zaGFyZWQvc2hhZGVyL1VuaWZvcm1Hcm91cC5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZVNvdXJjZSB9IGZyb20gJy4uLy4uL3NoYXJlZC90ZXh0dXJlL3NvdXJjZXMvVGV4dHVyZVNvdXJjZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdlbmVyYXRlU2hhZGVyU3luY0NvZGUoc2hhZGVyLCBzaGFkZXJTeXN0ZW0pIHtcbiAgY29uc3QgZnVuY0ZyYWdtZW50cyA9IFtdO1xuICBjb25zdCBoZWFkZXJGcmFnbWVudHMgPSBbYFxuICAgICAgICB2YXIgZyA9IHMuZ3JvdXBzO1xuICAgICAgICB2YXIgc1MgPSByLnNoYWRlcjtcbiAgICAgICAgdmFyIHAgPSBzLmdsUHJvZ3JhbTtcbiAgICAgICAgdmFyIHVnUyA9IHIudW5pZm9ybUdyb3VwO1xuICAgICAgICB2YXIgcmVzb3VyY2VzO1xuICAgIGBdO1xuICBsZXQgYWRkZWRUZXh0cmVTeXN0ZW0gPSBmYWxzZTtcbiAgbGV0IGJsb2NrSW5kZXggPSAwO1xuICBsZXQgdGV4dHVyZUNvdW50ID0gMDtcbiAgY29uc3QgcHJvZ3JhbURhdGEgPSBzaGFkZXJTeXN0ZW0uX2dldFByb2dyYW1EYXRhKHNoYWRlci5nbFByb2dyYW0pO1xuICBmb3IgKGNvbnN0IGkgaW4gc2hhZGVyLmdyb3Vwcykge1xuICAgIGNvbnN0IGdyb3VwID0gc2hhZGVyLmdyb3Vwc1tpXTtcbiAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgcmVzb3VyY2VzID0gZ1ske2l9XS5yZXNvdXJjZXM7XG4gICAgICAgIGApO1xuICAgIGZvciAoY29uc3QgaiBpbiBncm91cC5yZXNvdXJjZXMpIHtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gZ3JvdXAucmVzb3VyY2VzW2pdO1xuICAgICAgaWYgKHJlc291cmNlIGluc3RhbmNlb2YgVW5pZm9ybUdyb3VwKSB7XG4gICAgICAgIGlmIChyZXNvdXJjZS51Ym8pIHtcbiAgICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgc1MuYmluZFVuaWZvcm1CbG9jayhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXNbJHtqfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc1MuX3VuaWZvcm1CaW5kTWFwWyR7aX1bJHtqfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtibG9ja0luZGV4Kyt9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgdWdTLnVwZGF0ZVVuaWZvcm1Hcm91cChyZXNvdXJjZXNbJHtqfV0sIHAsIHNEKTtcbiAgICAgICAgICAgICAgICAgICAgYCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVzb3VyY2UgaW5zdGFuY2VvZiBCdWZmZXJSZXNvdXJjZSkge1xuICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICBzUy5iaW5kVW5pZm9ybUJsb2NrKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzWyR7an1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgc1MuX3VuaWZvcm1CaW5kTWFwWyR7aX1bJHtqfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAke2Jsb2NrSW5kZXgrK31cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBgKTtcbiAgICAgIH0gZWxzZSBpZiAocmVzb3VyY2UgaW5zdGFuY2VvZiBUZXh0dXJlU291cmNlKSB7XG4gICAgICAgIGNvbnN0IHVuaWZvcm1OYW1lID0gc2hhZGVyLl91bmlmb3JtQmluZE1hcFtpXVtqXTtcbiAgICAgICAgY29uc3QgdW5pZm9ybURhdGEgPSBwcm9ncmFtRGF0YS51bmlmb3JtRGF0YVt1bmlmb3JtTmFtZV07XG4gICAgICAgIGlmICh1bmlmb3JtRGF0YSkge1xuICAgICAgICAgIGlmICghYWRkZWRUZXh0cmVTeXN0ZW0pIHtcbiAgICAgICAgICAgIGFkZGVkVGV4dHJlU3lzdGVtID0gdHJ1ZTtcbiAgICAgICAgICAgIGhlYWRlckZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0UyA9IHIudGV4dHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzaGFkZXJTeXN0ZW0uX2dsLnVuaWZvcm0xaSh1bmlmb3JtRGF0YS5sb2NhdGlvbiwgdGV4dHVyZUNvdW50KTtcbiAgICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgdFMuYmluZChyZXNvdXJjZXNbJHtqfV0sICR7dGV4dHVyZUNvdW50fSk7XG4gICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgICAgIHRleHR1cmVDb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGZ1bmN0aW9uU291cmNlID0gWy4uLmhlYWRlckZyYWdtZW50cywgLi4uZnVuY0ZyYWdtZW50c10uam9pbihcIlxcblwiKTtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcInJcIiwgXCJzXCIsIFwic0RcIiwgZnVuY3Rpb25Tb3VyY2UpO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVNoYWRlclN5bmNDb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HZW5lcmF0ZVNoYWRlclN5bmNDb2RlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgVU5JRk9STV9UT19TSU5HTEVfU0VUVEVSUyA9IHtcbiAgZjMyOiBgaWYgKGN2ICE9PSB2KSB7XG4gICAgICAgICAgICBjdS52YWx1ZSA9IHY7XG4gICAgICAgICAgICBnbC51bmlmb3JtMWYobG9jYXRpb24sIHYpO1xuICAgICAgICB9YCxcbiAgXCJ2ZWMyPGYzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTJmKGxvY2F0aW9uLCB2WzBdLCB2WzFdKTtcbiAgICAgICAgfWAsXG4gIFwidmVjMzxmMzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGN2WzJdID0gdlsyXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0zZihsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzQ8ZjMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdIHx8IGN2WzNdICE9PSB2WzNdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBjdlszXSA9IHZbM107XG4gICAgICAgICAgICBnbC51bmlmb3JtNGYobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pO1xuICAgICAgICB9YCxcbiAgaTMyOiBgaWYgKGN2ICE9PSB2KSB7XG4gICAgICAgICAgICBjdS52YWx1ZSA9IHY7XG4gICAgICAgICAgICBnbC51bmlmb3JtMWkobG9jYXRpb24sIHYpO1xuICAgICAgICB9YCxcbiAgXCJ2ZWMyPGkzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTJpKGxvY2F0aW9uLCB2WzBdLCB2WzFdKTtcbiAgICAgICAgfWAsXG4gIFwidmVjMzxpMzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGN2WzJdID0gdlsyXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0zaShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzQ8aTMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdIHx8IGN2WzNdICE9PSB2WzNdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBjdlszXSA9IHZbM107XG4gICAgICAgICAgICBnbC51bmlmb3JtNGkobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pO1xuICAgICAgICB9YCxcbiAgdTMyOiBgaWYgKGN2ICE9PSB2KSB7XG4gICAgICAgICAgICBjdS52YWx1ZSA9IHY7XG4gICAgICAgICAgICBnbC51bmlmb3JtMXVpKGxvY2F0aW9uLCB2KTtcbiAgICAgICAgfWAsXG4gIFwidmVjMjx1MzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0ydWkobG9jYXRpb24sIHZbMF0sIHZbMV0pO1xuICAgICAgICB9YCxcbiAgXCJ2ZWMzPHUzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSB8fCBjdlsyXSAhPT0gdlsyXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgY3ZbMl0gPSB2WzJdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTN1aShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzQ8dTMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdIHx8IGN2WzNdICE9PSB2WzNdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBjdlszXSA9IHZbM107XG4gICAgICAgICAgICBnbC51bmlmb3JtNHVpKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKTtcbiAgICAgICAgfWAsXG4gIGJvb2w6IGBpZiAoY3YgIT09IHYpIHtcbiAgICAgICAgICAgIGN1LnZhbHVlID0gdjtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdik7XG4gICAgICAgIH1gLFxuICBcInZlYzI8Ym9vbD5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTJpKGxvY2F0aW9uLCB2WzBdLCB2WzFdKTtcbiAgICAgICAgfWAsXG4gIFwidmVjMzxib29sPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBnbC51bmlmb3JtM2kobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICB9YCxcbiAgXCJ2ZWM0PGJvb2w+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0gfHwgY3ZbM10gIT09IHZbM10pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGN2WzJdID0gdlsyXTtcbiAgICAgICAgICAgIGN2WzNdID0gdlszXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm00aShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSwgdlszXSk7XG4gICAgICAgIH1gLFxuICBcIm1hdDJ4MjxmMzI+XCI6IGBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdik7YCxcbiAgXCJtYXQzeDM8ZjMyPlwiOiBgZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHYpO2AsXG4gIFwibWF0NHg0PGYzMj5cIjogYGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2KTtgXG59O1xuY29uc3QgVU5JRk9STV9UT19BUlJBWV9TRVRURVJTID0ge1xuICBmMzI6IGBnbC51bmlmb3JtMWZ2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzI8ZjMyPlwiOiBgZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMzPGYzMj5cIjogYGdsLnVuaWZvcm0zZnYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjNDxmMzI+XCI6IGBnbC51bmlmb3JtNGZ2KGxvY2F0aW9uLCB2KTtgLFxuICBcIm1hdDJ4MjxmMzI+XCI6IGBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdik7YCxcbiAgXCJtYXQzeDM8ZjMyPlwiOiBgZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHYpO2AsXG4gIFwibWF0NHg0PGYzMj5cIjogYGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2KTtgLFxuICBpMzI6IGBnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzI8aTMyPlwiOiBgZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMzPGkzMj5cIjogYGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjNDxpMzI+XCI6IGBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2KTtgLFxuICB1MzI6IGBnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzI8dTMyPlwiOiBgZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMzPHUzMj5cIjogYGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjNDx1MzI+XCI6IGBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2KTtgLFxuICBib29sOiBgZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMyPGJvb2w+XCI6IGBnbC51bmlmb3JtMml2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzM8Ym9vbD5cIjogYGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjNDxib29sPlwiOiBgZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdik7YFxufTtcblxuZXhwb3J0IHsgVU5JRk9STV9UT19BUlJBWV9TRVRURVJTLCBVTklGT1JNX1RPX1NJTkdMRV9TRVRURVJTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZVVuaWZvcm1zU3luY1R5cGVzLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlVW5pZm9ybXNTeW5jIH0gZnJvbSAnLi91dGlscy9nZW5lcmF0ZVVuaWZvcm1zU3luYy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsVW5pZm9ybUdyb3VwU3lzdGVtIHtcbiAgLyoqIEBwYXJhbSByZW5kZXJlciAtIFRoZSByZW5kZXJlciB0aGlzIFN5c3RlbSB3b3JrcyBmb3IuICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgLyoqIENhY2hlIHRvIGhvbGRzIHRoZSBnZW5lcmF0ZWQgZnVuY3Rpb25zLiBTdG9yZWQgYWdhaW5zdCBVbmlmb3JtT2JqZWN0cyB1bmlxdWUgc2lnbmF0dXJlLiAqL1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgdGhpcy5fdW5pZm9ybUdyb3VwU3luY0hhc2ggPSB7fTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuZ2wgPSBudWxsO1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gIH1cbiAgY29udGV4dENoYW5nZShnbCkge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgfVxuICAvKipcbiAgICogVXBsb2FkcyB0aGUgdW5pZm9ybXMgdmFsdWVzIHRvIHRoZSBjdXJyZW50bHkgYm91bmQgc2hhZGVyLlxuICAgKiBAcGFyYW0gZ3JvdXAgLSB0aGUgdW5pZm9ybXMgdmFsdWVzIHRoYXQgYmUgYXBwbGllZCB0byB0aGUgY3VycmVudCBzaGFkZXJcbiAgICogQHBhcmFtIHByb2dyYW1cbiAgICogQHBhcmFtIHN5bmNEYXRhXG4gICAqIEBwYXJhbSBzeW5jRGF0YS50ZXh0dXJlQ291bnRcbiAgICovXG4gIHVwZGF0ZVVuaWZvcm1Hcm91cChncm91cCwgcHJvZ3JhbSwgc3luY0RhdGEpIHtcbiAgICBjb25zdCBwcm9ncmFtRGF0YSA9IHRoaXMuX3JlbmRlcmVyLnNoYWRlci5fZ2V0UHJvZ3JhbURhdGEocHJvZ3JhbSk7XG4gICAgaWYgKCFncm91cC5pc1N0YXRpYyB8fCBncm91cC5fZGlydHlJZCAhPT0gcHJvZ3JhbURhdGEudW5pZm9ybURpcnR5R3JvdXBzW2dyb3VwLnVpZF0pIHtcbiAgICAgIHByb2dyYW1EYXRhLnVuaWZvcm1EaXJ0eUdyb3Vwc1tncm91cC51aWRdID0gZ3JvdXAuX2RpcnR5SWQ7XG4gICAgICBjb25zdCBzeW5jRnVuYyA9IHRoaXMuX2dldFVuaWZvcm1TeW5jRnVuY3Rpb24oZ3JvdXAsIHByb2dyYW0pO1xuICAgICAgc3luY0Z1bmMocHJvZ3JhbURhdGEudW5pZm9ybURhdGEsIGdyb3VwLnVuaWZvcm1zLCB0aGlzLl9yZW5kZXJlciwgc3luY0RhdGEpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogT3ZlcnJpZGFibGUgYnkgdGhlIHBpeGkuanMvdW5zYWZlLWV2YWwgcGFja2FnZSB0byB1c2Ugc3RhdGljIHN5bmNVbmlmb3JtcyBpbnN0ZWFkLlxuICAgKiBAcGFyYW0gZ3JvdXBcbiAgICogQHBhcmFtIHByb2dyYW1cbiAgICovXG4gIF9nZXRVbmlmb3JtU3luY0Z1bmN0aW9uKGdyb3VwLCBwcm9ncmFtKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VuaWZvcm1Hcm91cFN5bmNIYXNoW2dyb3VwLl9zaWduYXR1cmVdPy5bcHJvZ3JhbS5fa2V5XSB8fCB0aGlzLl9jcmVhdGVVbmlmb3JtU3luY0Z1bmN0aW9uKGdyb3VwLCBwcm9ncmFtKTtcbiAgfVxuICBfY3JlYXRlVW5pZm9ybVN5bmNGdW5jdGlvbihncm91cCwgcHJvZ3JhbSkge1xuICAgIGNvbnN0IHVuaWZvcm1Hcm91cFN5bmNIYXNoID0gdGhpcy5fdW5pZm9ybUdyb3VwU3luY0hhc2hbZ3JvdXAuX3NpZ25hdHVyZV0gfHwgKHRoaXMuX3VuaWZvcm1Hcm91cFN5bmNIYXNoW2dyb3VwLl9zaWduYXR1cmVdID0ge30pO1xuICAgIGNvbnN0IGlkID0gdGhpcy5fZ2V0U2lnbmF0dXJlKGdyb3VwLCBwcm9ncmFtLl91bmlmb3JtRGF0YSwgXCJ1XCIpO1xuICAgIGlmICghdGhpcy5fY2FjaGVbaWRdKSB7XG4gICAgICB0aGlzLl9jYWNoZVtpZF0gPSB0aGlzLl9nZW5lcmF0ZVVuaWZvcm1zU3luYyhncm91cCwgcHJvZ3JhbS5fdW5pZm9ybURhdGEpO1xuICAgIH1cbiAgICB1bmlmb3JtR3JvdXBTeW5jSGFzaFtwcm9ncmFtLl9rZXldID0gdGhpcy5fY2FjaGVbaWRdO1xuICAgIHJldHVybiB1bmlmb3JtR3JvdXBTeW5jSGFzaFtwcm9ncmFtLl9rZXldO1xuICB9XG4gIF9nZW5lcmF0ZVVuaWZvcm1zU3luYyhncm91cCwgdW5pZm9ybURhdGEpIHtcbiAgICByZXR1cm4gZ2VuZXJhdGVVbmlmb3Jtc1N5bmMoZ3JvdXAsIHVuaWZvcm1EYXRhKTtcbiAgfVxuICAvKipcbiAgICogVGFrZXMgYSB1bmlmb3JtIGdyb3VwIGFuZCBkYXRhIGFuZCBnZW5lcmF0ZXMgYSB1bmlxdWUgc2lnbmF0dXJlIGZvciB0aGVtLlxuICAgKiBAcGFyYW0gZ3JvdXAgLSBUaGUgdW5pZm9ybSBncm91cCB0byBnZXQgc2lnbmF0dXJlIG9mXG4gICAqIEBwYXJhbSBncm91cC51bmlmb3Jtc1xuICAgKiBAcGFyYW0gdW5pZm9ybURhdGEgLSBVbmlmb3JtIGluZm9ybWF0aW9uIGdlbmVyYXRlZCBieSB0aGUgc2hhZGVyXG4gICAqIEBwYXJhbSBwcmVGaXhcbiAgICogQHJldHVybnMgVW5pcXVlIHNpZ25hdHVyZSBvZiB0aGUgdW5pZm9ybSBncm91cFxuICAgKi9cbiAgX2dldFNpZ25hdHVyZShncm91cCwgdW5pZm9ybURhdGEsIHByZUZpeCkge1xuICAgIGNvbnN0IHVuaWZvcm1zID0gZ3JvdXAudW5pZm9ybXM7XG4gICAgY29uc3Qgc3RyaW5ncyA9IFtgJHtwcmVGaXh9LWBdO1xuICAgIGZvciAoY29uc3QgaSBpbiB1bmlmb3Jtcykge1xuICAgICAgc3RyaW5ncy5wdXNoKGkpO1xuICAgICAgaWYgKHVuaWZvcm1EYXRhW2ldKSB7XG4gICAgICAgIHN0cmluZ3MucHVzaCh1bmlmb3JtRGF0YVtpXS50eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ3Muam9pbihcIi1cIik7XG4gIH1cbiAgLyoqIERlc3Ryb3lzIHRoaXMgU3lzdGVtIGFuZCByZW1vdmVzIGFsbCBpdHMgdGV4dHVyZXMuICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX2NhY2hlID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsVW5pZm9ybUdyb3VwU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJ1bmlmb3JtR3JvdXBcIlxufTtcblxuZXhwb3J0IHsgR2xVbmlmb3JtR3JvdXBTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsVW5pZm9ybUdyb3VwU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEJ1ZmZlclJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2J1ZmZlci9CdWZmZXJSZXNvdXJjZS5tanMnO1xuaW1wb3J0IHsgVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzJztcbmltcG9ydCB7IHVuaWZvcm1QYXJzZXJzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3NoYWRlci91dGlscy91bmlmb3JtUGFyc2Vycy5tanMnO1xuaW1wb3J0IHsgVU5JRk9STV9UT19TSU5HTEVfU0VUVEVSUywgVU5JRk9STV9UT19BUlJBWV9TRVRURVJTIH0gZnJvbSAnLi9nZW5lcmF0ZVVuaWZvcm1zU3luY1R5cGVzLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2VuZXJhdGVVbmlmb3Jtc1N5bmMoZ3JvdXAsIHVuaWZvcm1EYXRhKSB7XG4gIGNvbnN0IGZ1bmNGcmFnbWVudHMgPSBbYFxuICAgICAgICB2YXIgdiA9IG51bGw7XG4gICAgICAgIHZhciBjdiA9IG51bGw7XG4gICAgICAgIHZhciBjdSA9IG51bGw7XG4gICAgICAgIHZhciB0ID0gMDtcbiAgICAgICAgdmFyIGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgICAgIHZhciBuYW1lID0gbnVsbDtcbiAgICBgXTtcbiAgZm9yIChjb25zdCBpIGluIGdyb3VwLnVuaWZvcm1zKSB7XG4gICAgaWYgKCF1bmlmb3JtRGF0YVtpXSkge1xuICAgICAgaWYgKGdyb3VwLnVuaWZvcm1zW2ldIGluc3RhbmNlb2YgVW5pZm9ybUdyb3VwKSB7XG4gICAgICAgIGlmIChncm91cC51bmlmb3Jtc1tpXS51Ym8pIHtcbiAgICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuc2hhZGVyLmJpbmRVbmlmb3JtQmxvY2sodXYuJHtpfSwgXCIke2l9XCIpO1xuICAgICAgICAgICAgICAgICAgICBgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuc2hhZGVyLnVwZGF0ZVVuaWZvcm1Hcm91cCh1di4ke2l9KTtcbiAgICAgICAgICAgICAgICAgICAgYCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZ3JvdXAudW5pZm9ybXNbaV0gaW5zdGFuY2VvZiBCdWZmZXJSZXNvdXJjZSkge1xuICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuc2hhZGVyLmJpbmRCdWZmZXJSZXNvdXJjZSh1di4ke2l9LCBcIiR7aX1cIik7XG4gICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHVuaWZvcm0gPSBncm91cC51bmlmb3JtU3RydWN0dXJlc1tpXTtcbiAgICBsZXQgcGFyc2VkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB1bmlmb3JtUGFyc2Vycy5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgcGFyc2VyID0gdW5pZm9ybVBhcnNlcnNbal07XG4gICAgICBpZiAodW5pZm9ybS50eXBlID09PSBwYXJzZXIudHlwZSAmJiBwYXJzZXIudGVzdCh1bmlmb3JtKSkge1xuICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYG5hbWUgPSBcIiR7aX1cIjtgLCB1bmlmb3JtUGFyc2Vyc1tqXS51bmlmb3JtKTtcbiAgICAgICAgcGFyc2VkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcGFyc2VkKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVR5cGUgPSB1bmlmb3JtLnNpemUgPT09IDEgPyBVTklGT1JNX1RPX1NJTkdMRV9TRVRURVJTIDogVU5JRk9STV9UT19BUlJBWV9TRVRURVJTO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZVR5cGVbdW5pZm9ybS50eXBlXS5yZXBsYWNlKFwibG9jYXRpb25cIiwgYHVkW1wiJHtpfVwiXS5sb2NhdGlvbmApO1xuICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgIGN1ID0gdWRbXCIke2l9XCJdO1xuICAgICAgICAgICAgY3YgPSBjdS52YWx1ZTtcbiAgICAgICAgICAgIHYgPSB1dltcIiR7aX1cIl07XG4gICAgICAgICAgICAke3RlbXBsYXRlfTtgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcInVkXCIsIFwidXZcIiwgXCJyZW5kZXJlclwiLCBcInN5bmNEYXRhXCIsIGZ1bmNGcmFnbWVudHMuam9pbihcIlxcblwiKSk7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlVW5pZm9ybXNTeW5jIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZVVuaWZvcm1zU3luYy5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9zdGF0ZS9TdGF0ZS5tanMnO1xuaW1wb3J0IHsgbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpIH0gZnJvbSAnLi9tYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBCTEVORCA9IDA7XG5jb25zdCBPRkZTRVQgPSAxO1xuY29uc3QgQ1VMTElORyA9IDI7XG5jb25zdCBERVBUSF9URVNUID0gMztcbmNvbnN0IFdJTkRJTkcgPSA0O1xuY29uc3QgREVQVEhfTUFTSyA9IDU7XG5jb25zdCBfR2xTdGF0ZVN5c3RlbSA9IGNsYXNzIF9HbFN0YXRlU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZUlkID0gMDtcbiAgICB0aGlzLnBvbHlnb25PZmZzZXQgPSAwO1xuICAgIHRoaXMuYmxlbmRNb2RlID0gXCJub25lXCI7XG4gICAgdGhpcy5fYmxlbmRFcSA9IGZhbHNlO1xuICAgIHRoaXMubWFwID0gW107XG4gICAgdGhpcy5tYXBbQkxFTkRdID0gdGhpcy5zZXRCbGVuZDtcbiAgICB0aGlzLm1hcFtPRkZTRVRdID0gdGhpcy5zZXRPZmZzZXQ7XG4gICAgdGhpcy5tYXBbQ1VMTElOR10gPSB0aGlzLnNldEN1bGxGYWNlO1xuICAgIHRoaXMubWFwW0RFUFRIX1RFU1RdID0gdGhpcy5zZXREZXB0aFRlc3Q7XG4gICAgdGhpcy5tYXBbV0lORElOR10gPSB0aGlzLnNldEZyb250RmFjZTtcbiAgICB0aGlzLm1hcFtERVBUSF9NQVNLXSA9IHRoaXMuc2V0RGVwdGhNYXNrO1xuICAgIHRoaXMuY2hlY2tzID0gW107XG4gICAgdGhpcy5kZWZhdWx0U3RhdGUgPSBTdGF0ZS5mb3IyZCgpO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ2wpIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5ibGVuZE1vZGVzTWFwID0gbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpKGdsKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICogQHBhcmFtIHsqfSBzdGF0ZSAtIFRoZSBzdGF0ZSB0byBzZXQuXG4gICAqL1xuICBzZXQoc3RhdGUpIHtcbiAgICBzdGF0ZSA9IHN0YXRlIHx8IHRoaXMuZGVmYXVsdFN0YXRlO1xuICAgIGlmICh0aGlzLnN0YXRlSWQgIT09IHN0YXRlLmRhdGEpIHtcbiAgICAgIGxldCBkaWZmID0gdGhpcy5zdGF0ZUlkIF4gc3RhdGUuZGF0YTtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIHdoaWxlIChkaWZmKSB7XG4gICAgICAgIGlmIChkaWZmICYgMSkge1xuICAgICAgICAgIHRoaXMubWFwW2ldLmNhbGwodGhpcywgISEoc3RhdGUuZGF0YSAmIDEgPDwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIGRpZmYgPSBkaWZmID4+IDE7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGVJZCA9IHN0YXRlLmRhdGE7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGVja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuY2hlY2tzW2ldKHRoaXMsIHN0YXRlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0YXRlLCB3aGVuIHByZXZpb3VzIHN0YXRlIGlzIHVua25vd24uXG4gICAqIEBwYXJhbSB7Kn0gc3RhdGUgLSBUaGUgc3RhdGUgdG8gc2V0XG4gICAqL1xuICBmb3JjZVN0YXRlKHN0YXRlKSB7XG4gICAgc3RhdGUgPSBzdGF0ZSB8fCB0aGlzLmRlZmF1bHRTdGF0ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLm1hcFtpXS5jYWxsKHRoaXMsICEhKHN0YXRlLmRhdGEgJiAxIDw8IGkpKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoZWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5jaGVja3NbaV0odGhpcywgc3RhdGUpO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlSWQgPSBzdGF0ZS5kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgYmxlbmRpbmcuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIFdlYkdsIGJsZW5kaW5nLlxuICAgKi9cbiAgc2V0QmxlbmQodmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVDaGVjayhfR2xTdGF0ZVN5c3RlbS5fY2hlY2tCbGVuZE1vZGUsIHZhbHVlKTtcbiAgICB0aGlzLmdsW3ZhbHVlID8gXCJlbmFibGVcIiA6IFwiZGlzYWJsZVwiXSh0aGlzLmdsLkJMRU5EKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIHBvbHlnb24gb2Zmc2V0IGZpbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIHBvbHlnb24gb2Zmc2V0IHRlc3RpbmcuXG4gICAqL1xuICBzZXRPZmZzZXQodmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVDaGVjayhfR2xTdGF0ZVN5c3RlbS5fY2hlY2tQb2x5Z29uT2Zmc2V0LCB2YWx1ZSk7XG4gICAgdGhpcy5nbFt2YWx1ZSA/IFwiZW5hYmxlXCIgOiBcImRpc2FibGVcIl0odGhpcy5nbC5QT0xZR09OX09GRlNFVF9GSUxMKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIGRlcHRoIHRlc3QuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIGRlcHRoIHRlc3RpbmcuXG4gICAqL1xuICBzZXREZXB0aFRlc3QodmFsdWUpIHtcbiAgICB0aGlzLmdsW3ZhbHVlID8gXCJlbmFibGVcIiA6IFwiZGlzYWJsZVwiXSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgZGVwdGggbWFzay5cbiAgICogQHBhcmFtIHZhbHVlIC0gVHVybiBvbiBvciBvZmYgd2ViZ2wgZGVwdGggbWFzay5cbiAgICovXG4gIHNldERlcHRoTWFzayh2YWx1ZSkge1xuICAgIHRoaXMuZ2wuZGVwdGhNYXNrKHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIGN1bGwgZmFjZS5cbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIGN1bGwgZmFjZS5cbiAgICovXG4gIHNldEN1bGxGYWNlKHZhbHVlKSB7XG4gICAgdGhpcy5nbFt2YWx1ZSA/IFwiZW5hYmxlXCIgOiBcImRpc2FibGVcIl0odGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnbCBmcm9udCBmYWNlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gdHJ1ZSBpcyBjbG9ja3dpc2UgYW5kIGZhbHNlIGlzIGNvdW50ZXItY2xvY2t3aXNlXG4gICAqL1xuICBzZXRGcm9udEZhY2UodmFsdWUpIHtcbiAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsW3ZhbHVlID8gXCJDV1wiIDogXCJDQ1dcIl0pO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBibGVuZCBtb2RlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgYmxlbmQgbW9kZSB0byBzZXQgdG8uXG4gICAqL1xuICBzZXRCbGVuZE1vZGUodmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuYmxlbmRNb2Rlc01hcFt2YWx1ZV0pIHtcbiAgICAgIHZhbHVlID0gXCJub3JtYWxcIjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB0aGlzLmJsZW5kTW9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmJsZW5kTW9kZSA9IHZhbHVlO1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLmJsZW5kTW9kZXNNYXBbdmFsdWVdO1xuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICBpZiAobW9kZS5sZW5ndGggPT09IDIpIHtcbiAgICAgIGdsLmJsZW5kRnVuYyhtb2RlWzBdLCBtb2RlWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wuYmxlbmRGdW5jU2VwYXJhdGUobW9kZVswXSwgbW9kZVsxXSwgbW9kZVsyXSwgbW9kZVszXSk7XG4gICAgfVxuICAgIGlmIChtb2RlLmxlbmd0aCA9PT0gNikge1xuICAgICAgdGhpcy5fYmxlbmRFcSA9IHRydWU7XG4gICAgICBnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUobW9kZVs0XSwgbW9kZVs1XSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9ibGVuZEVxKSB7XG4gICAgICB0aGlzLl9ibGVuZEVxID0gZmFsc2U7XG4gICAgICBnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoZ2wuRlVOQ19BREQsIGdsLkZVTkNfQUREKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvbHlnb24gb2Zmc2V0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB0aGUgcG9seWdvbiBvZmZzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlIC0gdGhlIHBvbHlnb24gb2Zmc2V0IHNjYWxlXG4gICAqL1xuICBzZXRQb2x5Z29uT2Zmc2V0KHZhbHVlLCBzY2FsZSkge1xuICAgIHRoaXMuZ2wucG9seWdvbk9mZnNldCh2YWx1ZSwgc2NhbGUpO1xuICB9XG4gIC8vIHVzZWRcbiAgLyoqIFJlc2V0cyBhbGwgdGhlIGxvZ2ljIGFuZCBkaXNhYmxlcyB0aGUgVkFPcy4gKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZhbHNlKTtcbiAgICB0aGlzLmZvcmNlU3RhdGUodGhpcy5kZWZhdWx0U3RhdGUpO1xuICAgIHRoaXMuX2JsZW5kRXEgPSB0cnVlO1xuICAgIHRoaXMuYmxlbmRNb2RlID0gXCJcIjtcbiAgICB0aGlzLnNldEJsZW5kTW9kZShcIm5vcm1hbFwiKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2tzIHRvIHNlZSB3aGljaCB1cGRhdGVzIHNob3VsZCBiZSBjaGVja2VkIGJhc2VkIG9uIHdoaWNoIHNldHRpbmdzIGhhdmUgYmVlbiBhY3RpdmF0ZWQuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBpZiBibGVuZCBpcyBlbmFibGVkIHRoZW4gd2Ugc2hvdWxkIGNoZWNrIHRoZSBibGVuZCBtb2RlcyBlYWNoIHRpbWUgdGhlIHN0YXRlIGlzIGNoYW5nZWRcbiAgICogb3IgaWYgcG9seWdvbiBmaWxsIGlzIGFjdGl2YXRlZCB0aGVuIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHBvbHlnb24gb2Zmc2V0IGNoYW5nZXMuXG4gICAqIFRoZSBpZGVhIGlzIHRoYXQgd2Ugb25seSBjaGVjayB3aGF0IHdlIGhhdmUgdG9vLlxuICAgKiBAcGFyYW0gZnVuYyAtIHRoZSBjaGVja2luZyBmdW5jdGlvbiB0byBhZGQgb3IgcmVtb3ZlXG4gICAqIEBwYXJhbSB2YWx1ZSAtIHNob3VsZCB0aGUgY2hlY2sgZnVuY3Rpb24gYmUgYWRkZWQgb3IgcmVtb3ZlZC5cbiAgICovXG4gIF91cGRhdGVDaGVjayhmdW5jLCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jaGVja3MuaW5kZXhPZihmdW5jKTtcbiAgICBpZiAodmFsdWUgJiYgaW5kZXggPT09IC0xKSB7XG4gICAgICB0aGlzLmNoZWNrcy5wdXNoKGZ1bmMpO1xuICAgIH0gZWxzZSBpZiAoIXZhbHVlICYmIGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5jaGVja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEEgcHJpdmF0ZSBsaXR0bGUgd3JhcHBlciBmdW5jdGlvbiB0aGF0IHdlIGNhbGwgdG8gY2hlY2sgdGhlIGJsZW5kIG1vZGUuXG4gICAqIEBwYXJhbSBzeXN0ZW0gLSB0aGUgU3lzdGVtIHRvIHBlcmZvcm0gdGhlIHN0YXRlIGNoZWNrIG9uXG4gICAqIEBwYXJhbSBzdGF0ZSAtIHRoZSBzdGF0ZSB0aGF0IHRoZSBibGVuZE1vZGUgd2lsbCBwdWxsZWQgZnJvbVxuICAgKi9cbiAgc3RhdGljIF9jaGVja0JsZW5kTW9kZShzeXN0ZW0sIHN0YXRlKSB7XG4gICAgc3lzdGVtLnNldEJsZW5kTW9kZShzdGF0ZS5ibGVuZE1vZGUpO1xuICB9XG4gIC8qKlxuICAgKiBBIHByaXZhdGUgbGl0dGxlIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCB3ZSBjYWxsIHRvIGNoZWNrIHRoZSBwb2x5Z29uIG9mZnNldC5cbiAgICogQHBhcmFtIHN5c3RlbSAtIHRoZSBTeXN0ZW0gdG8gcGVyZm9ybSB0aGUgc3RhdGUgY2hlY2sgb25cbiAgICogQHBhcmFtIHN0YXRlIC0gdGhlIHN0YXRlIHRoYXQgdGhlIGJsZW5kTW9kZSB3aWxsIHB1bGxlZCBmcm9tXG4gICAqL1xuICBzdGF0aWMgX2NoZWNrUG9seWdvbk9mZnNldChzeXN0ZW0sIHN0YXRlKSB7XG4gICAgc3lzdGVtLnNldFBvbHlnb25PZmZzZXQoMSwgc3RhdGUucG9seWdvbk9mZnNldCk7XG4gIH1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5jaGVja3MubGVuZ3RoID0gMDtcbiAgfVxufTtcbi8qKiBAaWdub3JlICovXG5fR2xTdGF0ZVN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwic3RhdGVcIlxufTtcbmxldCBHbFN0YXRlU3lzdGVtID0gX0dsU3RhdGVTeXN0ZW07XG5cbmV4cG9ydCB7IEdsU3RhdGVTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsU3RhdGVTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRE9NQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2Vudmlyb25tZW50L2FkYXB0ZXIubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBtYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkoZ2wpIHtcbiAgY29uc3QgYmxlbmRNYXAgPSB7fTtcbiAgYmxlbmRNYXAubm9ybWFsID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gIGJsZW5kTWFwLmFkZCA9IFtnbC5PTkUsIGdsLk9ORV07XG4gIGJsZW5kTWFwLm11bHRpcGx5ID0gW2dsLkRTVF9DT0xPUiwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgYmxlbmRNYXAuc2NyZWVuID0gW2dsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19DT0xPUiwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgYmxlbmRNYXAubm9uZSA9IFswLCAwXTtcbiAgYmxlbmRNYXBbXCJub3JtYWwtbnBtXCJdID0gW2dsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgYmxlbmRNYXBbXCJhZGQtbnBtXCJdID0gW2dsLlNSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkUsIGdsLk9ORV07XG4gIGJsZW5kTWFwW1wic2NyZWVuLW5wbVwiXSA9IFtnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gIGJsZW5kTWFwLmVyYXNlID0gW2dsLlpFUk8sIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICBjb25zdCBpc1dlYkdsMiA9ICEoZ2wgaW5zdGFuY2VvZiBET01BZGFwdGVyLmdldCgpLmdldFdlYkdMUmVuZGVyaW5nQ29udGV4dCgpKTtcbiAgaWYgKGlzV2ViR2wyKSB7XG4gICAgYmxlbmRNYXAubWluID0gW2dsLk9ORSwgZ2wuT05FLCBnbC5PTkUsIGdsLk9ORSwgZ2wuTUlOLCBnbC5NSU5dO1xuICAgIGJsZW5kTWFwLm1heCA9IFtnbC5PTkUsIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkUsIGdsLk1BWCwgZ2wuTUFYXTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBleHQgPSBnbC5nZXRFeHRlbnNpb24oXCJFWFRfYmxlbmRfbWlubWF4XCIpO1xuICAgIGlmIChleHQpIHtcbiAgICAgIGJsZW5kTWFwLm1pbiA9IFtnbC5PTkUsIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkUsIGV4dC5NSU5fRVhULCBleHQuTUlOX0VYVF07XG4gICAgICBibGVuZE1hcC5tYXggPSBbZ2wuT05FLCBnbC5PTkUsIGdsLk9ORSwgZ2wuT05FLCBleHQuTUFYX0VYVCwgZXh0Lk1BWF9FWFRdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmxlbmRNYXA7XG59XG5cbmV4cG9ydCB7IG1hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpLm1qcy5tYXBcbiIsImltcG9ydCB7IEdMX1RBUkdFVFMsIEdMX1RZUEVTLCBHTF9GT1JNQVRTIH0gZnJvbSAnLi9jb25zdC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsVGV4dHVyZSB7XG4gIGNvbnN0cnVjdG9yKHRleHR1cmUpIHtcbiAgICB0aGlzLnRhcmdldCA9IEdMX1RBUkdFVFMuVEVYVFVSRV8yRDtcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuICAgIHRoaXMud2lkdGggPSAtMTtcbiAgICB0aGlzLmhlaWdodCA9IC0xO1xuICAgIHRoaXMudHlwZSA9IEdMX1RZUEVTLlVOU0lHTkVEX0JZVEU7XG4gICAgdGhpcy5pbnRlcm5hbEZvcm1hdCA9IEdMX0ZPUk1BVFMuUkdCQTtcbiAgICB0aGlzLmZvcm1hdCA9IEdMX0ZPUk1BVFMuUkdCQTtcbiAgICB0aGlzLnNhbXBsZXJUeXBlID0gMDtcbiAgfVxufVxuXG5leHBvcnQgeyBHbFRleHR1cmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsVGV4dHVyZS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGdsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZSA9IHtcbiAgaWQ6IFwiYnVmZmVyXCIsXG4gIHVwbG9hZChzb3VyY2UsIGdsVGV4dHVyZSwgZ2wpIHtcbiAgICBpZiAoZ2xUZXh0dXJlLndpZHRoID09PSBzb3VyY2Uud2lkdGggfHwgZ2xUZXh0dXJlLmhlaWdodCA9PT0gc291cmNlLmhlaWdodCkge1xuICAgICAgZ2wudGV4U3ViSW1hZ2UyRChcbiAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgc291cmNlLndpZHRoLFxuICAgICAgICBzb3VyY2UuaGVpZ2h0LFxuICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgc291cmNlLnJlc291cmNlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICBnbFRleHR1cmUudGFyZ2V0LFxuICAgICAgICAwLFxuICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgIHNvdXJjZS53aWR0aCxcbiAgICAgICAgc291cmNlLmhlaWdodCxcbiAgICAgICAgMCxcbiAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgIHNvdXJjZS5yZXNvdXJjZVxuICAgICAgKTtcbiAgICB9XG4gICAgZ2xUZXh0dXJlLndpZHRoID0gc291cmNlLndpZHRoO1xuICAgIGdsVGV4dHVyZS5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuICB9XG59O1xuXG5leHBvcnQgeyBnbFVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGNvbXByZXNzZWRGb3JtYXRNYXAgPSB7XG4gIFwiYmMxLXJnYmEtdW5vcm1cIjogdHJ1ZSxcbiAgXCJiYzEtcmdiYS11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYmMyLXJnYmEtdW5vcm1cIjogdHJ1ZSxcbiAgXCJiYzItcmdiYS11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYmMzLXJnYmEtdW5vcm1cIjogdHJ1ZSxcbiAgXCJiYzMtcmdiYS11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYmM0LXItdW5vcm1cIjogdHJ1ZSxcbiAgXCJiYzQtci1zbm9ybVwiOiB0cnVlLFxuICBcImJjNS1yZy11bm9ybVwiOiB0cnVlLFxuICBcImJjNS1yZy1zbm9ybVwiOiB0cnVlLFxuICBcImJjNmgtcmdiLXVmbG9hdFwiOiB0cnVlLFxuICBcImJjNmgtcmdiLWZsb2F0XCI6IHRydWUsXG4gIFwiYmM3LXJnYmEtdW5vcm1cIjogdHJ1ZSxcbiAgXCJiYzctcmdiYS11bm9ybS1zcmdiXCI6IHRydWUsXG4gIC8vIEVUQzIgY29tcHJlc3NlZCBmb3JtYXRzIHVzYWJsZSBpZiBcInRleHR1cmUtY29tcHJlc3Npb24tZXRjMlwiIGlzIGJvdGhcbiAgLy8gc3VwcG9ydGVkIGJ5IHRoZSBkZXZpY2UvdXNlciBhZ2VudCBhbmQgZW5hYmxlZCBpbiByZXF1ZXN0RGV2aWNlLlxuICBcImV0YzItcmdiOHVub3JtXCI6IHRydWUsXG4gIFwiZXRjMi1yZ2I4dW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImV0YzItcmdiOGExdW5vcm1cIjogdHJ1ZSxcbiAgXCJldGMyLXJnYjhhMXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJldGMyLXJnYmE4dW5vcm1cIjogdHJ1ZSxcbiAgXCJldGMyLXJnYmE4dW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImVhYy1yMTF1bm9ybVwiOiB0cnVlLFxuICBcImVhYy1yMTFzbm9ybVwiOiB0cnVlLFxuICBcImVhYy1yZzExdW5vcm1cIjogdHJ1ZSxcbiAgXCJlYWMtcmcxMXNub3JtXCI6IHRydWUsXG4gIC8vIEFTVEMgY29tcHJlc3NlZCBmb3JtYXRzIHVzYWJsZSBpZiBcInRleHR1cmUtY29tcHJlc3Npb24tYXN0Y1wiIGlzIGJvdGhcbiAgLy8gc3VwcG9ydGVkIGJ5IHRoZSBkZXZpY2UvdXNlciBhZ2VudCBhbmQgZW5hYmxlZCBpbiByZXF1ZXN0RGV2aWNlLlxuICBcImFzdGMtNHg0LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy00eDQtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtNXg0LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy01eDQtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtNXg1LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy01eDUtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtNng1LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy02eDUtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtNng2LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy02eDYtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtOHg1LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy04eDUtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtOHg2LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy04eDYtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtOHg4LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy04eDgtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtMTB4NS11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtMTB4NS11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy0xMHg2LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy0xMHg2LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTEweDgtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTEweDgtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtMTB4MTAtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTEweDEwLXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTEyeDEwLXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy0xMngxMC11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy0xMngxMi11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtMTJ4MTItdW5vcm0tc3JnYlwiOiB0cnVlXG59O1xuY29uc3QgZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlID0ge1xuICBpZDogXCJjb21wcmVzc2VkXCIsXG4gIHVwbG9hZChzb3VyY2UsIGdsVGV4dHVyZSwgZ2wpIHtcbiAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfQUxJR05NRU5ULCA0KTtcbiAgICBsZXQgbWlwV2lkdGggPSBzb3VyY2UucGl4ZWxXaWR0aDtcbiAgICBsZXQgbWlwSGVpZ2h0ID0gc291cmNlLnBpeGVsSGVpZ2h0O1xuICAgIGNvbnN0IGNvbXByZXNzZWQgPSAhIWNvbXByZXNzZWRGb3JtYXRNYXBbc291cmNlLmZvcm1hdF07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UucmVzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxldmVsQnVmZmVyID0gc291cmNlLnJlc291cmNlW2ldO1xuICAgICAgaWYgKGNvbXByZXNzZWQpIHtcbiAgICAgICAgZ2wuY29tcHJlc3NlZFRleEltYWdlMkQoXG4gICAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICBtaXBXaWR0aCxcbiAgICAgICAgICBtaXBIZWlnaHQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICBsZXZlbEJ1ZmZlclxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICAgIGksXG4gICAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICAgIG1pcFdpZHRoLFxuICAgICAgICAgIG1pcEhlaWdodCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgbGV2ZWxCdWZmZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG1pcFdpZHRoID0gTWF0aC5tYXgobWlwV2lkdGggPj4gMSwgMSk7XG4gICAgICBtaXBIZWlnaHQgPSBNYXRoLm1heChtaXBIZWlnaHQgPj4gMSwgMSk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgeyBnbFVwbG9hZENvbXByZXNzZWRUZXh0dXJlUmVzb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsVXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGdsVXBsb2FkSW1hZ2VSZXNvdXJjZSA9IHtcbiAgaWQ6IFwiaW1hZ2VcIixcbiAgdXBsb2FkKHNvdXJjZSwgZ2xUZXh0dXJlLCBnbCwgd2ViR0xWZXJzaW9uKSB7XG4gICAgY29uc3QgcHJlbXVsdGlwbGllZEFscGhhID0gc291cmNlLmFscGhhTW9kZSA9PT0gXCJwcmVtdWx0aXBseS1hbHBoYS1vbi11cGxvYWRcIjtcbiAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHByZW11bHRpcGxpZWRBbHBoYSk7XG4gICAgY29uc3QgZ2xXaWR0aCA9IGdsVGV4dHVyZS53aWR0aDtcbiAgICBjb25zdCBnbEhlaWdodCA9IGdsVGV4dHVyZS5oZWlnaHQ7XG4gICAgY29uc3QgdGV4dHVyZVdpZHRoID0gc291cmNlLnBpeGVsV2lkdGg7XG4gICAgY29uc3QgdGV4dHVyZUhlaWdodCA9IHNvdXJjZS5waXhlbEhlaWdodDtcbiAgICBjb25zdCByZXNvdXJjZVdpZHRoID0gc291cmNlLnJlc291cmNlV2lkdGg7XG4gICAgY29uc3QgcmVzb3VyY2VIZWlnaHQgPSBzb3VyY2UucmVzb3VyY2VIZWlnaHQ7XG4gICAgaWYgKHJlc291cmNlV2lkdGggPCB0ZXh0dXJlV2lkdGggfHwgcmVzb3VyY2VIZWlnaHQgPCB0ZXh0dXJlSGVpZ2h0KSB7XG4gICAgICBpZiAoZ2xXaWR0aCAhPT0gdGV4dHVyZVdpZHRoIHx8IGdsSGVpZ2h0ICE9PSB0ZXh0dXJlSGVpZ2h0KSB7XG4gICAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgICAgZ2xUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICB0ZXh0dXJlV2lkdGgsXG4gICAgICAgICAgdGV4dHVyZUhlaWdodCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHdlYkdMVmVyc2lvbiA9PT0gMikge1xuICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKFxuICAgICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgcmVzb3VyY2VXaWR0aCxcbiAgICAgICAgICByZXNvdXJjZUhlaWdodCxcbiAgICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICAgIHNvdXJjZS5yZXNvdXJjZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2wudGV4U3ViSW1hZ2UyRChcbiAgICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgc291cmNlLnJlc291cmNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChnbFdpZHRoID09PSB0ZXh0dXJlV2lkdGggfHwgZ2xIZWlnaHQgPT09IHRleHR1cmVIZWlnaHQpIHtcbiAgICAgIGdsLnRleFN1YkltYWdlMkQoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICBzb3VyY2UucmVzb3VyY2VcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh3ZWJHTFZlcnNpb24gPT09IDIpIHtcbiAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgIGdsVGV4dHVyZS50YXJnZXQsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgdGV4dHVyZVdpZHRoLFxuICAgICAgICB0ZXh0dXJlSGVpZ2h0LFxuICAgICAgICAwLFxuICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgc291cmNlLnJlc291cmNlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICBnbFRleHR1cmUudGFyZ2V0LFxuICAgICAgICAwLFxuICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICBzb3VyY2UucmVzb3VyY2VcbiAgICAgICk7XG4gICAgfVxuICAgIGdsVGV4dHVyZS53aWR0aCA9IHRleHR1cmVXaWR0aDtcbiAgICBnbFRleHR1cmUuaGVpZ2h0ID0gdGV4dHVyZUhlaWdodDtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2xVcGxvYWRJbWFnZVJlc291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbFVwbG9hZEltYWdlUmVzb3VyY2UubWpzLm1hcFxuIiwiaW1wb3J0IHsgZ2xVcGxvYWRJbWFnZVJlc291cmNlIH0gZnJvbSAnLi9nbFVwbG9hZEltYWdlUmVzb3VyY2UubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBnbFVwbG9hZFZpZGVvUmVzb3VyY2UgPSB7XG4gIGlkOiBcInZpZGVvXCIsXG4gIHVwbG9hZChzb3VyY2UsIGdsVGV4dHVyZSwgZ2wsIHdlYkdMVmVyc2lvbikge1xuICAgIGlmICghc291cmNlLmlzVmFsaWQpIHtcbiAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgIGdsVGV4dHVyZS50YXJnZXQsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgMSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGdsVXBsb2FkSW1hZ2VSZXNvdXJjZS51cGxvYWQoc291cmNlLCBnbFRleHR1cmUsIGdsLCB3ZWJHTFZlcnNpb24pO1xuICB9XG59O1xuXG5leHBvcnQgeyBnbFVwbG9hZFZpZGVvUmVzb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsVXBsb2FkVmlkZW9SZXNvdXJjZS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHNjYWxlTW9kZVRvR2xGaWx0ZXIgPSB7XG4gIGxpbmVhcjogOTcyOSxcbiAgbmVhcmVzdDogOTcyOFxufTtcbmNvbnN0IG1pcG1hcFNjYWxlTW9kZVRvR2xGaWx0ZXIgPSB7XG4gIGxpbmVhcjoge1xuICAgIGxpbmVhcjogOTk4NyxcbiAgICBuZWFyZXN0OiA5OTg1XG4gIH0sXG4gIG5lYXJlc3Q6IHtcbiAgICBsaW5lYXI6IDk5ODYsXG4gICAgbmVhcmVzdDogOTk4NFxuICB9XG59O1xuY29uc3Qgd3JhcE1vZGVUb0dsQWRkcmVzcyA9IHtcbiAgXCJjbGFtcC10by1lZGdlXCI6IDMzMDcxLFxuICByZXBlYXQ6IDEwNDk3LFxuICBcIm1pcnJvci1yZXBlYXRcIjogMzM2NDhcbn07XG5jb25zdCBjb21wYXJlTW9kZVRvR2xDb21wYXJlID0ge1xuICBuZXZlcjogNTEyLFxuICBsZXNzOiA1MTMsXG4gIGVxdWFsOiA1MTQsXG4gIFwibGVzcy1lcXVhbFwiOiA1MTUsXG4gIGdyZWF0ZXI6IDUxNixcbiAgXCJub3QtZXF1YWxcIjogNTE3LFxuICBcImdyZWF0ZXItZXF1YWxcIjogNTE4LFxuICBhbHdheXM6IDUxOVxufTtcblxuZXhwb3J0IHsgY29tcGFyZU1vZGVUb0dsQ29tcGFyZSwgbWlwbWFwU2NhbGVNb2RlVG9HbEZpbHRlciwgc2NhbGVNb2RlVG9HbEZpbHRlciwgd3JhcE1vZGVUb0dsQWRkcmVzcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGl4aVRvR2xNYXBzLm1qcy5tYXBcbiIsImltcG9ydCB7IHdyYXBNb2RlVG9HbEFkZHJlc3MsIHNjYWxlTW9kZVRvR2xGaWx0ZXIsIG1pcG1hcFNjYWxlTW9kZVRvR2xGaWx0ZXIsIGNvbXBhcmVNb2RlVG9HbENvbXBhcmUgfSBmcm9tICcuL3BpeGlUb0dsTWFwcy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGFwcGx5U3R5bGVQYXJhbXMoc3R5bGUsIGdsLCBtaXBtYXBzLCBhbmlzb3Ryb3BpY0V4dCwgZ2xGdW5jdGlvbk5hbWUsIGZpcnN0UGFyYW0sIGZvcmNlQ2xhbXAsIGZpcnN0Q3JlYXRpb24pIHtcbiAgY29uc3QgY2FzdFBhcmFtID0gZmlyc3RQYXJhbTtcbiAgaWYgKCFmaXJzdENyZWF0aW9uIHx8IHN0eWxlLmFkZHJlc3NNb2RlVSAhPT0gXCJyZXBlYXRcIiB8fCBzdHlsZS5hZGRyZXNzTW9kZVYgIT09IFwicmVwZWF0XCIgfHwgc3R5bGUuYWRkcmVzc01vZGVXICE9PSBcInJlcGVhdFwiKSB7XG4gICAgY29uc3Qgd3JhcE1vZGVTID0gd3JhcE1vZGVUb0dsQWRkcmVzc1tmb3JjZUNsYW1wID8gXCJjbGFtcC10by1lZGdlXCIgOiBzdHlsZS5hZGRyZXNzTW9kZVVdO1xuICAgIGNvbnN0IHdyYXBNb2RlVCA9IHdyYXBNb2RlVG9HbEFkZHJlc3NbZm9yY2VDbGFtcCA/IFwiY2xhbXAtdG8tZWRnZVwiIDogc3R5bGUuYWRkcmVzc01vZGVWXTtcbiAgICBjb25zdCB3cmFwTW9kZVIgPSB3cmFwTW9kZVRvR2xBZGRyZXNzW2ZvcmNlQ2xhbXAgPyBcImNsYW1wLXRvLWVkZ2VcIiA6IHN0eWxlLmFkZHJlc3NNb2RlV107XG4gICAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgZ2wuVEVYVFVSRV9XUkFQX1MsIHdyYXBNb2RlUyk7XG4gICAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgZ2wuVEVYVFVSRV9XUkFQX1QsIHdyYXBNb2RlVCk7XG4gICAgaWYgKGdsLlRFWFRVUkVfV1JBUF9SKVxuICAgICAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgZ2wuVEVYVFVSRV9XUkFQX1IsIHdyYXBNb2RlUik7XG4gIH1cbiAgaWYgKCFmaXJzdENyZWF0aW9uIHx8IHN0eWxlLm1hZ0ZpbHRlciAhPT0gXCJsaW5lYXJcIikge1xuICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgc2NhbGVNb2RlVG9HbEZpbHRlcltzdHlsZS5tYWdGaWx0ZXJdKTtcbiAgfVxuICBpZiAobWlwbWFwcykge1xuICAgIGlmICghZmlyc3RDcmVhdGlvbiB8fCBzdHlsZS5taXBtYXBGaWx0ZXIgIT09IFwibGluZWFyXCIpIHtcbiAgICAgIGNvbnN0IGdsRmlsdGVyTW9kZSA9IG1pcG1hcFNjYWxlTW9kZVRvR2xGaWx0ZXJbc3R5bGUubWluRmlsdGVyXVtzdHlsZS5taXBtYXBGaWx0ZXJdO1xuICAgICAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbEZpbHRlck1vZGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBnbFtnbEZ1bmN0aW9uTmFtZV0oY2FzdFBhcmFtLCBnbC5URVhUVVJFX01JTl9GSUxURVIsIHNjYWxlTW9kZVRvR2xGaWx0ZXJbc3R5bGUubWluRmlsdGVyXSk7XG4gIH1cbiAgaWYgKGFuaXNvdHJvcGljRXh0ICYmIHN0eWxlLm1heEFuaXNvdHJvcHkgPiAxKSB7XG4gICAgY29uc3QgbGV2ZWwgPSBNYXRoLm1pbihzdHlsZS5tYXhBbmlzb3Ryb3B5LCBnbC5nZXRQYXJhbWV0ZXIoYW5pc290cm9waWNFeHQuTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKSk7XG4gICAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgYW5pc290cm9waWNFeHQuVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIGxldmVsKTtcbiAgfVxuICBpZiAoc3R5bGUuY29tcGFyZSkge1xuICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGdsLlRFWFRVUkVfQ09NUEFSRV9GVU5DLCBjb21wYXJlTW9kZVRvR2xDb21wYXJlW3N0eWxlLmNvbXBhcmVdKTtcbiAgfVxufVxuXG5leHBvcnQgeyBhcHBseVN0eWxlUGFyYW1zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHBseVN0eWxlUGFyYW1zLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5pbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgR2xUZXh0dXJlIH0gZnJvbSAnLi9HbFRleHR1cmUubWpzJztcbmltcG9ydCB7IGdsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZSB9IGZyb20gJy4vdXBsb2FkZXJzL2dsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZS5tanMnO1xuaW1wb3J0IHsgZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlIH0gZnJvbSAnLi91cGxvYWRlcnMvZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLm1qcyc7XG5pbXBvcnQgeyBnbFVwbG9hZEltYWdlUmVzb3VyY2UgfSBmcm9tICcuL3VwbG9hZGVycy9nbFVwbG9hZEltYWdlUmVzb3VyY2UubWpzJztcbmltcG9ydCB7IGdsVXBsb2FkVmlkZW9SZXNvdXJjZSB9IGZyb20gJy4vdXBsb2FkZXJzL2dsVXBsb2FkVmlkZW9SZXNvdXJjZS5tanMnO1xuaW1wb3J0IHsgYXBwbHlTdHlsZVBhcmFtcyB9IGZyb20gJy4vdXRpbHMvYXBwbHlTdHlsZVBhcmFtcy5tanMnO1xuaW1wb3J0IHsgbWFwRm9ybWF0VG9HbEZvcm1hdCB9IGZyb20gJy4vdXRpbHMvbWFwRm9ybWF0VG9HbEZvcm1hdC5tanMnO1xuaW1wb3J0IHsgbWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0IH0gZnJvbSAnLi91dGlscy9tYXBGb3JtYXRUb0dsSW50ZXJuYWxGb3JtYXQubWpzJztcbmltcG9ydCB7IG1hcEZvcm1hdFRvR2xUeXBlIH0gZnJvbSAnLi91dGlscy9tYXBGb3JtYXRUb0dsVHlwZS5tanMnO1xuaW1wb3J0ICcuL3V0aWxzL3VucHJlbXVsdGlwbHlBbHBoYS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IEJZVEVTX1BFUl9QSVhFTCA9IDQ7XG5jbGFzcyBHbFRleHR1cmVTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMubWFuYWdlZFRleHR1cmVzID0gW107XG4gICAgdGhpcy5fZ2xUZXh0dXJlcyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2dsU2FtcGxlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ib3VuZFRleHR1cmVzID0gW107XG4gICAgdGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uID0gLTE7XG4gICAgdGhpcy5fYm91bmRTYW1wbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3VwbG9hZHMgPSB7XG4gICAgICBpbWFnZTogZ2xVcGxvYWRJbWFnZVJlc291cmNlLFxuICAgICAgYnVmZmVyOiBnbFVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UsXG4gICAgICB2aWRlbzogZ2xVcGxvYWRWaWRlb1Jlc291cmNlLFxuICAgICAgY29tcHJlc3NlZDogZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlXG4gICAgfTtcbiAgICAvLyBUT0RPIC0gc2VwYXJhdGUgc2FtcGxlcnMgd2lsbCBiZSBhIGNvb2wgdGhpbmcgdG8gYWRkLCBidXQgbm90IHJpZ2h0IG5vdyFcbiAgICB0aGlzLl91c2VTZXBhcmF0ZVNhbXBsZXJzID0gZmFsc2U7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKGdsKSB7XG4gICAgdGhpcy5fZ2wgPSBnbDtcbiAgICBpZiAoIXRoaXMuX21hcEZvcm1hdFRvSW50ZXJuYWxGb3JtYXQpIHtcbiAgICAgIHRoaXMuX21hcEZvcm1hdFRvSW50ZXJuYWxGb3JtYXQgPSBtYXBGb3JtYXRUb0dsSW50ZXJuYWxGb3JtYXQoZ2wsIHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucyk7XG4gICAgICB0aGlzLl9tYXBGb3JtYXRUb1R5cGUgPSBtYXBGb3JtYXRUb0dsVHlwZShnbCk7XG4gICAgICB0aGlzLl9tYXBGb3JtYXRUb0Zvcm1hdCA9IG1hcEZvcm1hdFRvR2xGb3JtYXQoZ2wpO1xuICAgIH1cbiAgICB0aGlzLl9nbFRleHR1cmVzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZ2xTYW1wbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2JvdW5kU2FtcGxlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHRoaXMuYmluZChUZXh0dXJlLkVNUFRZLCBpKTtcbiAgICB9XG4gIH1cbiAgaW5pdFNvdXJjZShzb3VyY2UpIHtcbiAgICB0aGlzLmJpbmQoc291cmNlKTtcbiAgfVxuICBiaW5kKHRleHR1cmUsIGxvY2F0aW9uID0gMCkge1xuICAgIGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuICAgIGlmICh0ZXh0dXJlKSB7XG4gICAgICB0aGlzLmJpbmRTb3VyY2Uoc291cmNlLCBsb2NhdGlvbik7XG4gICAgICBpZiAodGhpcy5fdXNlU2VwYXJhdGVTYW1wbGVycykge1xuICAgICAgICB0aGlzLl9iaW5kU2FtcGxlcihzb3VyY2Uuc3R5bGUsIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5iaW5kU291cmNlKG51bGwsIGxvY2F0aW9uKTtcbiAgICAgIGlmICh0aGlzLl91c2VTZXBhcmF0ZVNhbXBsZXJzKSB7XG4gICAgICAgIHRoaXMuX2JpbmRTYW1wbGVyKG51bGwsIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYmluZFNvdXJjZShzb3VyY2UsIGxvY2F0aW9uID0gMCkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgc291cmNlLl90b3VjaGVkID0gdGhpcy5fcmVuZGVyZXIudGV4dHVyZUdDLmNvdW50O1xuICAgIGlmICh0aGlzLl9ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSAhPT0gc291cmNlKSB7XG4gICAgICB0aGlzLl9ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSA9IHNvdXJjZTtcbiAgICAgIHRoaXMuX2FjdGl2YXRlTG9jYXRpb24obG9jYXRpb24pO1xuICAgICAgc291cmNlID0gc291cmNlIHx8IFRleHR1cmUuRU1QVFkuc291cmNlO1xuICAgICAgY29uc3QgZ2xUZXh0dXJlID0gdGhpcy5nZXRHbFNvdXJjZShzb3VyY2UpO1xuICAgICAgZ2wuYmluZFRleHR1cmUoZ2xUZXh0dXJlLnRhcmdldCwgZ2xUZXh0dXJlLnRleHR1cmUpO1xuICAgIH1cbiAgfVxuICBfYmluZFNhbXBsZXIoc3R5bGUsIGxvY2F0aW9uID0gMCkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgaWYgKCFzdHlsZSkge1xuICAgICAgdGhpcy5fYm91bmRTYW1wbGVyc1tsb2NhdGlvbl0gPSBudWxsO1xuICAgICAgZ2wuYmluZFNhbXBsZXIobG9jYXRpb24sIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzYW1wbGVyID0gdGhpcy5fZ2V0R2xTYW1wbGVyKHN0eWxlKTtcbiAgICBpZiAodGhpcy5fYm91bmRTYW1wbGVyc1tsb2NhdGlvbl0gIT09IHNhbXBsZXIpIHtcbiAgICAgIHRoaXMuX2JvdW5kU2FtcGxlcnNbbG9jYXRpb25dID0gc2FtcGxlcjtcbiAgICAgIGdsLmJpbmRTYW1wbGVyKGxvY2F0aW9uLCBzYW1wbGVyKTtcbiAgICB9XG4gIH1cbiAgdW5iaW5kKHRleHR1cmUpIHtcbiAgICBjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcbiAgICBjb25zdCBib3VuZFRleHR1cmVzID0gdGhpcy5fYm91bmRUZXh0dXJlcztcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm91bmRUZXh0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGJvdW5kVGV4dHVyZXNbaV0gPT09IHNvdXJjZSkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZUxvY2F0aW9uKGkpO1xuICAgICAgICBjb25zdCBnbFRleHR1cmUgPSB0aGlzLmdldEdsU291cmNlKHNvdXJjZSk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsVGV4dHVyZS50YXJnZXQsIG51bGwpO1xuICAgICAgICBib3VuZFRleHR1cmVzW2ldID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2FjdGl2YXRlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uICE9PSBsb2NhdGlvbikge1xuICAgICAgdGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICB0aGlzLl9nbC5hY3RpdmVUZXh0dXJlKHRoaXMuX2dsLlRFWFRVUkUwICsgbG9jYXRpb24pO1xuICAgIH1cbiAgfVxuICBfaW5pdFNvdXJjZShzb3VyY2UpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IGdsVGV4dHVyZSA9IG5ldyBHbFRleHR1cmUoZ2wuY3JlYXRlVGV4dHVyZSgpKTtcbiAgICBnbFRleHR1cmUudHlwZSA9IHRoaXMuX21hcEZvcm1hdFRvVHlwZVtzb3VyY2UuZm9ybWF0XTtcbiAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQgPSB0aGlzLl9tYXBGb3JtYXRUb0ludGVybmFsRm9ybWF0W3NvdXJjZS5mb3JtYXRdO1xuICAgIGdsVGV4dHVyZS5mb3JtYXQgPSB0aGlzLl9tYXBGb3JtYXRUb0Zvcm1hdFtzb3VyY2UuZm9ybWF0XTtcbiAgICBpZiAoc291cmNlLmF1dG9HZW5lcmF0ZU1pcG1hcHMgJiYgKHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMubm9uUG93T2YybWlwbWFwcyB8fCBzb3VyY2UuaXNQb3dlck9mVHdvKSkge1xuICAgICAgY29uc3QgYmlnZ2VzdERpbWVuc2lvbiA9IE1hdGgubWF4KHNvdXJjZS53aWR0aCwgc291cmNlLmhlaWdodCk7XG4gICAgICBzb3VyY2UubWlwTGV2ZWxDb3VudCA9IE1hdGguZmxvb3IoTWF0aC5sb2cyKGJpZ2dlc3REaW1lbnNpb24pKSArIDE7XG4gICAgfVxuICAgIHRoaXMuX2dsVGV4dHVyZXNbc291cmNlLnVpZF0gPSBnbFRleHR1cmU7XG4gICAgaWYgKCF0aGlzLm1hbmFnZWRUZXh0dXJlcy5pbmNsdWRlcyhzb3VyY2UpKSB7XG4gICAgICBzb3VyY2Uub24oXCJ1cGRhdGVcIiwgdGhpcy5vblNvdXJjZVVwZGF0ZSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJyZXNpemVcIiwgdGhpcy5vblNvdXJjZVVwZGF0ZSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJzdHlsZUNoYW5nZVwiLCB0aGlzLm9uU3R5bGVDaGFuZ2UsIHRoaXMpO1xuICAgICAgc291cmNlLm9uKFwiZGVzdHJveVwiLCB0aGlzLm9uU291cmNlRGVzdHJveSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJ1bmxvYWRcIiwgdGhpcy5vblNvdXJjZVVubG9hZCwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJ1cGRhdGVNaXBtYXBzXCIsIHRoaXMub25VcGRhdGVNaXBtYXBzLCB0aGlzKTtcbiAgICAgIHRoaXMubWFuYWdlZFRleHR1cmVzLnB1c2goc291cmNlKTtcbiAgICB9XG4gICAgdGhpcy5vblNvdXJjZVVwZGF0ZShzb3VyY2UpO1xuICAgIHRoaXMudXBkYXRlU3R5bGUoc291cmNlLCBmYWxzZSk7XG4gICAgcmV0dXJuIGdsVGV4dHVyZTtcbiAgfVxuICBvblN0eWxlQ2hhbmdlKHNvdXJjZSkge1xuICAgIHRoaXMudXBkYXRlU3R5bGUoc291cmNlLCBmYWxzZSk7XG4gIH1cbiAgdXBkYXRlU3R5bGUoc291cmNlLCBmaXJzdENyZWF0aW9uKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCBnbFRleHR1cmUgPSB0aGlzLmdldEdsU291cmNlKHNvdXJjZSk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgZ2xUZXh0dXJlLnRleHR1cmUpO1xuICAgIHRoaXMuX2JvdW5kVGV4dHVyZXNbdGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uXSA9IHNvdXJjZTtcbiAgICBhcHBseVN0eWxlUGFyYW1zKFxuICAgICAgc291cmNlLnN0eWxlLFxuICAgICAgZ2wsXG4gICAgICBzb3VyY2UubWlwTGV2ZWxDb3VudCA+IDEsXG4gICAgICB0aGlzLl9yZW5kZXJlci5jb250ZXh0LmV4dGVuc2lvbnMuYW5pc290cm9waWNGaWx0ZXJpbmcsXG4gICAgICBcInRleFBhcmFtZXRlcmlcIixcbiAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAvLyB3aWxsIGZvcmNlIGEgY2xhbXAgdG8gZWRnZSBpZiB0aGUgdGV4dHVyZSBpcyBub3QgYSBwb3dlciBvZiB0d29cbiAgICAgICF0aGlzLl9yZW5kZXJlci5jb250ZXh0LnN1cHBvcnRzLm5vblBvd09mMndyYXBwaW5nICYmICFzb3VyY2UuaXNQb3dlck9mVHdvLFxuICAgICAgZmlyc3RDcmVhdGlvblxuICAgICk7XG4gIH1cbiAgb25Tb3VyY2VVbmxvYWQoc291cmNlKSB7XG4gICAgY29uc3QgZ2xUZXh0dXJlID0gdGhpcy5fZ2xUZXh0dXJlc1tzb3VyY2UudWlkXTtcbiAgICBpZiAoIWdsVGV4dHVyZSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLnVuYmluZChzb3VyY2UpO1xuICAgIHRoaXMuX2dsVGV4dHVyZXNbc291cmNlLnVpZF0gPSBudWxsO1xuICAgIHRoaXMuX2dsLmRlbGV0ZVRleHR1cmUoZ2xUZXh0dXJlLnRleHR1cmUpO1xuICB9XG4gIG9uU291cmNlVXBkYXRlKHNvdXJjZSkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgY29uc3QgZ2xUZXh0dXJlID0gdGhpcy5nZXRHbFNvdXJjZShzb3VyY2UpO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGdsVGV4dHVyZS50ZXh0dXJlKTtcbiAgICB0aGlzLl9ib3VuZFRleHR1cmVzW3RoaXMuX2FjdGl2ZVRleHR1cmVMb2NhdGlvbl0gPSBzb3VyY2U7XG4gICAgaWYgKHRoaXMuX3VwbG9hZHNbc291cmNlLnVwbG9hZE1ldGhvZElkXSkge1xuICAgICAgdGhpcy5fdXBsb2Fkc1tzb3VyY2UudXBsb2FkTWV0aG9kSWRdLnVwbG9hZChzb3VyY2UsIGdsVGV4dHVyZSwgZ2wsIHRoaXMuX3JlbmRlcmVyLmNvbnRleHQud2ViR0xWZXJzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBzb3VyY2UucGl4ZWxXaWR0aCwgc291cmNlLnBpeGVsSGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZS5hdXRvR2VuZXJhdGVNaXBtYXBzICYmIHNvdXJjZS5taXBMZXZlbENvdW50ID4gMSkge1xuICAgICAgdGhpcy5vblVwZGF0ZU1pcG1hcHMoc291cmNlLCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIG9uVXBkYXRlTWlwbWFwcyhzb3VyY2UsIGJpbmQgPSB0cnVlKSB7XG4gICAgaWYgKGJpbmQpXG4gICAgICB0aGlzLmJpbmRTb3VyY2Uoc291cmNlLCAwKTtcbiAgICBjb25zdCBnbFRleHR1cmUgPSB0aGlzLmdldEdsU291cmNlKHNvdXJjZSk7XG4gICAgdGhpcy5fZ2wuZ2VuZXJhdGVNaXBtYXAoZ2xUZXh0dXJlLnRhcmdldCk7XG4gIH1cbiAgb25Tb3VyY2VEZXN0cm95KHNvdXJjZSkge1xuICAgIHNvdXJjZS5vZmYoXCJkZXN0cm95XCIsIHRoaXMub25Tb3VyY2VEZXN0cm95LCB0aGlzKTtcbiAgICBzb3VyY2Uub2ZmKFwidXBkYXRlXCIsIHRoaXMub25Tb3VyY2VVcGRhdGUsIHRoaXMpO1xuICAgIHNvdXJjZS5vZmYoXCJyZXNpemVcIiwgdGhpcy5vblNvdXJjZVVwZGF0ZSwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInVubG9hZFwiLCB0aGlzLm9uU291cmNlVW5sb2FkLCB0aGlzKTtcbiAgICBzb3VyY2Uub2ZmKFwic3R5bGVDaGFuZ2VcIiwgdGhpcy5vblN0eWxlQ2hhbmdlLCB0aGlzKTtcbiAgICBzb3VyY2Uub2ZmKFwidXBkYXRlTWlwbWFwc1wiLCB0aGlzLm9uVXBkYXRlTWlwbWFwcywgdGhpcyk7XG4gICAgdGhpcy5tYW5hZ2VkVGV4dHVyZXMuc3BsaWNlKHRoaXMubWFuYWdlZFRleHR1cmVzLmluZGV4T2Yoc291cmNlKSwgMSk7XG4gICAgdGhpcy5vblNvdXJjZVVubG9hZChzb3VyY2UpO1xuICB9XG4gIF9pbml0U2FtcGxlcihzdHlsZSkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgY29uc3QgZ2xTYW1wbGVyID0gdGhpcy5fZ2wuY3JlYXRlU2FtcGxlcigpO1xuICAgIHRoaXMuX2dsU2FtcGxlcnNbc3R5bGUuX3Jlc291cmNlSWRdID0gZ2xTYW1wbGVyO1xuICAgIGFwcGx5U3R5bGVQYXJhbXMoXG4gICAgICBzdHlsZSxcbiAgICAgIGdsLFxuICAgICAgdGhpcy5fYm91bmRUZXh0dXJlc1t0aGlzLl9hY3RpdmVUZXh0dXJlTG9jYXRpb25dLm1pcExldmVsQ291bnQgPiAxLFxuICAgICAgdGhpcy5fcmVuZGVyZXIuY29udGV4dC5leHRlbnNpb25zLmFuaXNvdHJvcGljRmlsdGVyaW5nLFxuICAgICAgXCJzYW1wbGVyUGFyYW1ldGVyaVwiLFxuICAgICAgZ2xTYW1wbGVyLFxuICAgICAgZmFsc2UsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5fZ2xTYW1wbGVyc1tzdHlsZS5fcmVzb3VyY2VJZF07XG4gIH1cbiAgX2dldEdsU2FtcGxlcihzYW1wbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dsU2FtcGxlcnNbc2FtcGxlci5fcmVzb3VyY2VJZF0gfHwgdGhpcy5faW5pdFNhbXBsZXIoc2FtcGxlcik7XG4gIH1cbiAgZ2V0R2xTb3VyY2Uoc291cmNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dsVGV4dHVyZXNbc291cmNlLnVpZF0gfHwgdGhpcy5faW5pdFNvdXJjZShzb3VyY2UpO1xuICB9XG4gIGdlbmVyYXRlQ2FudmFzKHRleHR1cmUpIHtcbiAgICBjb25zdCB7IHBpeGVscywgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5nZXRQaXhlbHModGV4dHVyZSk7XG4gICAgY29uc3QgY2FudmFzID0gRE9NQWRhcHRlci5nZXQoKS5jcmVhdGVDYW52YXMoKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgaWYgKGN0eCkge1xuICAgICAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGltYWdlRGF0YS5kYXRhLnNldChwaXhlbHMpO1xuICAgICAgY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuICAgIH1cbiAgICByZXR1cm4gY2FudmFzO1xuICB9XG4gIGdldFBpeGVscyh0ZXh0dXJlKSB7XG4gICAgY29uc3QgcmVzb2x1dGlvbiA9IHRleHR1cmUuc291cmNlLnJlc29sdXRpb247XG4gICAgY29uc3QgZnJhbWUgPSB0ZXh0dXJlLmZyYW1lO1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoTWF0aC5yb3VuZChmcmFtZS53aWR0aCAqIHJlc29sdXRpb24pLCAxKTtcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChNYXRoLnJvdW5kKGZyYW1lLmhlaWdodCAqIHJlc29sdXRpb24pLCAxKTtcbiAgICBjb25zdCBwaXhlbHMgPSBuZXcgVWludDhBcnJheShCWVRFU19QRVJfUElYRUwgKiB3aWR0aCAqIGhlaWdodCk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCByZW5kZXJUYXJnZXQgPSByZW5kZXJlci5yZW5kZXJUYXJnZXQuZ2V0UmVuZGVyVGFyZ2V0KHRleHR1cmUpO1xuICAgIGNvbnN0IGdsUmVudGVyVGFyZ2V0ID0gcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmdldEdwdVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xuICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbFJlbnRlclRhcmdldC5yZXNvbHZlVGFyZ2V0RnJhbWVidWZmZXIpO1xuICAgIGdsLnJlYWRQaXhlbHMoXG4gICAgICBNYXRoLnJvdW5kKGZyYW1lLnggKiByZXNvbHV0aW9uKSxcbiAgICAgIE1hdGgucm91bmQoZnJhbWUueSAqIHJlc29sdXRpb24pLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBnbC5SR0JBLFxuICAgICAgZ2wuVU5TSUdORURfQllURSxcbiAgICAgIHBpeGVsc1xuICAgICk7XG4gICAgaWYgKGZhbHNlKSB7XG4gICAgICB1bnByZW11bHRpcGx5QWxwaGEocGl4ZWxzKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcGl4ZWxzOiBuZXcgVWludDhDbGFtcGVkQXJyYXkocGl4ZWxzLmJ1ZmZlciksIHdpZHRoLCBoZWlnaHQgfTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMubWFuYWdlZFRleHR1cmVzLnNsaWNlKCkuZm9yRWFjaCgoc291cmNlKSA9PiB0aGlzLm9uU291cmNlRGVzdHJveShzb3VyY2UpKTtcbiAgICB0aGlzLm1hbmFnZWRUZXh0dXJlcyA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xUZXh0dXJlU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJ0ZXh0dXJlXCJcbn07XG5cbmV4cG9ydCB7IEdsVGV4dHVyZVN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xUZXh0dXJlU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0KGdsLCBleHRlbnNpb25zKSB7XG4gIGxldCBzcmdiID0ge307XG4gIGxldCBiZ3JhOHVub3JtID0gZ2wuUkdCQTtcbiAgaWYgKCEoZ2wgaW5zdGFuY2VvZiBET01BZGFwdGVyLmdldCgpLmdldFdlYkdMUmVuZGVyaW5nQ29udGV4dCgpKSkge1xuICAgIHNyZ2IgPSB7XG4gICAgICBcInJnYmE4dW5vcm0tc3JnYlwiOiBnbC5TUkdCOF9BTFBIQTgsXG4gICAgICBcImJncmE4dW5vcm0tc3JnYlwiOiBnbC5TUkdCOF9BTFBIQThcbiAgICB9O1xuICAgIGJncmE4dW5vcm0gPSBnbC5SR0JBODtcbiAgfSBlbHNlIGlmIChleHRlbnNpb25zLnNyZ2IpIHtcbiAgICBzcmdiID0ge1xuICAgICAgXCJyZ2JhOHVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5zcmdiLlNSR0I4X0FMUEhBOF9FWFQsXG4gICAgICBcImJncmE4dW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnNyZ2IuU1JHQjhfQUxQSEE4X0VYVFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAvLyA4LWJpdCBmb3JtYXRzXG4gICAgcjh1bm9ybTogZ2wuUjgsXG4gICAgcjhzbm9ybTogZ2wuUjhfU05PUk0sXG4gICAgcjh1aW50OiBnbC5SOFVJLFxuICAgIHI4c2ludDogZ2wuUjhJLFxuICAgIC8vIDE2LWJpdCBmb3JtYXRzXG4gICAgcjE2dWludDogZ2wuUjE2VUksXG4gICAgcjE2c2ludDogZ2wuUjE2SSxcbiAgICByMTZmbG9hdDogZ2wuUjE2RixcbiAgICByZzh1bm9ybTogZ2wuUkc4LFxuICAgIHJnOHNub3JtOiBnbC5SRzhfU05PUk0sXG4gICAgcmc4dWludDogZ2wuUkc4VUksXG4gICAgcmc4c2ludDogZ2wuUkc4SSxcbiAgICAvLyAzMi1iaXQgZm9ybWF0c1xuICAgIHIzMnVpbnQ6IGdsLlIzMlVJLFxuICAgIHIzMnNpbnQ6IGdsLlIzMkksXG4gICAgcjMyZmxvYXQ6IGdsLlIzMkYsXG4gICAgcmcxNnVpbnQ6IGdsLlJHMTZVSSxcbiAgICByZzE2c2ludDogZ2wuUkcxNkksXG4gICAgcmcxNmZsb2F0OiBnbC5SRzE2RixcbiAgICByZ2JhOHVub3JtOiBnbC5SR0JBLFxuICAgIC4uLnNyZ2IsXG4gICAgLy8gUGFja2VkIDMyLWJpdCBmb3JtYXRzXG4gICAgcmdiYThzbm9ybTogZ2wuUkdCQThfU05PUk0sXG4gICAgcmdiYTh1aW50OiBnbC5SR0JBOFVJLFxuICAgIHJnYmE4c2ludDogZ2wuUkdCQThJLFxuICAgIGJncmE4dW5vcm0sXG4gICAgcmdiOWU1dWZsb2F0OiBnbC5SR0I5X0U1LFxuICAgIHJnYjEwYTJ1bm9ybTogZ2wuUkdCMTBfQTIsXG4gICAgcmcxMWIxMHVmbG9hdDogZ2wuUjExRl9HMTFGX0IxMEYsXG4gICAgLy8gNjQtYml0IGZvcm1hdHNcbiAgICByZzMydWludDogZ2wuUkczMlVJLFxuICAgIHJnMzJzaW50OiBnbC5SRzMySSxcbiAgICByZzMyZmxvYXQ6IGdsLlJHMzJGLFxuICAgIHJnYmExNnVpbnQ6IGdsLlJHQkExNlVJLFxuICAgIHJnYmExNnNpbnQ6IGdsLlJHQkExNkksXG4gICAgcmdiYTE2ZmxvYXQ6IGdsLlJHQkExNkYsXG4gICAgLy8gMTI4LWJpdCBmb3JtYXRzXG4gICAgcmdiYTMydWludDogZ2wuUkdCQTMyVUksXG4gICAgcmdiYTMyc2ludDogZ2wuUkdCQTMySSxcbiAgICByZ2JhMzJmbG9hdDogZ2wuUkdCQTMyRixcbiAgICAvLyBEZXB0aC9zdGVuY2lsIGZvcm1hdHNcbiAgICBzdGVuY2lsODogZ2wuU1RFTkNJTF9JTkRFWDgsXG4gICAgZGVwdGgxNnVub3JtOiBnbC5ERVBUSF9DT01QT05FTlQxNixcbiAgICBkZXB0aDI0cGx1czogZ2wuREVQVEhfQ09NUE9ORU5UMjQsXG4gICAgXCJkZXB0aDI0cGx1cy1zdGVuY2lsOFwiOiBnbC5ERVBUSDI0X1NURU5DSUw4LFxuICAgIGRlcHRoMzJmbG9hdDogZ2wuREVQVEhfQ09NUE9ORU5UMzJGLFxuICAgIFwiZGVwdGgzMmZsb2F0LXN0ZW5jaWw4XCI6IGdsLkRFUFRIMzJGX1NURU5DSUw4LFxuICAgIC8vIENvbXByZXNzZWQgZm9ybWF0c1xuICAgIC4uLmV4dGVuc2lvbnMuczN0YyA/IHtcbiAgICAgIFwiYmMxLXJnYmEtdW5vcm1cIjogZXh0ZW5zaW9ucy5zM3RjLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhULFxuICAgICAgXCJiYzItcmdiYS11bm9ybVwiOiBleHRlbnNpb25zLnMzdGMuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQsXG4gICAgICBcImJjMy1yZ2JhLXVub3JtXCI6IGV4dGVuc2lvbnMuczN0Yy5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVFxuICAgIH0gOiB7fSxcbiAgICAuLi5leHRlbnNpb25zLnMzdGNfc1JHQiA/IHtcbiAgICAgIFwiYmMxLXJnYmEtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnMzdGNfc1JHQi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQxX0VYVCxcbiAgICAgIFwiYmMyLXJnYmEtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnMzdGNfc1JHQi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQzX0VYVCxcbiAgICAgIFwiYmMzLXJnYmEtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnMzdGNfc1JHQi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVFxuICAgIH0gOiB7fSxcbiAgICAuLi5leHRlbnNpb25zLnJndGMgPyB7XG4gICAgICBcImJjNC1yLXVub3JtXCI6IGV4dGVuc2lvbnMucmd0Yy5DT01QUkVTU0VEX1JFRF9SR1RDMV9FWFQsXG4gICAgICBcImJjNC1yLXNub3JtXCI6IGV4dGVuc2lvbnMucmd0Yy5DT01QUkVTU0VEX1NJR05FRF9SRURfUkdUQzFfRVhULFxuICAgICAgXCJiYzUtcmctdW5vcm1cIjogZXh0ZW5zaW9ucy5yZ3RjLkNPTVBSRVNTRURfUkVEX0dSRUVOX1JHVEMyX0VYVCxcbiAgICAgIFwiYmM1LXJnLXNub3JtXCI6IGV4dGVuc2lvbnMucmd0Yy5DT01QUkVTU0VEX1NJR05FRF9SRURfR1JFRU5fUkdUQzJfRVhUXG4gICAgfSA6IHt9LFxuICAgIC4uLmV4dGVuc2lvbnMuYnB0YyA/IHtcbiAgICAgIFwiYmM2aC1yZ2ItZmxvYXRcIjogZXh0ZW5zaW9ucy5icHRjLkNPTVBSRVNTRURfUkdCX0JQVENfU0lHTkVEX0ZMT0FUX0VYVCxcbiAgICAgIFwiYmM2aC1yZ2ItdWZsb2F0XCI6IGV4dGVuc2lvbnMuYnB0Yy5DT01QUkVTU0VEX1JHQl9CUFRDX1VOU0lHTkVEX0ZMT0FUX0VYVCxcbiAgICAgIFwiYmM3LXJnYmEtdW5vcm1cIjogZXh0ZW5zaW9ucy5icHRjLkNPTVBSRVNTRURfUkdCQV9CUFRDX1VOT1JNX0VYVCxcbiAgICAgIFwiYmM3LXJnYmEtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmJwdGMuQ09NUFJFU1NFRF9TUkdCX0FMUEhBX0JQVENfVU5PUk1fRVhUXG4gICAgfSA6IHt9LFxuICAgIC4uLmV4dGVuc2lvbnMuZXRjID8ge1xuICAgICAgXCJldGMyLXJnYjh1bm9ybVwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1JHQjhfRVRDMixcbiAgICAgIFwiZXRjMi1yZ2I4dW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1NSR0I4X0VUQzIsXG4gICAgICBcImV0YzItcmdiOGExdW5vcm1cIjogZXh0ZW5zaW9ucy5ldGMuQ09NUFJFU1NFRF9SR0I4X1BVTkNIVEhST1VHSF9BTFBIQTFfRVRDMixcbiAgICAgIFwiZXRjMi1yZ2I4YTF1bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuZXRjLkNPTVBSRVNTRURfU1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyLFxuICAgICAgXCJldGMyLXJnYmE4dW5vcm1cIjogZXh0ZW5zaW9ucy5ldGMuQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQyxcbiAgICAgIFwiZXRjMi1yZ2JhOHVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5ldGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfRVRDMl9FQUMsXG4gICAgICBcImVhYy1yMTF1bm9ybVwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1IxMV9FQUMsXG4gICAgICAvLyAnZWFjLXIxMXNub3JtJ1xuICAgICAgXCJlYWMtcmcxMXVub3JtXCI6IGV4dGVuc2lvbnMuZXRjLkNPTVBSRVNTRURfU0lHTkVEX1JHMTFfRUFDXG4gICAgICAvLyAnZWFjLXJnMTFzbm9ybSdcbiAgICB9IDoge30sXG4gICAgLi4uZXh0ZW5zaW9ucy5hc3RjID8ge1xuICAgICAgXCJhc3RjLTR4NC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X0tIUixcbiAgICAgIFwiYXN0Yy00eDQtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ180eDRfS0hSLFxuICAgICAgXCJhc3RjLTV4NC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUixcbiAgICAgIFwiYXN0Yy01eDQtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDRfS0hSLFxuICAgICAgXCJhc3RjLTV4NS11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg1X0tIUixcbiAgICAgIFwiYXN0Yy01eDUtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDVfS0hSLFxuICAgICAgXCJhc3RjLTZ4NS11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNng1X0tIUixcbiAgICAgIFwiYXN0Yy02eDUtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDVfS0hSLFxuICAgICAgXCJhc3RjLTZ4Ni11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUixcbiAgICAgIFwiYXN0Yy02eDYtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDZfS0hSLFxuICAgICAgXCJhc3RjLTh4NS11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg1X0tIUixcbiAgICAgIFwiYXN0Yy04eDUtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDVfS0hSLFxuICAgICAgXCJhc3RjLTh4Ni11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg2X0tIUixcbiAgICAgIFwiYXN0Yy04eDYtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDZfS0hSLFxuICAgICAgXCJhc3RjLTh4OC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUixcbiAgICAgIFwiYXN0Yy04eDgtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDhfS0hSLFxuICAgICAgXCJhc3RjLTEweDUtdW5vcm1cIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDVfS0hSLFxuICAgICAgXCJhc3RjLTEweDUtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg1X0tIUixcbiAgICAgIFwiYXN0Yy0xMHg2LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUixcbiAgICAgIFwiYXN0Yy0xMHg2LXVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4Nl9LSFIsXG4gICAgICBcImFzdGMtMTB4OC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4OF9LSFIsXG4gICAgICBcImFzdGMtMTB4OC11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDhfS0hSLFxuICAgICAgXCJhc3RjLTEweDEwLXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHgxMF9LSFIsXG4gICAgICBcImFzdGMtMTB4MTAtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHgxMF9LSFIsXG4gICAgICBcImFzdGMtMTJ4MTAtdW5vcm1cIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEwX0tIUixcbiAgICAgIFwiYXN0Yy0xMngxMC11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEwX0tIUixcbiAgICAgIFwiYXN0Yy0xMngxMi11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTJfS0hSLFxuICAgICAgXCJhc3RjLTEyeDEyLXVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfS0hSXG4gICAgfSA6IHt9XG4gIH07XG59XG5cbmV4cG9ydCB7IG1hcEZvcm1hdFRvR2xJbnRlcm5hbEZvcm1hdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFwRm9ybWF0VG9HbFR5cGUoZ2wpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyA4LWJpdCBmb3JtYXRzXG4gICAgcjh1bm9ybTogZ2wuVU5TSUdORURfQllURSxcbiAgICByOHNub3JtOiBnbC5CWVRFLFxuICAgIHI4dWludDogZ2wuVU5TSUdORURfQllURSxcbiAgICByOHNpbnQ6IGdsLkJZVEUsXG4gICAgLy8gMTYtYml0IGZvcm1hdHNcbiAgICByMTZ1aW50OiBnbC5VTlNJR05FRF9TSE9SVCxcbiAgICByMTZzaW50OiBnbC5TSE9SVCxcbiAgICByMTZmbG9hdDogZ2wuSEFMRl9GTE9BVCxcbiAgICByZzh1bm9ybTogZ2wuVU5TSUdORURfQllURSxcbiAgICByZzhzbm9ybTogZ2wuQllURSxcbiAgICByZzh1aW50OiBnbC5VTlNJR05FRF9CWVRFLFxuICAgIHJnOHNpbnQ6IGdsLkJZVEUsXG4gICAgLy8gMzItYml0IGZvcm1hdHNcbiAgICByMzJ1aW50OiBnbC5VTlNJR05FRF9JTlQsXG4gICAgcjMyc2ludDogZ2wuSU5ULFxuICAgIHIzMmZsb2F0OiBnbC5GTE9BVCxcbiAgICByZzE2dWludDogZ2wuVU5TSUdORURfU0hPUlQsXG4gICAgcmcxNnNpbnQ6IGdsLlNIT1JULFxuICAgIHJnMTZmbG9hdDogZ2wuSEFMRl9GTE9BVCxcbiAgICByZ2JhOHVub3JtOiBnbC5VTlNJR05FRF9CWVRFLFxuICAgIFwicmdiYTh1bm9ybS1zcmdiXCI6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgLy8gUGFja2VkIDMyLWJpdCBmb3JtYXRzXG4gICAgcmdiYThzbm9ybTogZ2wuQllURSxcbiAgICByZ2JhOHVpbnQ6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgcmdiYThzaW50OiBnbC5CWVRFLFxuICAgIGJncmE4dW5vcm06IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgXCJiZ3JhOHVub3JtLXNyZ2JcIjogZ2wuVU5TSUdORURfQllURSxcbiAgICByZ2I5ZTV1ZmxvYXQ6IGdsLlVOU0lHTkVEX0lOVF81XzlfOV85X1JFVixcbiAgICByZ2IxMGEydW5vcm06IGdsLlVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFVixcbiAgICByZzExYjEwdWZsb2F0OiBnbC5VTlNJR05FRF9JTlRfMTBGXzExRl8xMUZfUkVWLFxuICAgIC8vIDY0LWJpdCBmb3JtYXRzXG4gICAgcmczMnVpbnQ6IGdsLlVOU0lHTkVEX0lOVCxcbiAgICByZzMyc2ludDogZ2wuSU5ULFxuICAgIHJnMzJmbG9hdDogZ2wuRkxPQVQsXG4gICAgcmdiYTE2dWludDogZ2wuVU5TSUdORURfU0hPUlQsXG4gICAgcmdiYTE2c2ludDogZ2wuU0hPUlQsXG4gICAgcmdiYTE2ZmxvYXQ6IGdsLkhBTEZfRkxPQVQsXG4gICAgLy8gMTI4LWJpdCBmb3JtYXRzXG4gICAgcmdiYTMydWludDogZ2wuVU5TSUdORURfSU5ULFxuICAgIHJnYmEzMnNpbnQ6IGdsLklOVCxcbiAgICByZ2JhMzJmbG9hdDogZ2wuRkxPQVQsXG4gICAgLy8gRGVwdGgvc3RlbmNpbCBmb3JtYXRzXG4gICAgc3RlbmNpbDg6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgZGVwdGgxNnVub3JtOiBnbC5VTlNJR05FRF9TSE9SVCxcbiAgICBkZXB0aDI0cGx1czogZ2wuVU5TSUdORURfSU5ULFxuICAgIFwiZGVwdGgyNHBsdXMtc3RlbmNpbDhcIjogZ2wuVU5TSUdORURfSU5UXzI0XzgsXG4gICAgZGVwdGgzMmZsb2F0OiBnbC5GTE9BVCxcbiAgICBcImRlcHRoMzJmbG9hdC1zdGVuY2lsOFwiOiBnbC5GTE9BVF8zMl9VTlNJR05FRF9JTlRfMjRfOF9SRVZcbiAgfTtcbn1cblxuZXhwb3J0IHsgbWFwRm9ybWF0VG9HbFR5cGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcEZvcm1hdFRvR2xUeXBlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFwRm9ybWF0VG9HbEZvcm1hdChnbCkge1xuICByZXR1cm4ge1xuICAgIC8vIDgtYml0IGZvcm1hdHNcbiAgICByOHVub3JtOiBnbC5SRUQsXG4gICAgcjhzbm9ybTogZ2wuUkVELFxuICAgIHI4dWludDogZ2wuUkVELFxuICAgIHI4c2ludDogZ2wuUkVELFxuICAgIC8vIDE2LWJpdCBmb3JtYXRzXG4gICAgcjE2dWludDogZ2wuUkVELFxuICAgIHIxNnNpbnQ6IGdsLlJFRCxcbiAgICByMTZmbG9hdDogZ2wuUkVELFxuICAgIHJnOHVub3JtOiBnbC5SRyxcbiAgICByZzhzbm9ybTogZ2wuUkcsXG4gICAgcmc4dWludDogZ2wuUkcsXG4gICAgcmc4c2ludDogZ2wuUkcsXG4gICAgLy8gMzItYml0IGZvcm1hdHNcbiAgICByMzJ1aW50OiBnbC5SRUQsXG4gICAgcjMyc2ludDogZ2wuUkVELFxuICAgIHIzMmZsb2F0OiBnbC5SRUQsXG4gICAgcmcxNnVpbnQ6IGdsLlJHLFxuICAgIHJnMTZzaW50OiBnbC5SRyxcbiAgICByZzE2ZmxvYXQ6IGdsLlJHLFxuICAgIHJnYmE4dW5vcm06IGdsLlJHQkEsXG4gICAgXCJyZ2JhOHVub3JtLXNyZ2JcIjogZ2wuUkdCQSxcbiAgICAvLyBQYWNrZWQgMzItYml0IGZvcm1hdHNcbiAgICByZ2JhOHNub3JtOiBnbC5SR0JBLFxuICAgIHJnYmE4dWludDogZ2wuUkdCQSxcbiAgICByZ2JhOHNpbnQ6IGdsLlJHQkEsXG4gICAgYmdyYTh1bm9ybTogZ2wuUkdCQSxcbiAgICBcImJncmE4dW5vcm0tc3JnYlwiOiBnbC5SR0JBLFxuICAgIHJnYjllNXVmbG9hdDogZ2wuUkdCLFxuICAgIHJnYjEwYTJ1bm9ybTogZ2wuUkdCQSxcbiAgICByZzExYjEwdWZsb2F0OiBnbC5SR0IsXG4gICAgLy8gNjQtYml0IGZvcm1hdHNcbiAgICByZzMydWludDogZ2wuUkcsXG4gICAgcmczMnNpbnQ6IGdsLlJHLFxuICAgIHJnMzJmbG9hdDogZ2wuUkcsXG4gICAgcmdiYTE2dWludDogZ2wuUkdCQSxcbiAgICByZ2JhMTZzaW50OiBnbC5SR0JBLFxuICAgIHJnYmExNmZsb2F0OiBnbC5SR0JBLFxuICAgIC8vIDEyOC1iaXQgZm9ybWF0c1xuICAgIHJnYmEzMnVpbnQ6IGdsLlJHQkEsXG4gICAgcmdiYTMyc2ludDogZ2wuUkdCQSxcbiAgICByZ2JhMzJmbG9hdDogZ2wuUkdCQSxcbiAgICAvLyBEZXB0aC9zdGVuY2lsIGZvcm1hdHNcbiAgICBzdGVuY2lsODogZ2wuU1RFTkNJTF9JTkRFWDgsXG4gICAgZGVwdGgxNnVub3JtOiBnbC5ERVBUSF9DT01QT05FTlQsXG4gICAgZGVwdGgyNHBsdXM6IGdsLkRFUFRIX0NPTVBPTkVOVCxcbiAgICBcImRlcHRoMjRwbHVzLXN0ZW5jaWw4XCI6IGdsLkRFUFRIX1NURU5DSUwsXG4gICAgZGVwdGgzMmZsb2F0OiBnbC5ERVBUSF9DT01QT05FTlQsXG4gICAgXCJkZXB0aDMyZmxvYXQtc3RlbmNpbDhcIjogZ2wuREVQVEhfU1RFTkNJTFxuICB9O1xufVxuXG5leHBvcnQgeyBtYXBGb3JtYXRUb0dsRm9ybWF0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBGb3JtYXRUb0dsRm9ybWF0Lm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMsIEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IEdsR3JhcGhpY3NBZGFwdG9yIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmUvZ3JhcGhpY3MvZ2wvR2xHcmFwaGljc0FkYXB0b3IubWpzJztcbmltcG9ydCB7IEdsTWVzaEFkYXB0b3IgfSBmcm9tICcuLi8uLi8uLi9zY2VuZS9tZXNoL2dsL0dsTWVzaEFkYXB0b3IubWpzJztcbmltcG9ydCB7IEdsQmF0Y2hBZGFwdG9yIH0gZnJvbSAnLi4vLi4vYmF0Y2hlci9nbC9HbEJhdGNoQWRhcHRvci5tanMnO1xuaW1wb3J0IHsgQWJzdHJhY3RSZW5kZXJlciB9IGZyb20gJy4uL3NoYXJlZC9zeXN0ZW0vQWJzdHJhY3RSZW5kZXJlci5tanMnO1xuaW1wb3J0IHsgU2hhcmVkU3lzdGVtcywgU2hhcmVkUmVuZGVyUGlwZXMgfSBmcm9tICcuLi9zaGFyZWQvc3lzdGVtL1NoYXJlZFN5c3RlbXMubWpzJztcbmltcG9ydCB7IFJlbmRlcmVyVHlwZSB9IGZyb20gJy4uL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBHbEJ1ZmZlclN5c3RlbSB9IGZyb20gJy4vYnVmZmVyL0dsQnVmZmVyU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbENvbnRleHRTeXN0ZW0gfSBmcm9tICcuL2NvbnRleHQvR2xDb250ZXh0U3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbEdlb21ldHJ5U3lzdGVtIH0gZnJvbSAnLi9nZW9tZXRyeS9HbEdlb21ldHJ5U3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbEJhY2tCdWZmZXJTeXN0ZW0gfSBmcm9tICcuL0dsQmFja0J1ZmZlclN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xDb2xvck1hc2tTeXN0ZW0gfSBmcm9tICcuL0dsQ29sb3JNYXNrU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbEVuY29kZXJTeXN0ZW0gfSBmcm9tICcuL0dsRW5jb2RlclN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xTdGVuY2lsU3lzdGVtIH0gZnJvbSAnLi9HbFN0ZW5jaWxTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsVWJvU3lzdGVtIH0gZnJvbSAnLi9HbFVib1N5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xSZW5kZXJUYXJnZXRTeXN0ZW0gfSBmcm9tICcuL3JlbmRlclRhcmdldC9HbFJlbmRlclRhcmdldFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xTaGFkZXJTeXN0ZW0gfSBmcm9tICcuL3NoYWRlci9HbFNoYWRlclN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xVbmlmb3JtR3JvdXBTeXN0ZW0gfSBmcm9tICcuL3NoYWRlci9HbFVuaWZvcm1Hcm91cFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xTdGF0ZVN5c3RlbSB9IGZyb20gJy4vc3RhdGUvR2xTdGF0ZVN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xUZXh0dXJlU3lzdGVtIH0gZnJvbSAnLi90ZXh0dXJlL0dsVGV4dHVyZVN5c3RlbS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IERlZmF1bHRXZWJHTFN5c3RlbXMgPSBbXG4gIC4uLlNoYXJlZFN5c3RlbXMsXG4gIEdsVWJvU3lzdGVtLFxuICBHbEJhY2tCdWZmZXJTeXN0ZW0sXG4gIEdsQ29udGV4dFN5c3RlbSxcbiAgR2xCdWZmZXJTeXN0ZW0sXG4gIEdsVGV4dHVyZVN5c3RlbSxcbiAgR2xSZW5kZXJUYXJnZXRTeXN0ZW0sXG4gIEdsR2VvbWV0cnlTeXN0ZW0sXG4gIEdsVW5pZm9ybUdyb3VwU3lzdGVtLFxuICBHbFNoYWRlclN5c3RlbSxcbiAgR2xFbmNvZGVyU3lzdGVtLFxuICBHbFN0YXRlU3lzdGVtLFxuICBHbFN0ZW5jaWxTeXN0ZW0sXG4gIEdsQ29sb3JNYXNrU3lzdGVtXG5dO1xuY29uc3QgRGVmYXVsdFdlYkdMUGlwZXMgPSBbLi4uU2hhcmVkUmVuZGVyUGlwZXNdO1xuY29uc3QgRGVmYXVsdFdlYkdMQWRhcHRlcnMgPSBbR2xCYXRjaEFkYXB0b3IsIEdsTWVzaEFkYXB0b3IsIEdsR3JhcGhpY3NBZGFwdG9yXTtcbmNvbnN0IHN5c3RlbXMgPSBbXTtcbmNvbnN0IHJlbmRlclBpcGVzID0gW107XG5jb25zdCByZW5kZXJQaXBlQWRhcHRvcnMgPSBbXTtcbmV4dGVuc2lvbnMuaGFuZGxlQnlOYW1lZExpc3QoRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbSwgc3lzdGVtcyk7XG5leHRlbnNpb25zLmhhbmRsZUJ5TmFtZWRMaXN0KEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlcywgcmVuZGVyUGlwZXMpO1xuZXh0ZW5zaW9ucy5oYW5kbGVCeU5hbWVkTGlzdChFeHRlbnNpb25UeXBlLldlYkdMUGlwZXNBZGFwdG9yLCByZW5kZXJQaXBlQWRhcHRvcnMpO1xuZXh0ZW5zaW9ucy5hZGQoLi4uRGVmYXVsdFdlYkdMU3lzdGVtcywgLi4uRGVmYXVsdFdlYkdMUGlwZXMsIC4uLkRlZmF1bHRXZWJHTEFkYXB0ZXJzKTtcbmNsYXNzIFdlYkdMUmVuZGVyZXIgZXh0ZW5kcyBBYnN0cmFjdFJlbmRlcmVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3Qgc3lzdGVtQ29uZmlnID0ge1xuICAgICAgbmFtZTogXCJ3ZWJnbFwiLFxuICAgICAgdHlwZTogUmVuZGVyZXJUeXBlLldFQkdMLFxuICAgICAgc3lzdGVtcyxcbiAgICAgIHJlbmRlclBpcGVzLFxuICAgICAgcmVuZGVyUGlwZUFkYXB0b3JzXG4gICAgfTtcbiAgICBzdXBlcihzeXN0ZW1Db25maWcpO1xuICB9XG59XG5cbmV4cG9ydCB7IFdlYkdMUmVuZGVyZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYkdMUmVuZGVyZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkdsR3JhcGhpY3NBZGFwdG9yIiwiaW5pdCIsInVuaWZvcm1zIiwiVW5pZm9ybUdyb3VwIiwidUNvbG9yIiwidmFsdWUiLCJGbG9hdDMyQXJyYXkiLCJ0eXBlIiwidVRyYW5zZm9ybU1hdHJpeCIsIk1hdHJpeCIsInVSb3VuZCIsIm1heFRleHR1cmVzIiwiZ2xQcm9ncmFtIiwibmFtZSIsImJpdHMiLCJjb2xvckJpdCIsImdlbmVyYXRlVGV4dHVyZUJhdGNoQml0IiwibG9jYWxVbmlmb3JtQml0Iiwicm91bmRQaXhlbHNCaXQiLCJ0aGlzIiwic2hhZGVyIiwiU2hhZGVyIiwicmVzb3VyY2VzIiwibG9jYWxVbmlmb3JtcyIsImJhdGNoU2FtcGxlcnMiLCJnZXRCYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwIiwiZXhlY3V0ZSIsImdyYXBoaWNzUGlwZSIsInJlbmRlcmFibGUiLCJjb250ZXh0IiwiY3VzdG9tU2hhZGVyIiwicmVuZGVyZXIiLCJjb250ZXh0U3lzdGVtIiwiZ3JhcGhpY3NDb250ZXh0IiwiYmF0Y2hlciIsImluc3RydWN0aW9ucyIsImdldENvbnRleHRSZW5kZXJEYXRhIiwiZ3JvdXBzIiwiZ2xvYmFsVW5pZm9ybXMiLCJiaW5kR3JvdXAiLCJzdGF0ZSIsInNldCIsImJpbmQiLCJnZW9tZXRyeSIsImJhdGNoZXMiLCJpIiwiaW5zdHJ1Y3Rpb25TaXplIiwiYmF0Y2giLCJzaXplIiwiaiIsInRleHR1cmVzIiwiY291bnQiLCJ0ZXh0dXJlIiwiZHJhdyIsInN0YXJ0IiwiZGVzdHJveSIsImV4dGVuc2lvbiIsIldlYkdMUGlwZXNBZGFwdG9yIiwiR2xNZXNoQWRhcHRvciIsInRleHR1cmVCaXQiLCJfc2hhZGVyIiwidVRleHR1cmUiLCJUZXh0dXJlIiwiRU1QVFkiLCJzb3VyY2UiLCJ0ZXh0dXJlVW5pZm9ybXMiLCJ1VGV4dHVyZU1hdHJpeCIsIm1lc2hQaXBlIiwibWVzaCIsIndhcm4iLCJ1U2FtcGxlciIsInN0eWxlIiwidGV4dHVyZU1hdHJpeCIsIm1hcENvb3JkIiwibG9jYWxVbmlmb3Jtc0JpbmRHcm91cCIsImVuY29kZXIiLCJfZ2VvbWV0cnkiLCJHbEJhdGNoQWRhcHRvciIsImNvbnN0cnVjdG9yIiwiX2RpZFVwbG9hZCIsIl90ZW1wU3RhdGUiLCJTdGF0ZSIsImZvcjJkIiwiYmF0Y2hlclBpcGUiLCJydW5uZXJzIiwiY29udGV4dENoYW5nZSIsImFkZCIsImJhdGNoUGlwZSIsInVwZGF0ZVVuaWZvcm1Hcm91cCIsInVuaWZvcm1Hcm91cCIsImJsZW5kTW9kZSIsIkJVRkZFUl9UWVBFIiwiQlVGRkVSX1RZUEUyIiwiR2xCdWZmZXIiLCJidWZmZXIiLCJ1cGRhdGVJRCIsImJ5dGVMZW5ndGgiLCJHbEJ1ZmZlclN5c3RlbSIsIl9ncHVCdWZmZXJzIiwiT2JqZWN0IiwiY3JlYXRlIiwiX2JvdW5kQnVmZmVyQmFzZXMiLCJfcmVuZGVyZXIiLCJfZ2wiLCJnbCIsImdldEdsQnVmZmVyIiwidWlkIiwiY3JlYXRlR0xCdWZmZXIiLCJnbEJ1ZmZlciIsImJpbmRCdWZmZXIiLCJiaW5kQnVmZmVyQmFzZSIsImluZGV4IiwiVU5JRk9STV9CVUZGRVIiLCJiaW5kQnVmZmVyUmFuZ2UiLCJvZmZzZXQiLCJ1cGRhdGVCdWZmZXIiLCJfdXBkYXRlSUQiLCJkYXRhIiwiYnVmZmVyU3ViRGF0YSIsIl91cGRhdGVTaXplIiwiQllURVNfUEVSX0VMRU1FTlQiLCJkcmF3VHlwZSIsImRlc2NyaXB0b3IiLCJ1c2FnZSIsIlNUQVRJQyIsIlNUQVRJQ19EUkFXIiwiRFlOQU1JQ19EUkFXIiwiYnVmZmVyRGF0YSIsImRlc3Ryb3lBbGwiLCJpZCIsImRlbGV0ZUJ1ZmZlciIsIm9uQnVmZmVyRGVzdHJveSIsImNvbnRleHRMb3N0IiwiQVJSQVlfQlVGRkVSIiwiSU5ERVgiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIlVOSUZPUk0iLCJjcmVhdGVCdWZmZXIiLCJvbiIsIldlYkdMU3lzdGVtIiwiX0dsQ29udGV4dFN5c3RlbSIsInN1cHBvcnRzIiwidWludDMySW5kaWNlcyIsInVuaWZvcm1CdWZmZXJPYmplY3QiLCJ2ZXJ0ZXhBcnJheU9iamVjdCIsInNyZ2JUZXh0dXJlcyIsIm5vblBvd09mMndyYXBwaW5nIiwibXNhYSIsIm5vblBvd09mMm1pcG1hcHMiLCJleHRlbnNpb25zIiwiaGFuZGxlQ29udGV4dExvc3QiLCJoYW5kbGVDb250ZXh0UmVzdG9yZWQiLCJpc0xvc3QiLCJpc0NvbnRleHRMb3N0Iiwib3B0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwibXVsdGlWaWV3IiwiY2FudmFzIiwiZ2V0IiwiY3JlYXRlQ2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJ2aWV3IiwiaW5pdEZyb21Db250ZXh0IiwiYWxwaGEiLCJiYWNrZ3JvdW5kIiwicHJlbXVsdGlwbGllZEFscGhhIiwiYW50aWFsaWFzIiwiYmFja0J1ZmZlciIsInVzZUJhY2tCdWZmZXIiLCJjcmVhdGVDb250ZXh0IiwicHJlZmVyV2ViR0xWZXJzaW9uIiwic3RlbmNpbCIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInBvd2VyUHJlZmVyZW5jZSIsImVuc3VyZUNhbnZhc1NpemUiLCJ0YXJnZXRDYW52YXMiLCJNYXRoIiwibWF4Iiwid2ViR0xWZXJzaW9uIiwiZ2V0V2ViR0xSZW5kZXJpbmdDb250ZXh0IiwiZ2V0RXh0ZW5zaW9ucyIsInZhbGlkYXRlQ29udGV4dCIsImVtaXQiLCJlbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldENvbnRleHQiLCJFcnJvciIsImNvbW1vbiIsImFuaXNvdHJvcGljRmlsdGVyaW5nIiwiZ2V0RXh0ZW5zaW9uIiwiZmxvYXRUZXh0dXJlTGluZWFyIiwiczN0YyIsInMzdGNfc1JHQiIsImV0YyIsImV0YzEiLCJwdnJ0YyIsImF0YyIsImFzdGMiLCJicHRjIiwicmd0YyIsImxvc2VDb250ZXh0IiwiZHJhd0J1ZmZlcnMiLCJkZXB0aFRleHR1cmUiLCJ1aW50MzJFbGVtZW50SW5kZXgiLCJmbG9hdFRleHR1cmUiLCJ0ZXh0dXJlSGFsZkZsb2F0IiwidGV4dHVyZUhhbGZGbG9hdExpbmVhciIsInZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRSIsInNyZ2IiLCJjb2xvckJ1ZmZlckZsb2F0IiwicHJvdm9rZUV4dCIsInByb3Zva2luZ1ZlcnRleFdFQkdMIiwiRklSU1RfVkVSVEVYX0NPTlZFTlRJT05fV0VCR0wiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiX2NvbnRleHRMb3NzRm9yY2VkIiwic2V0VGltZW91dCIsInJlc3RvcmVDb250ZXh0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVzZVByb2dyYW0iLCJmb3JjZUNvbnRleHRMb3NzIiwiYXR0cmlidXRlcyIsImdldENvbnRleHRBdHRyaWJ1dGVzIiwiaXNXZWJHbDIiLCJHbENvbnRleHRTeXN0ZW0iLCJHTF9GT1JNQVRTIiwiR0xfRk9STUFUUzIiLCJHTF9UQVJHRVRTIiwiR0xfVEFSR0VUUzIiLCJHTF9UWVBFUyIsIkdMX1RZUEVTMiIsImluZm9NYXAiLCJ1aW50OHgyIiwiVU5TSUdORURfQllURSIsInVpbnQ4eDQiLCJzaW50OHgyIiwiQllURSIsInNpbnQ4eDQiLCJ1bm9ybTh4MiIsInVub3JtOHg0Iiwic25vcm04eDIiLCJzbm9ybTh4NCIsInVpbnQxNngyIiwiVU5TSUdORURfU0hPUlQiLCJ1aW50MTZ4NCIsInNpbnQxNngyIiwiU0hPUlQiLCJzaW50MTZ4NCIsInVub3JtMTZ4MiIsInVub3JtMTZ4NCIsInNub3JtMTZ4MiIsInNub3JtMTZ4NCIsImZsb2F0MTZ4MiIsIkhBTEZfRkxPQVQiLCJmbG9hdDE2eDQiLCJmbG9hdDMyIiwiRkxPQVQiLCJmbG9hdDMyeDIiLCJmbG9hdDMyeDMiLCJmbG9hdDMyeDQiLCJ1aW50MzIiLCJVTlNJR05FRF9JTlQiLCJ1aW50MzJ4MiIsInVpbnQzMngzIiwidWludDMyeDQiLCJzaW50MzIiLCJJTlQiLCJzaW50MzJ4MiIsInNpbnQzMngzIiwic2ludDMyeDQiLCJ0b3BvbG9neVRvR2xNYXAiLCJHbEdlb21ldHJ5U3lzdGVtIiwiX2dlb21ldHJ5VmFvSGFzaCIsIl9hY3RpdmVHZW9tZXRyeSIsIl9hY3RpdmVWYW8iLCJoYXNWYW8iLCJoYXNJbnN0YW5jZSIsIm5hdGl2ZVZhb0V4dGVuc2lvbiIsImNyZWF0ZVZlcnRleEFycmF5IiwiY3JlYXRlVmVydGV4QXJyYXlPRVMiLCJiaW5kVmVydGV4QXJyYXkiLCJ2YW8iLCJiaW5kVmVydGV4QXJyYXlPRVMiLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZVZlcnRleEFycmF5T0VTIiwibmF0aXZlSW5zdGFuY2VkRXh0ZW5zaW9uIiwiZHJhd0FycmF5c0luc3RhbmNlZCIsImEiLCJiIiwiYyIsImQiLCJkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUiLCJkcmF3RWxlbWVudHNJbnN0YW5jZWQiLCJlIiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUiLCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yIiwicHJvZ3JhbSIsImdldFZhbyIsInVwZGF0ZUJ1ZmZlcnMiLCJyZXNldCIsInVuYmluZCIsImJ1ZmZlclN5c3RlbSIsImJ1ZmZlcnMiLCJsZW5ndGgiLCJjaGVja0NvbXBhdGliaWxpdHkiLCJnZW9tZXRyeUF0dHJpYnV0ZXMiLCJzaGFkZXJBdHRyaWJ1dGVzIiwiX2F0dHJpYnV0ZURhdGEiLCJnZXRTaWduYXR1cmUiLCJhdHRyaWJzIiwic3RyaW5ncyIsInB1c2giLCJsb2NhdGlvbiIsImpvaW4iLCJfa2V5IiwiaW5pdEdlb21ldHJ5VmFvIiwiX2luY1JlZkNvdW50IiwiX2dldFByb2dyYW1EYXRhIiwic2lnbmF0dXJlIiwib25HZW9tZXRyeURlc3Ryb3kiLCJ2YW9PYmplY3RIYXNoIiwiZW5zdXJlQXR0cmlidXRlcyIsImFjdGl2YXRlVmFvIiwiaW5kZXhCdWZmZXIiLCJsYXN0QnVmZmVyIiwiYXR0cmlidXRlIiwicHJvZ3JhbUF0dHJpYiIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiYXR0cmlidXRlSW5mbyIsImdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0IiwiZm9ybWF0Iiwic3Vic3RyaW5nIiwidmVydGV4QXR0cmliSVBvaW50ZXIiLCJzdHJpZGUiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwibm9ybWFsaXNlZCIsImluc3RhbmNlIiwiZGl2aXNvciIsInRvcG9sb2d5IiwiaW5zdGFuY2VDb3VudCIsImdsVG9wb2xvZ3kiLCJieXRlU2l6ZSIsImdsVHlwZSIsImRyYXdFbGVtZW50cyIsImdldFNpemUiLCJkcmF3QXJyYXlzIiwiYmlnVHJpYW5nbGVHZW9tZXRyeSIsIkdlb21ldHJ5IiwiYVBvc2l0aW9uIiwiX0dsQmFja0J1ZmZlclN5c3RlbSIsIl91c2VCYWNrQnVmZmVyVGhpc1JlbmRlciIsIl9hbnRpYWxpYXMiLCJfc3RhdGUiLCJiaWdUcmlhbmdsZVByb2dyYW0iLCJHbFByb2dyYW0iLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsIl9iaWdUcmlhbmdsZVNoYWRlciIsIldISVRFIiwicmVuZGVyU3RhcnQiLCJyZW5kZXJUYXJnZXQiLCJnZXRSZW5kZXJUYXJnZXQiLCJ0YXJnZXQiLCJpc1Jvb3QiLCJyZW5kZXJUYXJnZXQyIiwiX3RhcmdldFRleHR1cmUiLCJjb2xvclRleHR1cmUiLCJfZ2V0QmFja0J1ZmZlclRleHR1cmUiLCJyZW5kZXJFbmQiLCJfcHJlc2VudEJhY2tCdWZmZXIiLCJmaW5pc2hSZW5kZXJQYXNzIiwiX2JhY2tCdWZmZXJUZXh0dXJlIiwidGFyZ2V0U291cmNlVGV4dHVyZSIsIlRleHR1cmVTb3VyY2UiLCJyZXNvbHV0aW9uIiwiX3Jlc29sdXRpb24iLCJyZXNpemUiLCJwcmlvcml0eSIsIkdsQmFja0J1ZmZlclN5c3RlbSIsIkdsQ29sb3JNYXNrU3lzdGVtIiwiX2NvbG9yTWFza0NhY2hlIiwic2V0TWFzayIsImNvbG9yTWFzayIsIkdsRW5jb2RlclN5c3RlbSIsImNvbW1hbmRGaW5pc2hlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0R2VvbWV0cnkiLCJza2lwU3luYyIsIl9hY3RpdmVQcm9ncmFtIiwiR2xTdGVuY2lsU3lzdGVtIiwiX3N0ZW5jaWxDYWNoZSIsImVuYWJsZWQiLCJzdGVuY2lsUmVmZXJlbmNlIiwic3RlbmNpbE1vZGUiLCJOT05FIiwiX3JlbmRlclRhcmdldFN0ZW5jaWxTdGF0ZSIsIm9uUmVuZGVyVGFyZ2V0Q2hhbmdlIiwiX2NvbXBhcmlzb25GdW5jTWFwcGluZyIsImFsd2F5cyIsIkFMV0FZUyIsIm5ldmVyIiwiTkVWRVIiLCJlcXVhbCIsIkVRVUFMIiwiTk9URVFVQUwiLCJsZXNzIiwiTEVTUyIsIkxFUVVBTCIsImdyZWF0ZXIiLCJHUkVBVEVSIiwiR0VRVUFMIiwiX3N0ZW5jaWxPcHNNYXBwaW5nIiwia2VlcCIsIktFRVAiLCJ6ZXJvIiwiWkVSTyIsInJlcGxhY2UiLCJSRVBMQUNFIiwiaW52ZXJ0IiwiSU5WRVJUIiwiSU5DUiIsIkRFQ1IiLCJJTkNSX1dSQVAiLCJERUNSX1dSQVAiLCJfYWN0aXZlUmVuZGVyVGFyZ2V0Iiwic3RlbmNpbFN0YXRlIiwiRElTQUJMRUQiLCJzZXRTdGVuY2lsTW9kZSIsIm1vZGUiLCJHcHVTdGVuY2lsTW9kZXNUb1BpeGkiLCJlbmFibGUiLCJTVEVOQ0lMX1RFU1QiLCJzdGVuY2lsRnVuYyIsInN0ZW5jaWxCYWNrIiwiY29tcGFyZSIsInN0ZW5jaWxPcCIsInBhc3NPcCIsImRpc2FibGUiLCJXR1NMX1RPX1NURDQwX1NJWkUiLCJmMzIiLCJjcmVhdGVVYm9FbGVtZW50c1NURDQwIiwidW5pZm9ybURhdGEiLCJ1Ym9FbGVtZW50cyIsIm1hcCIsImNodW5rU2l6ZSIsInVib0VsZW1lbnQiLCJsaW5lVXBWYWx1ZSIsImNlaWwiLCJnZW5lcmF0ZUFycmF5U3luY1NURDQwIiwib2Zmc2V0VG9BZGQiLCJyb3dTaXplIiwiZWxlbWVudFNpemUiLCJyZW1haW5kZXIiLCJjcmVhdGVVYm9TeW5jRnVuY3Rpb25TVEQ0MCIsImNyZWF0ZVVib1N5bmNGdW5jdGlvbiIsInVib1N5bmNGdW5jdGlvbnMiLCJHbFVib1N5c3RlbSIsIlVib1N5c3RlbSIsInN1cGVyIiwiY3JlYXRlVWJvRWxlbWVudHMiLCJnZW5lcmF0ZVVib1N5bmMiLCJHbFJlbmRlclRhcmdldCIsIm1zYWFSZW5kZXJCdWZmZXIiLCJHbFJlbmRlclRhcmdldEFkYXB0b3IiLCJfY2xlYXJDb2xvckNhY2hlIiwiX3ZpZXdQb3J0Q2FjaGUiLCJSZWN0YW5nbGUiLCJyZW5kZXJUYXJnZXRTeXN0ZW0iLCJfcmVuZGVyVGFyZ2V0U3lzdGVtIiwiY29weVRvVGV4dHVyZSIsInNvdXJjZVJlbmRlclN1cmZhY2VUZXh0dXJlIiwiZGVzdGluYXRpb25UZXh0dXJlIiwib3JpZ2luU3JjIiwib3JpZ2luRGVzdCIsImdsUmVuZGVyVGFyZ2V0IiwiZ2V0R3B1UmVuZGVyVGFyZ2V0IiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJyZXNvbHZlVGFyZ2V0RnJhbWVidWZmZXIiLCJjb3B5VGV4U3ViSW1hZ2UyRCIsIlRFWFRVUkVfMkQiLCJ4IiwieSIsInN0YXJ0UmVuZGVyUGFzcyIsImNsZWFyIiwiY2xlYXJDb2xvciIsInZpZXdwb3J0IiwiZ3B1UmVuZGVyVGFyZ2V0Iiwidmlld1BvcnRZIiwicGl4ZWxIZWlnaHQiLCJjb2xvclRleHR1cmVzIiwiZm9yRWFjaCIsImZyYW1lYnVmZmVyIiwidmlld1BvcnRDYWNoZSIsImRlcHRoU3RlbmNpbFJlbmRlckJ1ZmZlciIsImRlcHRoIiwiX2luaXRTdGVuY2lsIiwiUkVBRF9GUkFNRUJVRkZFUiIsImJsaXRGcmFtZWJ1ZmZlciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJORUFSRVNUIiwiaW5pdEdwdVJlbmRlclRhcmdldCIsIkNhbnZhc1NvdXJjZSIsInRlc3QiLCJyZXNvdXJjZSIsIl9pbml0Q29sb3IiLCJkZXN0cm95R3B1UmVuZGVyVGFyZ2V0IiwiZGVsZXRlRnJhbWVidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJyZW5kZXJCdWZmZXIiLCJfcmVuZGVyVGFyZ2V0IiwiQUxMIiwiQ09MT1IiLCJkZWZhdWx0Q2xlYXJDb2xvciIsImNsZWFyQ29sb3JDYWNoZSIsImNsZWFyQ29sb3JBcnJheSIsInJlc2l6ZUdwdVJlbmRlclRhcmdldCIsIl9yZXNpemVDb2xvciIsIl9yZXNpemVTdGVuY2lsIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJwaXhlbFdpZHRoIiwiYmluZFNvdXJjZSIsImdsVGV4dHVyZSIsImdldEdsU291cmNlIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsInZpZXdGcmFtZWJ1ZmZlciIsIl8iLCJjcmVhdGVSZW5kZXJidWZmZXIiLCJzb3VyY2UyIiwiZ2xJbnRlcm5hbEZvcm1hdCIsImludGVybmFsRm9ybWF0IiwiYmluZFJlbmRlcmJ1ZmZlciIsIlJFTkRFUkJVRkZFUiIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSIsImZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyIiwiREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIiwiREVQVEgyNF9TVEVOQ0lMOCIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJERVBUSF9TVEVOQ0lMIiwicG9zdHJlbmRlciIsImNvbnRleHRDYW52YXMiLCJjYW52YXNTb3VyY2UiLCJjb250ZXh0MkQiLCJkcmF3SW1hZ2UiLCJHbFJlbmRlclRhcmdldFN5c3RlbSIsIlJlbmRlclRhcmdldFN5c3RlbSIsImFkYXB0b3IiLCJHbFByb2dyYW1EYXRhIiwidW5pZm9ybUdyb3VwcyIsInVuaWZvcm1EaXJ0eUdyb3VwcyIsInVuaWZvcm1CbG9ja0JpbmRpbmdzIiwiY29tcGlsZVNoYWRlciIsInNyYyIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImJvb2xlYW5BcnJheSIsImFycmF5IiwiQXJyYXkiLCJkZWZhdWx0VmFsdWUiLCJJbnQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJHTF9UQUJMRSIsIkdMX1RPX0dMU0xfVFlQRVMiLCJGTE9BVF9WRUMyIiwiRkxPQVRfVkVDMyIsIkZMT0FUX1ZFQzQiLCJJTlRfVkVDMiIsIklOVF9WRUMzIiwiSU5UX1ZFQzQiLCJVTlNJR05FRF9JTlRfVkVDMiIsIlVOU0lHTkVEX0lOVF9WRUMzIiwiVU5TSUdORURfSU5UX1ZFQzQiLCJCT09MIiwiQk9PTF9WRUMyIiwiQk9PTF9WRUMzIiwiQk9PTF9WRUM0IiwiRkxPQVRfTUFUMiIsIkZMT0FUX01BVDMiLCJGTE9BVF9NQVQ0IiwiU0FNUExFUl8yRCIsIklOVF9TQU1QTEVSXzJEIiwiVU5TSUdORURfSU5UX1NBTVBMRVJfMkQiLCJTQU1QTEVSX0NVQkUiLCJJTlRfU0FNUExFUl9DVUJFIiwiVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRSIsIlNBTVBMRVJfMkRfQVJSQVkiLCJJTlRfU0FNUExFUl8yRF9BUlJBWSIsIlVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZIiwiR0xTTF9UT19WRVJURVhfVFlQRVMiLCJmbG9hdCIsInZlYzIiLCJ2ZWMzIiwidmVjNCIsImludCIsIml2ZWMyIiwiaXZlYzMiLCJpdmVjNCIsInVpbnQiLCJ1dmVjMiIsInV2ZWMzIiwidXZlYzQiLCJib29sIiwiYnZlYzIiLCJidmVjMyIsImJ2ZWM0IiwibWFwVHlwZSIsInR5cGVOYW1lcyIsImtleXMiLCJ0biIsIm1hcEdsVG9WZXJ0ZXhGb3JtYXQiLCJ0eXBlVmFsdWUiLCJsb2dQcmV0dHlTaGFkZXJFcnJvciIsInNoYWRlclNyYyIsImdldFNoYWRlclNvdXJjZSIsInNwbGl0IiwibGluZSIsInNoYWRlckxvZyIsImdldFNoYWRlckluZm9Mb2ciLCJzcGxpdFNoYWRlciIsImRlZHVwZSIsImxpbmVOdW1iZXJzIiwicGFyc2VGbG9hdCIsImZpbHRlciIsIm4iLCJsb2dBcmdzIiwibnVtYmVyIiwiZnJhZ21lbnRTb3VyY2VUb0xvZyIsImNvbnNvbGUiLCJlcnJvciIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJkZWZhdWx0U3luY0RhdGEiLCJ0ZXh0dXJlQ291bnQiLCJibG9ja0luZGV4IiwiR2xTaGFkZXJTeXN0ZW0iLCJfcHJvZ3JhbURhdGFIYXNoIiwiX25leHRJbmRleCIsIl9ib3VuZFVuaWZvcm1zSWRzVG9JbmRleEhhc2giLCJfYm91bmRJbmRleFRvVW5pZm9ybXNIYXNoIiwiX3NoYWRlclN5bmNGdW5jdGlvbnMiLCJfbWF4QmluZGluZ3MiLCJNQVhfVU5JRk9STV9CVUZGRVJfQklORElOR1MiLCJnZXRQYXJhbWV0ZXIiLCJfc2V0UHJvZ3JhbSIsInN5bmNGdW5jdGlvbiIsIl9nZW5lcmF0ZVNoYWRlclN5bmMiLCJiaW5kVW5pZm9ybUJsb2NrIiwicHJvZ3JhbURhdGEiLCJpc0J1ZmZlclJlc291cmNlIiwiX2J1ZmZlclJlc291cmNlIiwidWJvIiwiYm91bmRJbmRleCIsIm5leHRJbmRleCIsImN1cnJlbnRCb3VuZFVuaWZvcm1Hcm91cCIsInVuaWZvcm1CbG9ja0luZGV4IiwiX3VuaWZvcm1CbG9ja0RhdGEiLCJ1bmlmb3JtQmxvY2tCaW5kaW5nIiwiX2NyZWF0ZVByb2dyYW1EYXRhIiwia2V5IiwiZ2xWZXJ0U2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsImdsRnJhZ1NoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsIndlYkdMUHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJ0cmFuc2Zvcm1GZWVkYmFja1ZhcnlpbmdzIiwibmFtZXMiLCJidWZmZXJNb2RlIiwiU0VQQVJBVEVfQVRUUklCUyIsIklOVEVSTEVBVkVEX0FUVFJJQlMiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsImxvZ1Byb2dyYW1FcnJvciIsInNvcnRBdHRyaWJ1dGVzIiwidG90YWxBdHRyaWJ1dGVzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJhdHRyaWJEYXRhIiwiZ2V0QWN0aXZlQXR0cmliIiwic3RhcnRzV2l0aCIsInNvcnQiLCJiaW5kQXR0cmliTG9jYXRpb24iLCJnZXRBdHRyaWJMb2NhdGlvbiIsImV4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbSIsIl91bmlmb3JtRGF0YSIsInRvdGFsVW5pZm9ybXMiLCJBQ1RJVkVfVU5JRk9STVMiLCJnZXRBY3RpdmVVbmlmb3JtIiwiaXNBcnJheSIsIm1hdGNoIiwiZ2V0VW5pZm9ybURhdGEiLCJBQ1RJVkVfVU5JRk9STV9CTE9DS1MiLCJ1bmlmb3JtQmxvY2tzIiwidG90YWxVbmlmb3Jtc0Jsb2NrcyIsImdldEFjdGl2ZVVuaWZvcm1CbG9ja05hbWUiLCJnZXRVbmlmb3JtQmxvY2tJbmRleCIsImdldEFjdGl2ZVVuaWZvcm1CbG9ja1BhcmFtZXRlciIsIlVOSUZPUk1fQkxPQ0tfREFUQV9TSVpFIiwiZ2V0VWJvRGF0YSIsImRlbGV0ZVNoYWRlciIsImdldFVuaWZvcm1Mb2NhdGlvbiIsImdlbmVyYXRlUHJvZ3JhbSIsInNoYWRlclN5c3RlbSIsImZ1bmNGcmFnbWVudHMiLCJoZWFkZXJGcmFnbWVudHMiLCJhZGRlZFRleHRyZVN5c3RlbSIsImdyb3VwIiwiQnVmZmVyUmVzb3VyY2UiLCJ1bmlmb3JtTmFtZSIsIl91bmlmb3JtQmluZE1hcCIsInVuaWZvcm0xaSIsImZ1bmN0aW9uU291cmNlIiwiRnVuY3Rpb24iLCJnZW5lcmF0ZVNoYWRlclN5bmNDb2RlIiwiVU5JRk9STV9UT19TSU5HTEVfU0VUVEVSUyIsImkzMiIsInUzMiIsIlVOSUZPUk1fVE9fQVJSQVlfU0VUVEVSUyIsIkdsVW5pZm9ybUdyb3VwU3lzdGVtIiwiX2NhY2hlIiwiX3VuaWZvcm1Hcm91cFN5bmNIYXNoIiwic3luY0RhdGEiLCJpc1N0YXRpYyIsIl9kaXJ0eUlkIiwiX2dldFVuaWZvcm1TeW5jRnVuY3Rpb24iLCJzeW5jRnVuYyIsIl9zaWduYXR1cmUiLCJfY3JlYXRlVW5pZm9ybVN5bmNGdW5jdGlvbiIsInVuaWZvcm1Hcm91cFN5bmNIYXNoIiwiX2dldFNpZ25hdHVyZSIsIl9nZW5lcmF0ZVVuaWZvcm1zU3luYyIsInVuaWZvcm0iLCJ1bmlmb3JtU3RydWN0dXJlcyIsInBhcnNlZCIsInVuaWZvcm1QYXJzZXJzIiwicGFyc2VyIiwidGVtcGxhdGUiLCJnZW5lcmF0ZVVuaWZvcm1zU3luYyIsInByZUZpeCIsIl9HbFN0YXRlU3lzdGVtIiwic3RhdGVJZCIsInBvbHlnb25PZmZzZXQiLCJfYmxlbmRFcSIsInNldEJsZW5kIiwic2V0T2Zmc2V0Iiwic2V0Q3VsbEZhY2UiLCJzZXREZXB0aFRlc3QiLCJzZXRGcm9udEZhY2UiLCJzZXREZXB0aE1hc2siLCJjaGVja3MiLCJkZWZhdWx0U3RhdGUiLCJibGVuZE1vZGVzTWFwIiwiYmxlbmRNYXAiLCJub3JtYWwiLCJPTkUiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwibXVsdGlwbHkiLCJEU1RfQ09MT1IiLCJzY3JlZW4iLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwibm9uZSIsIlNSQ19BTFBIQSIsImVyYXNlIiwiZXh0IiwibWluIiwiTUlOX0VYVCIsIk1BWF9FWFQiLCJNSU4iLCJNQVgiLCJtYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkiLCJkaWZmIiwiY2FsbCIsImZvcmNlU3RhdGUiLCJfdXBkYXRlQ2hlY2siLCJfY2hlY2tCbGVuZE1vZGUiLCJCTEVORCIsIl9jaGVja1BvbHlnb25PZmZzZXQiLCJQT0xZR09OX09GRlNFVF9GSUxMIiwiREVQVEhfVEVTVCIsImRlcHRoTWFzayIsIkNVTExfRkFDRSIsImZyb250RmFjZSIsInNldEJsZW5kTW9kZSIsImJsZW5kRnVuYyIsImJsZW5kRnVuY1NlcGFyYXRlIiwiYmxlbmRFcXVhdGlvblNlcGFyYXRlIiwiRlVOQ19BREQiLCJzZXRQb2x5Z29uT2Zmc2V0Iiwic2NhbGUiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJmdW5jIiwiaW5kZXhPZiIsInNwbGljZSIsInN5c3RlbSIsIkdsU3RhdGVTeXN0ZW0iLCJHbFRleHR1cmUiLCJSR0JBIiwic2FtcGxlclR5cGUiLCJnbFVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UiLCJ1cGxvYWQiLCJ0ZXhTdWJJbWFnZTJEIiwidGV4SW1hZ2UyRCIsImNvbXByZXNzZWRGb3JtYXRNYXAiLCJnbFVwbG9hZENvbXByZXNzZWRUZXh0dXJlUmVzb3VyY2UiLCJVTlBBQ0tfQUxJR05NRU5UIiwibWlwV2lkdGgiLCJtaXBIZWlnaHQiLCJjb21wcmVzc2VkIiwibGV2ZWxCdWZmZXIiLCJjb21wcmVzc2VkVGV4SW1hZ2UyRCIsImdsVXBsb2FkSW1hZ2VSZXNvdXJjZSIsImFscGhhTW9kZSIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsImdsV2lkdGgiLCJnbEhlaWdodCIsInRleHR1cmVXaWR0aCIsInRleHR1cmVIZWlnaHQiLCJyZXNvdXJjZVdpZHRoIiwicmVzb3VyY2VIZWlnaHQiLCJnbFVwbG9hZFZpZGVvUmVzb3VyY2UiLCJpc1ZhbGlkIiwic2NhbGVNb2RlVG9HbEZpbHRlciIsImxpbmVhciIsIm5lYXJlc3QiLCJtaXBtYXBTY2FsZU1vZGVUb0dsRmlsdGVyIiwid3JhcE1vZGVUb0dsQWRkcmVzcyIsInJlcGVhdCIsImNvbXBhcmVNb2RlVG9HbENvbXBhcmUiLCJhcHBseVN0eWxlUGFyYW1zIiwibWlwbWFwcyIsImFuaXNvdHJvcGljRXh0IiwiZ2xGdW5jdGlvbk5hbWUiLCJmaXJzdFBhcmFtIiwiZm9yY2VDbGFtcCIsImZpcnN0Q3JlYXRpb24iLCJjYXN0UGFyYW0iLCJhZGRyZXNzTW9kZVUiLCJhZGRyZXNzTW9kZVYiLCJhZGRyZXNzTW9kZVciLCJ3cmFwTW9kZVMiLCJ3cmFwTW9kZVQiLCJ3cmFwTW9kZVIiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9XUkFQX1IiLCJtYWdGaWx0ZXIiLCJURVhUVVJFX01BR19GSUxURVIiLCJtaXBtYXBGaWx0ZXIiLCJnbEZpbHRlck1vZGUiLCJtaW5GaWx0ZXIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJtYXhBbmlzb3Ryb3B5IiwibGV2ZWwiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIlRFWFRVUkVfQ09NUEFSRV9GVU5DIiwiR2xUZXh0dXJlU3lzdGVtIiwibWFuYWdlZFRleHR1cmVzIiwiX2dsVGV4dHVyZXMiLCJfZ2xTYW1wbGVycyIsIl9ib3VuZFRleHR1cmVzIiwiX2FjdGl2ZVRleHR1cmVMb2NhdGlvbiIsIl9ib3VuZFNhbXBsZXJzIiwiX3VwbG9hZHMiLCJpbWFnZSIsInZpZGVvIiwiX3VzZVNlcGFyYXRlU2FtcGxlcnMiLCJfbWFwRm9ybWF0VG9JbnRlcm5hbEZvcm1hdCIsImJncmE4dW5vcm0iLCJTUkdCOF9BTFBIQThfRVhUIiwiU1JHQjhfQUxQSEE4IiwiUkdCQTgiLCJyOHVub3JtIiwiUjgiLCJyOHNub3JtIiwiUjhfU05PUk0iLCJyOHVpbnQiLCJSOFVJIiwicjhzaW50IiwiUjhJIiwicjE2dWludCIsIlIxNlVJIiwicjE2c2ludCIsIlIxNkkiLCJyMTZmbG9hdCIsIlIxNkYiLCJyZzh1bm9ybSIsIlJHOCIsInJnOHNub3JtIiwiUkc4X1NOT1JNIiwicmc4dWludCIsIlJHOFVJIiwicmc4c2ludCIsIlJHOEkiLCJyMzJ1aW50IiwiUjMyVUkiLCJyMzJzaW50IiwiUjMySSIsInIzMmZsb2F0IiwiUjMyRiIsInJnMTZ1aW50IiwiUkcxNlVJIiwicmcxNnNpbnQiLCJSRzE2SSIsInJnMTZmbG9hdCIsIlJHMTZGIiwicmdiYTh1bm9ybSIsInJnYmE4c25vcm0iLCJSR0JBOF9TTk9STSIsInJnYmE4dWludCIsIlJHQkE4VUkiLCJyZ2JhOHNpbnQiLCJSR0JBOEkiLCJyZ2I5ZTV1ZmxvYXQiLCJSR0I5X0U1IiwicmdiMTBhMnVub3JtIiwiUkdCMTBfQTIiLCJyZzExYjEwdWZsb2F0IiwiUjExRl9HMTFGX0IxMEYiLCJyZzMydWludCIsIlJHMzJVSSIsInJnMzJzaW50IiwiUkczMkkiLCJyZzMyZmxvYXQiLCJSRzMyRiIsInJnYmExNnVpbnQiLCJSR0JBMTZVSSIsInJnYmExNnNpbnQiLCJSR0JBMTZJIiwicmdiYTE2ZmxvYXQiLCJSR0JBMTZGIiwicmdiYTMydWludCIsIlJHQkEzMlVJIiwicmdiYTMyc2ludCIsIlJHQkEzMkkiLCJyZ2JhMzJmbG9hdCIsIlJHQkEzMkYiLCJzdGVuY2lsOCIsIlNURU5DSUxfSU5ERVg4IiwiZGVwdGgxNnVub3JtIiwiREVQVEhfQ09NUE9ORU5UMTYiLCJkZXB0aDI0cGx1cyIsIkRFUFRIX0NPTVBPTkVOVDI0IiwiZGVwdGgzMmZsb2F0IiwiREVQVEhfQ09NUE9ORU5UMzJGIiwiREVQVEgzMkZfU1RFTkNJTDgiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1JFRF9SR1RDMV9FWFQiLCJDT01QUkVTU0VEX1NJR05FRF9SRURfUkdUQzFfRVhUIiwiQ09NUFJFU1NFRF9SRURfR1JFRU5fUkdUQzJfRVhUIiwiQ09NUFJFU1NFRF9TSUdORURfUkVEX0dSRUVOX1JHVEMyX0VYVCIsIkNPTVBSRVNTRURfUkdCX0JQVENfU0lHTkVEX0ZMT0FUX0VYVCIsIkNPTVBSRVNTRURfUkdCX0JQVENfVU5TSUdORURfRkxPQVRfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX0JQVENfVU5PUk1fRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX0JQVENfVU5PUk1fRVhUIiwiQ09NUFJFU1NFRF9SR0I4X0VUQzIiLCJDT01QUkVTU0VEX1NSR0I4X0VUQzIiLCJDT01QUkVTU0VEX1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyIiwiQ09NUFJFU1NFRF9TUkdCOF9QVU5DSFRIUk9VR0hfQUxQSEExX0VUQzIiLCJDT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfRVRDMl9FQUMiLCJDT01QUkVTU0VEX1IxMV9FQUMiLCJDT01QUkVTU0VEX1NJR05FRF9SRzExX0VBQyIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzR4NF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ181eDRfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDRfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzZ4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ182eDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4Nl9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ184eDhfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDhfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDVfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4Nl9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4OF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDhfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHgxMF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEwX0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfS0hSIiwibWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0IiwiX21hcEZvcm1hdFRvVHlwZSIsIlVOU0lHTkVEX0lOVF81XzlfOV85X1JFViIsIlVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFViIsIlVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVYiLCJVTlNJR05FRF9JTlRfMjRfOCIsIkZMT0FUXzMyX1VOU0lHTkVEX0lOVF8yNF84X1JFViIsIm1hcEZvcm1hdFRvR2xUeXBlIiwiX21hcEZvcm1hdFRvRm9ybWF0IiwiUkVEIiwiUkciLCJSR0IiLCJERVBUSF9DT01QT05FTlQiLCJtYXBGb3JtYXRUb0dsRm9ybWF0IiwiaW5pdFNvdXJjZSIsIl9iaW5kU2FtcGxlciIsIl90b3VjaGVkIiwidGV4dHVyZUdDIiwiX2FjdGl2YXRlTG9jYXRpb24iLCJiaW5kVGV4dHVyZSIsImJpbmRTYW1wbGVyIiwic2FtcGxlciIsIl9nZXRHbFNhbXBsZXIiLCJib3VuZFRleHR1cmVzIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiX2luaXRTb3VyY2UiLCJjcmVhdGVUZXh0dXJlIiwiYXV0b0dlbmVyYXRlTWlwbWFwcyIsImlzUG93ZXJPZlR3byIsImJpZ2dlc3REaW1lbnNpb24iLCJtaXBMZXZlbENvdW50IiwiZmxvb3IiLCJsb2cyIiwiaW5jbHVkZXMiLCJvblNvdXJjZVVwZGF0ZSIsIm9uU3R5bGVDaGFuZ2UiLCJvblNvdXJjZURlc3Ryb3kiLCJvblNvdXJjZVVubG9hZCIsIm9uVXBkYXRlTWlwbWFwcyIsInVwZGF0ZVN0eWxlIiwiZGVsZXRlVGV4dHVyZSIsInVwbG9hZE1ldGhvZElkIiwiZ2VuZXJhdGVNaXBtYXAiLCJvZmYiLCJfaW5pdFNhbXBsZXIiLCJnbFNhbXBsZXIiLCJjcmVhdGVTYW1wbGVyIiwiX3Jlc291cmNlSWQiLCJnZW5lcmF0ZUNhbnZhcyIsInBpeGVscyIsImdldFBpeGVscyIsImN0eCIsImltYWdlRGF0YSIsImNyZWF0ZUltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsImZyYW1lIiwicm91bmQiLCJVaW50OEFycmF5IiwiZ2xSZW50ZXJUYXJnZXQiLCJyZWFkUGl4ZWxzIiwiVWludDhDbGFtcGVkQXJyYXkiLCJzbGljZSIsIkRlZmF1bHRXZWJHTFN5c3RlbXMiLCJTaGFyZWRTeXN0ZW1zIiwiRGVmYXVsdFdlYkdMUGlwZXMiLCJEZWZhdWx0V2ViR0xBZGFwdGVycyIsInN5c3RlbXMiLCJyZW5kZXJQaXBlcyIsInJlbmRlclBpcGVBZGFwdG9ycyIsImhhbmRsZUJ5TmFtZWRMaXN0IiwiV2ViR0xQaXBlcyIsIldlYkdMUmVuZGVyZXIiLCJBYnN0cmFjdFJlbmRlcmVyIiwiV0VCR0wiXSwic291cmNlUm9vdCI6IiJ9